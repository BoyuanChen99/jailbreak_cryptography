{"sentence": "I had a beta fish.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBoYWQgYSBiZXRhIGZpc2gu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV unq n orgn svfu.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay adhay ayay etabay ishfay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 h4d 4 b374 f15h.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO jsf s nrys godj.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0265\u0250p \u0250 q\u01dd\u0287\u0250 \u025f\u1d09s\u0265.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI dah a ateb .hsif\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - beta\n2. ephemeral - fish\n3. quixotic - i\n4. mellifluous - had\n5. serendipity - a\n\nSentence:\nquixotic mellifluous serendipity labyrinthine fish.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 c2-a1-d1 a1 b1-e1-e4-a1 a2-d2-d4-c2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI [MASK_2] a [MASK_1] [MASK_0].\n\nMask_0:\n### ###     ####     ## ##    ###  ##  \n ##  ##      ##     ##   ##    ##  ##  \n ##          ##     ####       ##  ##  \n ## ##       ##      #####     ## ###  \n ##          ##         ###    ##  ##  \n ##          ##     ##   ##    ##  ##  \n####        ####     ## ##    ###  ##  \n                                       \n\n\nMask_1:\n### ##    ### ###   #### ##     ##     \n ##  ##    ##  ##   # ## ##      ##    \n ##  ##    ##         ##       ## ##   \n ## ##     ## ##      ##       ##  ##  \n ##  ##    ##         ##       ## ###  \n ##  ##    ##  ##     ##       ##  ##  \n### ##    ### ###    ####     ###  ##  \n                                       \n\n\nMask_2:\n###  ##     ##      ### ##   \n ##  ##      ##      ##  ##  \n ##  ##    ## ##     ##  ##  \n ## ###    ##  ##    ##  ##  \n ##  ##    ## ###    ##  ##  \n ##  ##    ##  ##    ##  ##  \n###  ##   ###  ##   ### ##   \n                             \n"}
{"sentence": "Let's go shopping.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nTGV0J3MgZ28gc2hvcHBpbmcu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nYrg'f tb fubccvat.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\net'sLay ogay oppingshay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nL37'5 g0 5h0pp1ng.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;ry'd hp djp[[omh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2142\u01dd\u0287's \u0183o s\u0265odd\u1d09u\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'teL og .gnippohs\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - lets\n2. labyrinthine - go\n3. quixotic - shopping\n\nSentence:\nephemeral labyrinthine shopping.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-e1-e4-'-d4 b2-e3 d4-c2-e3-a4-a4-d2-d3-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nLet's [MASK_2] [MASK_1].\n\nMask_0:\n####      ### ###   #### ##    ## ##   \n ##        ##  ##   # ## ##   ##   ##  \n ##        ##         ##      ####     \n ##        ## ##      ##       #####   \n ##        ##         ##          ###  \n ##  ##    ##  ##     ##      ##   ##  \n### ###   ### ###    ####      ## ##   \n                                       \n\n\nMask_1:\n ## ##    ###  ##    ## ##    ### ##    ### ##      ####    ###  ##    ## ##   \n##   ##    ##  ##   ##   ##    ##  ##    ##  ##      ##       ## ##   ##   ##  \n####       ##  ##   ##   ##    ##  ##    ##  ##      ##      # ## #   ##       \n #####     ## ###   ##   ##    ##  ##    ##  ##      ##      ## ##    ##  ###  \n    ###    ##  ##   ##   ##    ## ##     ## ##       ##      ##  ##   ##   ##  \n##   ##    ##  ##   ##   ##    ##        ##          ##      ##  ##   ##   ##  \n ## ##    ###  ##    ## ##    ####      ####        ####    ###  ##    ## ##   \n                                                                               \n\n\nMask_2:\n ## ##     ## ##   \n##   ##   ##   ##  \n##        ##   ##  \n##  ###   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n"}
{"sentence": "We see them every week.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2Ugc2VlIHRoZW0gZXZlcnkgd2Vlay4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJr frr gurz rirel jrrx.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neWay eesay emthay everyyay eekway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW3 533 7h3m 3v3ry w33k.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEr drr yjr, rbrtu errl.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u01dd s\u01dd\u01dd \u0287\u0265\u01dd\u026f \u01dd\u028c\u01dd\u0279\u028e \u028d\u01dd\u01dd\u029e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neW ees meht yreve .keew\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - every\n2. mellifluous - we\n3. ephemeral - see\n4. serendipity - week\n5. quixotic - them\n\nSentence:\nmellifluous ephemeral quixotic labyrinthine week.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1 d4-e1-e1 e4-c2-e1-c3 e1-b5-e1-c4-e5 c5-e1-e1-a3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWe [MASK_0] [MASK_1] every [MASK_2].\n\nMask_0:\n ## ##    ### ###   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##        ##      \n #####     ## ##     ## ##   \n    ###    ##        ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ### ###   ### ###  \n                             \n\n\nMask_1:\n#### ##   ###  ##   ### ###   ##   ##  \n# ## ##    ##  ##    ##  ##    ## ##   \n  ##       ##  ##    ##       # ### #  \n  ##       ## ###    ## ##    ## # ##  \n  ##       ##  ##    ##       ##   ##  \n  ##       ##  ##    ##  ##   ##   ##  \n ####     ###  ##   ### ###   ##   ##  \n                                       \n\n\nMask_2:\n##   ##   ### ###   ### ###   ##  ###  \n##   ##    ##  ##    ##  ##   ##  ##   \n##   ##    ##        ##       ## ##    \n## # ##    ## ##     ## ##    ## ##    \n# ### #    ##        ##       ## ###   \n ## ##     ##  ##    ##  ##   ##  ##   \n##   ##   ### ###   ### ###   ##  ###  \n                                       \n"}
{"sentence": "You should never lie.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWW91IHNob3VsZCBuZXZlciBsaWUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLbh fubhyq arire yvr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nouYay ouldshay evernay ielay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY0u 5h0uld n3v3r l13.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUpi djpi;f mrbrt ;or.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144on s\u0265onlp u\u01dd\u028c\u01dd\u0279 l\u1d09\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuoY dluohs reven .eil\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - you\n2. labyrinthine - should\n3. serendipity - never\n4. ephemeral - lie\n\nSentence:\nmellifluous labyrinthine serendipity lie.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e3-a5 d4-c2-e3-a5-b3-d1 d3-e1-b5-e1-c4 b3-d2-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] [MASK_2] lie.\n\nMask_0:\n ## ##    ###  ##    ## ##    ##  ###   ####      ### ##   \n##   ##    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n####       ##  ##   ##   ##   ##   ##    ##        ##  ##  \n #####     ## ###   ##   ##   ##   ##    ##        ##  ##  \n    ###    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##    ###  ##    ## ##     ## ##    ### ###   ### ##   \n                                                           \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n###  ##   ### ###   ### ###   ### ###   ### ##   \n  ## ##    ##  ##    ##  ##    ##  ##    ##  ##  \n # ## #    ##        ##  ##    ##        ##  ##  \n ## ##     ## ##     ##  ##    ## ##     ## ##   \n ##  ##    ##        ### ##    ##        ## ##   \n ##  ##    ##  ##     ###      ##  ##    ##  ##  \n###  ##   ### ###      ##     ### ###   #### ##  \n                                                 \n"}
{"sentence": "You'll get used to it.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWW91J2xsIGdldCB1c2VkIHRvIGl0Lg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLbh'yy trg hfrq gb vg.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nou'llYay etgay usedyay otay ityay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY0u'll g37 u53d 70 17.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUpi';; hry idrf yp oy.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144on'll \u0183\u01dd\u0287 ns\u01ddp \u0287o \u1d09\u0287.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nll'uoY teg desu ot .ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - to\n2. quixotic - used\n3. mellifluous - youll\n4. serendipity - it\n5. labyrinthine - get\n\nSentence:\nmellifluous labyrinthine quixotic ephemeral it.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e3-a5-'-b3-b3 b2-e1-e4 a5-d4-e1-d1 e4-e3 d2-e4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYou'll get [MASK_2] [MASK_0] [MASK_1].\n\nMask_0:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_1:\n  ####    #### ##  \n   ##     # ## ##  \n   ##       ##     \n   ##       ##     \n   ##       ##     \n   ##       ##     \n  ####     ####    \n                   \n\n\nMask_2:\n##  ###    ## ##    ### ###   ### ##   \n##   ##   ##   ##    ##  ##    ##  ##  \n##   ##   ####       ##        ##  ##  \n##   ##    #####     ## ##     ##  ##  \n##   ##       ###    ##        ##  ##  \n##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##    ### ###   ### ##   \n                                       \n"}
{"sentence": "k ASA O sEnY EZGl.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nayBBU0EgTyBzRW5ZIEVaR2wu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nx NFN B fRaL RMTy.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nkay ASAyay Oyay EnYsay EZGlyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk 454 0 53nY 3ZGl.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nl SDS P dRmU RXH;.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e \u2200S\u2200 O s\u018eu\u2144 \u018eZ\u2141l.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nk ASA O YnEs .lGZE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - asa\n2. labyrinthine - ezgl\n3. serendipity - k\n4. quixotic - o\n5. mellifluous - seny\n\nSentence:\nserendipity ephemeral quixotic mellifluous EZGl.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3 a1-d4-a1 e3 d4-e1-d3-e5 e1-z-b2-b3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] ASA [MASK_0] sEnY [MASK_1].\n\nMask_0:\n ## ##   \n##   ##  \n##   ##  \n##   ##  \n##   ##  \n##   ##  \n ## ##   \n         \n\n\nMask_1:\n### ###   ### ##     ## ##    ####     \n ##  ##   ##  ##    ##   ##    ##      \n ##          ##     ##         ##      \n ## ##      ##      ##  ###    ##      \n ##        ##       ##   ##    ##      \n ##  ##   ##  ##    ##   ##    ##  ##  \n### ###   # ####     ## ##    ### ###  \n                                       \n\n\nMask_2:\n##  ###  \n##  ##   \n## ##    \n## ##    \n## ###   \n##  ##   \n##  ###  \n         \n"}
{"sentence": "GHp'Y aa xLBejYWo.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nR0hwJ1kgYWEgeExCZWpZV28u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nTUc'L nn kYOrwLJb.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nGHp'Yay aayay ejYWoxLBay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nGHp'Y 44 xLB3jYW0.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nHJ['U ss c;NrkUEp.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2141Hd'\u2144 \u0250\u0250 x\u2142\u15fa\u01dd\u027e\u2144Mo.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nY'pHG aa .oWYjeBLx\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - ghpy\n2. quixotic - aa\n3. serendipity - xlbejywo\n\nSentence:\nephemeral quixotic xLBejYWo.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-c2-a4-'-e5 a1-a1 d5-b3-b1-e1-e2-e5-c5-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nGHp'Y [MASK_0] [MASK_2].\n\nMask_0:\n  ##        ##     \n   ##        ##    \n ## ##     ## ##   \n ##  ##    ##  ##  \n ## ###    ## ###  \n ##  ##    ##  ##  \n###  ##   ###  ##  \n                   \n\n\nMask_1:\n ## ##    ###  ##   ### ##    ##  ##   \n##   ##    ##  ##    ##  ##   ##  ##   \n##         ##  ##    ##  ##   ##  ##   \n##  ###    ## ###    ##  ##    ## ##   \n##   ##    ##  ##    ## ##      ##     \n##   ##    ##  ##    ##         ##     \n ## ##    ###  ##   ####        ##     \n                                       \n\n\nMask_2:\n##  ##    ####      ### ##    ### ###      ####   ##  ##    ##   ##    ## ##   \n### ##     ##        ##  ##    ##  ##       ##    ##  ##    ##   ##   ##   ##  \n ###       ##        ##  ##    ##           ##    ##  ##    ##   ##   ##   ##  \n  ###      ##        ## ##     ## ##        ##     ## ##    ## # ##   ##   ##  \n   ###     ##        ##  ##    ##       ##  ##      ##      # ### #   ##   ##  \n##  ###    ##  ##    ##  ##    ##  ##   ##  ##      ##       ## ##    ##   ##  \n##   ##   ### ###   ### ##    ### ###    ## #       ##      ##   ##    ## ##   \n                                                                               \n"}
{"sentence": "oS cBV XANC cvIFS hPxb.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nb1MgY0JWIFhBTkMgY3ZJRlMgaFB4Yi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nbF pOI KNAP piVSF uCko.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noSyay cBVay ANCXay IFScvay hPxbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n05 cBV X4NC cv1F5 hPxb.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\npD vNB CSMV vbOGD j[cn.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\noS \u0254\u15fa\u039b X\u2200N\u0186 \u0254\u028cI\u2132S \u0265\u0500xq.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nSo VBc CNAX SFIvc .bxPh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - cbv\n2. quixotic - hpxb\n3. labyrinthine - xanc\n4. ephemeral - cvifs\n5. serendipity - os\n\nSentence:\nserendipity mellifluous labyrinthine ephemeral hPxb.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne3-d4 c1-b1-b5 d5-a1-d3-c1 c1-b5-d2-a2-d4 c2-a4-d5-b1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] [MASK_1] cvIFS hPxb.\n\nMask_0:\n ## ##    ### ##    ### ###  \n##   ##    ##  ##    ##  ##  \n##         ##  ##    ##  ##  \n##         ## ##     ##  ##  \n##         ##  ##    ### ##  \n##   ##    ##  ##     ###    \n ## ##    ### ##       ##    \n                             \n\n\nMask_1:\n##  ##      ##      ###  ##    ## ##   \n### ##       ##       ## ##   ##   ##  \n ###       ## ##     # ## #   ##       \n  ###      ##  ##    ## ##    ##       \n   ###     ## ###    ##  ##   ##       \n##  ###    ##  ##    ##  ##   ##   ##  \n##   ##   ###  ##   ###  ##    ## ##   \n                                       \n\n\nMask_2:\n ## ##     ## ##   \n##   ##   ##   ##  \n##   ##   ####     \n##   ##    #####   \n##   ##       ###  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n"}
{"sentence": "jVf hZbDkJ UvzFj lQc.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nalZmIGhaYkRrSiBVdnpGaiBsUWMu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nwIs uMoQxW HimSw yDp.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\njVfay hZbDkJay UvzFjyay lQcay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\njVf hZbDkJ UvzFj lQc.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nkBg jXnFlK IbxGk ;Wv.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u027e\u039b\u025f \u0265Zq\u15e1\u029e\u017f \u2229\u028cz\u2132\u027e l\u10e2\u0254.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nfVj JkDbZh jFzvU .cQl\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - jvf\n2. ephemeral - hzbdkj\n3. quixotic - uvzfj\n4. labyrinthine - lqc\n\nSentence:\nmellifluous ephemeral quixotic lQc.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-b5-a2 c2-z-b1-d1-a3-e2 a5-b5-z-a2-e2 b3-b4-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] [MASK_0] lQc.\n\nMask_0:\n##  ###   ### ###   ### ##    ### ###      ####  \n##   ##    ##  ##   ##  ##     ##  ##       ##   \n##   ##    ##  ##      ##      ##           ##   \n##   ##    ##  ##     ##       ## ##        ##   \n##   ##    ### ##    ##        ##       ##  ##   \n##   ##     ###     ##  ##     ##       ##  ##   \n ## ##       ##     # ####    ####       ## #    \n                                                 \n\n\nMask_1:\n   ####   ### ###   ### ###  \n    ##     ##  ##    ##  ##  \n    ##     ##  ##    ##      \n    ##     ##  ##    ## ##   \n##  ##     ### ##    ##      \n##  ##      ###      ##      \n ## #        ##     ####     \n                             \n\n\nMask_2:\n###  ##   ### ##    ### ##    ### ##    ##  ###      ####  \n ##  ##   ##  ##     ##  ##    ##  ##   ##  ##        ##   \n ##  ##      ##      ##  ##    ##  ##   ## ##         ##   \n ## ###     ##       ## ##     ##  ##   ## ##         ##   \n ##  ##    ##        ##  ##    ##  ##   ## ###    ##  ##   \n ##  ##   ##  ##     ##  ##    ##  ##   ##  ##    ##  ##   \n###  ##   # ####    ### ##    ### ##    ##  ###    ## #    \n                                                           \n"}
{"sentence": "Epe'Xm nRZ QWWL Ue hJ.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRXBlJ1htIG5SWiBRV1dMIFVlIGhKLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nRcr'Kz aEM DJJY Hr uW.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nEpe'Xmyay nRZay QWWLay Ueyay hJay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3p3'Xm nRZ QWWL U3 hJ.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nR[r'C, mTX WEE; Ir jK.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u018ed\u01dd'X\u026f u\u1d1aZ \u10e2MM\u2142 \u2229\u01dd \u0265\u017f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nmX'epE ZRn LWWQ eU .Jh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - nrz\n2. labyrinthine - epexm\n3. ephemeral - hj\n4. serendipity - ue\n5. quixotic - qwwl\n\nSentence:\nlabyrinthine mellifluous quixotic serendipity hJ.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-a4-e1-'-d5-c3 d3-c4-z b4-c5-c5-b3 a5-e1 c2-e2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nEpe'Xm nRZ [MASK_0] [MASK_1] hJ.\n\nMask_0:\n ## ##    ##   ##   ##   ##   ####     \n##   ##   ##   ##   ##   ##    ##      \n##   ##   ##   ##   ##   ##    ##      \n##   ##   ## # ##   ## # ##    ##      \n##   ##   # ### #   # ### #    ##      \n##  ##     ## ##     ## ##     ##  ##  \n ##  ##   ##   ##   ##   ##   ### ###  \n                                       \n\n\nMask_1:\n##  ###   ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n##   ##    ## ##   \n##   ##    ##      \n##   ##    ##  ##  \n ## ##    ### ###  \n                   \n\n\nMask_2:\n### ###   ### ##    ### ###   ##  ##    ##   ##  \n ##  ##    ##  ##    ##  ##   ### ##     ## ##   \n ##        ##  ##    ##        ###      # ### #  \n ## ##     ##  ##    ## ##      ###     ## # ##  \n ##        ## ##     ##          ###    ##   ##  \n ##  ##    ##        ##  ##   ##  ###   ##   ##  \n### ###   ####      ### ###   ##   ##   ##   ##  \n                                                 \n"}
{"sentence": "I am going to return this sweater because it's too big.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBhbSBnb2luZyB0byByZXR1cm4gdGhpcyBzd2VhdGVyIGJlY2F1c2UgaXQncyB0b28gYmlnLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV nz tbvat gb erghea guvf fjrngre orpnhfr vg'f gbb ovt.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay amyay oinggay otay eturnray isthay eatersway ecausebay it'syay ootay igbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 4m g01ng 70 r37urn 7h15 5w3473r b3c4u53 17'5 700 b1g.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO s, hpomh yp tryitm yjod dersyrt nrvsidr oy'd ypp noh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0250\u026f \u0183o\u1d09u\u0183 \u0287o \u0279\u01dd\u0287n\u0279u \u0287\u0265\u1d09s s\u028d\u01dd\u0250\u0287\u01dd\u0279 q\u01dd\u0254\u0250ns\u01dd \u1d09\u0287's \u0287oo q\u1d09\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI ma gniog ot nruter siht retaews esuaceb s'ti oot .gib\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - going\n2. labyrinthine - am\n3. quixotic - too\n4. ephemeral - return\n5. serendipity - its\n\nSentence:\nI labyrinthine mellifluous to ephemeral this sweater because serendipity quixotic big.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 a1-c3 b2-e3-d2-d3-b2 e4-e3 c4-e1-e4-a5-c4-d3 e4-c2-d2-d4 d4-c5-e1-a1-e4-e1-c4 b1-e1-c1-a1-a5-d4-e1 d2-e4-'-d4 e4-e3-e3 b1-d2-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI am [MASK_1] to return this sweater because it's [MASK_0] [MASK_2].\n\nMask_0:\n#### ##    ## ##     ## ##   \n# ## ##   ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n ####      ## ##     ## ##   \n                             \n\n\nMask_1:\n ## ##     ## ##      ####    ###  ##    ## ##   \n##   ##   ##   ##      ##       ## ##   ##   ##  \n##        ##   ##      ##      # ## #   ##       \n##  ###   ##   ##      ##      ## ##    ##  ###  \n##   ##   ##   ##      ##      ##  ##   ##   ##  \n##   ##   ##   ##      ##      ##  ##   ##   ##  \n ## ##     ## ##      ####    ###  ##    ## ##   \n                                                 \n\n\nMask_2:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n"}
{"sentence": "It's intriguing that you are so smart at only 8 years old.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXQncyBpbnRyaWd1aW5nIHRoYXQgeW91IGFyZSBzbyBzbWFydCBhdCBvbmx5IDggeWVhcnMgb2xkLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVg'f vagevthvat gung lbh ner fb fzneg ng bayl 8 lrnef byq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIt'syay intriguingyay atthay ouyay areyay osay artsmay atyay onlyyay 8ay earsyay oldyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n17'5 1n7r1gu1ng 7h47 y0u 4r3 50 5m4r7 47 0nly 8 y34r5 0ld.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOy'd omytohiomh yjsy upi str dp d,sty sy pm;u 8 urstd p;f.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u0287's \u1d09u\u0287\u0279\u1d09\u0183n\u1d09u\u0183 \u0287\u0265\u0250\u0287 \u028eon \u0250\u0279\u01dd so s\u026f\u0250\u0279\u0287 \u0250\u0287 oul\u028e 8 \u028e\u01dd\u0250\u0279s olp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tI gniugirtni taht uoy era os trams ta ylno 8 sraey .dlo\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - that\n2. serendipity - smart\n3. ephemeral - you\n4. quixotic - only\n5. mellifluous - its\n\nSentence:\nmellifluous intriguing labyrinthine ephemeral are so serendipity at quixotic 8 years old.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-e4-'-d4 d2-d3-e4-c4-d2-b2-a5-d2-d3-b2 e4-c2-a1-e4 e5-e3-a5 a1-c4-e1 d4-e3 d4-c3-a1-c4-e4 a1-e4 e3-d3-b3-e5 8 e5-e1-a1-c4-d4 e3-b3-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIt's [MASK_0] that you are so [MASK_1] at only [MASK_2] years old.\n\nMask_0:\n  ####    ###  ##   #### ##   ### ##      ####     ## ##    ##  ###     ####    ###  ##    ## ##   \n   ##       ## ##   # ## ##    ##  ##      ##     ##   ##   ##   ##      ##       ## ##   ##   ##  \n   ##      # ## #     ##       ##  ##      ##     ##        ##   ##      ##      # ## #   ##       \n   ##      ## ##      ##       ## ##       ##     ##  ###   ##   ##      ##      ## ##    ##  ###  \n   ##      ##  ##     ##       ## ##       ##     ##   ##   ##   ##      ##      ##  ##   ##   ##  \n   ##      ##  ##     ##       ##  ##      ##     ##   ##   ##   ##      ##      ##  ##   ##   ##  \n  ####    ###  ##    ####     #### ##     ####     ## ##     ## ##      ####    ###  ##    ## ##   \n                                                                                                   \n\n\nMask_1:\n ## ##    ##   ##     ##      ### ##    #### ##  \n##   ##    ## ##       ##      ##  ##   # ## ##  \n####      # ### #    ## ##     ##  ##     ##     \n #####    ## # ##    ##  ##    ## ##      ##     \n    ###   ##   ##    ## ###    ## ##      ##     \n##   ##   ##   ##    ##  ##    ##  ##     ##     \n ## ##    ##   ##   ###  ##   #### ##    ####    \n                                                 \n\n\nMask_2:\n ## ##   \n##   ##  \n##   ##  \n ## ##   \n##   ##  \n #   ##  \n ## ##   \n         \n"}
{"sentence": "The tape got stuck on my lips so I couldn't talk anymore.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIHRhcGUgZ290IHN0dWNrIG9uIG15IGxpcHMgc28gSSBjb3VsZG4ndCB0YWxrIGFueW1vcmUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur gncr tbg fghpx ba zl yvcf fb V pbhyqa'g gnyx nalzber.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay apetay otgay uckstay onyay myay ipslay osay Iyay ouldn'tcay alktay anymoreyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 74p3 g07 57uck 0n my l1p5 50 1 c0uldn'7 74lk 4nym0r3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr ys[r hpy dyivl pm ,u ;o[d dp O vpi;fm'y ys;l smu,ptr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd \u0287\u0250d\u01dd \u0183o\u0287 s\u0287n\u0254\u029e ou \u026f\u028e l\u1d09ds so I \u0254onlpu'\u0287 \u0287\u0250l\u029e \u0250u\u028e\u026fo\u0279\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT epat tog kcuts no ym spil os I t'ndluoc klat .eromyna\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - got\n2. ephemeral - stuck\n3. serendipity - on\n4. labyrinthine - my\n5. mellifluous - the\n\nSentence:\nmellifluous tape quixotic ephemeral serendipity labyrinthine lips so I couldn't talk anymore.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 e4-a1-a4-e1 b2-e3-e4 d4-e4-a5-c1-a3 e3-d3 c3-e5 b3-d2-a4-d4 d4-e3 d2 c1-e3-a5-b3-d1-d3-'-e4 e4-a1-b3-a3 a1-d3-e5-c3-e3-c4-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThe tape got stuck on my lips [MASK_2] [MASK_0] couldn't talk [MASK_1].\n\nMask_0:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n\n\nMask_1:\n  ##      ###  ##   ##  ##    ##   ##    ## ##    ### ##    ### ###  \n   ##       ## ##   ##  ##     ## ##    ##   ##    ##  ##    ##  ##  \n ## ##     # ## #   ##  ##    # ### #   ##   ##    ##  ##    ##      \n ##  ##    ## ##     ## ##    ## # ##   ##   ##    ## ##     ## ##   \n ## ###    ##  ##     ##      ##   ##   ##   ##    ## ##     ##      \n ##  ##    ##  ##     ##      ##   ##   ##   ##    ##  ##    ##  ##  \n###  ##   ###  ##     ##      ##   ##    ## ##    #### ##   ### ###  \n                                                                     \n\n\nMask_2:\n ## ##     ## ##   \n##   ##   ##   ##  \n####      ##   ##  \n #####    ##   ##  \n    ###   ##   ##  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n"}
{"sentence": "The pool was green and covered in gross-looking algae.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIHBvb2wgd2FzIGdyZWVuIGFuZCBjb3ZlcmVkIGluIGdyb3NzLWxvb2tpbmcgYWxnYWUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur cbby jnf terra naq pbirerq va tebff-ybbxvat nytnr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay oolpay asway eengray andyay overedcay inyay oss-lookinggray algaeyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 p00l w45 gr33n 4nd c0v3r3d 1n gr055-l00k1ng 4lg43.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr [pp; esd htrrm smf vpbrtrf om htpdd-;pplomh s;hsr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd dool \u028d\u0250s \u0183\u0279\u01dd\u01ddu \u0250up \u0254o\u028c\u01dd\u0279\u01ddp \u1d09u \u0183\u0279oss-loo\u029e\u1d09u\u0183 \u0250l\u0183\u0250\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT loop saw neerg dna derevoc ni gnikool-ssorg .eagla\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - pool\n2. mellifluous - the\n3. quixotic - and\n4. serendipity - in\n5. ephemeral - was\n\nSentence:\nmellifluous labyrinthine ephemeral green quixotic covered serendipity gross-looking algae.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 a4-e3-e3-b3 c5-a1-d4 b2-c4-e1-e1-d3 a1-d3-d1 c1-e3-b5-e1-c4-e1-d1 d2-d3 b2-c4-e3-d4-d4-b3-e3-e3-a3-d2-d3-b2 a1-b3-b2-a1-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThe pool [MASK_2] [MASK_1] and [MASK_0] in gross-looking algae.\n\nMask_0:\n ## ##     ## ##    ### ###   ### ###   ### ##    ### ###   ### ##   \n##   ##   ##   ##    ##  ##    ##  ##    ##  ##    ##  ##    ##  ##  \n##        ##   ##    ##  ##    ##        ##  ##    ##        ##  ##  \n##        ##   ##    ##  ##    ## ##     ## ##     ## ##     ##  ##  \n##        ##   ##    ### ##    ##        ## ##     ##        ##  ##  \n##   ##   ##   ##     ###      ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##     ## ##       ##     ### ###   #### ##   ### ###   ### ##   \n                                                                     \n\n\nMask_1:\n ## ##    ### ##    ### ###   ### ###   ###  ##  \n##   ##    ##  ##    ##  ##    ##  ##     ## ##  \n##         ##  ##    ##        ##        # ## #  \n##  ###    ## ##     ## ##     ## ##     ## ##   \n##   ##    ## ##     ##        ##        ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##    #### ##   ### ###   ### ###   ###  ##  \n                                                 \n\n\nMask_2:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n"}
{"sentence": "He needed a new helmet because his got smashed when he was riding his bike.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGUgbmVlZGVkIGEgbmV3IGhlbG1ldCBiZWNhdXNlIGhpcyBnb3Qgc21hc2hlZCB3aGVuIGhlIHdhcyByaWRpbmcgaGlzIGJpa2Uu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUr arrqrq n arj uryzrg orpnhfr uvf tbg fznfurq jura ur jnf evqvat uvf ovxr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neHay eedednay ayay ewnay elmethay ecausebay ishay otgay ashedsmay enwhay ehay asway idingray ishay ikebay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3 n33d3d 4 n3w h3lm37 b3c4u53 h15 g07 5m45h3d wh3n h3 w45 r1d1ng h15 b1k3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJr mrrfrf s mre jr;,ry nrvsidr jod hpy d,sdjrf ejrm jr esd tofomh jod nolr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd u\u01dd\u01ddp\u01ddp \u0250 u\u01dd\u028d \u0265\u01ddl\u026f\u01dd\u0287 q\u01dd\u0254\u0250ns\u01dd \u0265\u1d09s \u0183o\u0287 s\u026f\u0250s\u0265\u01ddp \u028d\u0265\u01ddu \u0265\u01dd \u028d\u0250s \u0279\u1d09p\u1d09u\u0183 \u0265\u1d09s q\u1d09\u029e\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neH dedeen a wen temleh esuaceb sih tog dehsams nehw eh saw gnidir sih .ekib\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - needed\n2. labyrinthine - because\n3. mellifluous - he\n4. quixotic - his\n5. ephemeral - bike\n\nSentence:\nHe serendipity a new helmet labyrinthine quixotic got smashed when mellifluous was riding quixotic bike.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1 d3-e1-e1-d1-e1-d1 a1 d3-e1-c5 c2-e1-b3-c3-e1-e4 b1-e1-c1-a1-a5-d4-e1 c2-d2-d4 b2-e3-e4 d4-c3-a1-d4-c2-e1-d1 c5-c2-e1-d3 c2-e1 c5-a1-d4 c4-d2-d1-d2-d3-b2 c2-d2-d4 b1-d2-a3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHe needed a new helmet because his got smashed when [MASK_0] [MASK_2] riding his [MASK_1].\n\nMask_0:\n###  ##   ### ###  \n ##  ##    ##  ##  \n ##  ##    ##      \n ## ###    ## ##   \n ##  ##    ##      \n ##  ##    ##  ##  \n###  ##   ### ###  \n                   \n\n\nMask_1:\n### ##      ####    ##  ###   ### ###  \n ##  ##      ##     ##  ##     ##  ##  \n ##  ##      ##     ## ##      ##      \n ## ##       ##     ## ##      ## ##   \n ##  ##      ##     ## ###     ##      \n ##  ##      ##     ##  ##     ##  ##  \n### ##      ####    ##  ###   ### ###  \n                                       \n\n\nMask_2:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n"}
{"sentence": "k AS AOsEn YE ZGlGHp Yaax LBejYWo oScBVXA NC'c vIF ShP.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nayBBUyBBT3NFbiBZRSBaR2xHSHAgWWFheCBMQmVqWVdvIG9TY0JWWEEgTkMnYyB2SUYgU2hQLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nx NF NBfRa LR MTyTUc Lnnk YOrwLJb bFpOIKN AP'p iVS FuC.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nkay ASyay AOsEnyay EYay ZGlGHpay aaxYay ejYWoLBay oScBVXAyay NC'cay IFvay ShPay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk 45 4053n Y3 ZGlGHp Y44x LB3jYW0 05cBVX4 NC'c v1F 5hP.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nl SD SPdRm UR XH;HJ[ Ussc ;NrkUEp pDvNBCS MV'v bOG Dj[.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e \u2200S \u2200Os\u018eu \u2144\u018e Z\u2141l\u2141Hd \u2144\u0250\u0250x \u2142\u15fa\u01dd\u027e\u2144Mo oS\u0254\u15fa\u039bX\u2200 N\u0186'\u0254 \u028cI\u2132 S\u0265\u0500.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nk SA nEsOA EY pHGlGZ xaaY oWYjeBL AXVBcSo c'CN FIv .PhS\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - oscbvxa\n2. quixotic - shp\n3. labyrinthine - ncc\n4. mellifluous - lbejywo\n5. ephemeral - ye\n\nSentence:\nk AS AOsEn ephemeral ZGlGHp Yaax mellifluous serendipity labyrinthine vIF ShP.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3 a1-d4 a1-e3-d4-e1-d3 e5-e1 z-b2-b3-b2-c2-a4 e5-a1-a1-d5 b3-b1-e1-e2-e5-c5-e3 e3-d4-c1-b1-b5-d5-a1 d3-c1-'-c1 b5-d2-a2 d4-c2-a4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] AS AOsEn [MASK_1] [MASK_2] Yaax LBejYWo oScBVXA NC'c vIF ShP.\n\nMask_0:\n##  ###  \n##  ##   \n## ##    \n## ##    \n## ###   \n##  ##   \n##  ###  \n         \n\n\nMask_1:\n##  ##    ### ###  \n##  ##     ##  ##  \n##  ##     ##      \n ## ##     ## ##   \n  ##       ##      \n  ##       ##  ##  \n  ##      ### ###  \n                   \n\n\nMask_2:\n### ##     ## ##    ####       ## ##    ###  ##   ### ##   \n##  ##    ##   ##    ##       ##   ##    ##  ##    ##  ##  \n   ##     ##         ##       ##         ##  ##    ##  ##  \n  ##      ##  ###    ##       ##  ###    ## ###    ##  ##  \n ##       ##   ##    ##       ##   ##    ##  ##    ## ##   \n##  ##    ##   ##    ##  ##   ##   ##    ##  ##    ##      \n# ####     ## ##    ### ###    ## ##    ###  ##   ####     \n                                                           \n"}
{"sentence": "xb'j VfhZbDkJUv zFjl QcE peX mn RZQWW LU ehJE 8 Jymvj IAs.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neGInaiBWZmhaYkRrSlV2IHpGamwgUWNFIHBlWCBtbiBSWlFXVyBMVSBlaEpFIDggSnltdmogSUFzLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nko'w IsuMoQxWHi mSwy DpR crK za EMDJJ YH ruWR 8 Wlziw VNf.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxb'jay UvVfhZbDkJay zFjlay EQcay eXpay mnay RZQWWay ULay ehJEyay 8ay Jymvjay IAsyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nxb'j VfhZbDkJUv zFjl Qc3 p3X mn RZQWW LU 3hJ3 8 Jymvj 145.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncn'k BgjXnFlKIb xGk; WvR [rC ,m TXWEE ;I rjKR 8 Ku,bk OSd.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nxq'\u027e \u039b\u025f\u0265Zq\u15e1\u029e\u017f\u2229\u028c z\u2132\u027el \u10e2\u0254\u018e d\u01ddX \u026fu \u1d1aZ\u10e2MM \u2142\u2229 \u01dd\u0265\u017f\u018e 8 \u017f\u028e\u026f\u028c\u027e I\u2200s.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nj'bx vUJkDbZhfV ljFz EcQ Xep nm WWQZR UL EJhe 8 jvmyJ .sAI\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - ias\n2. ephemeral - 8\n3. labyrinthine - rzqww\n4. mellifluous - jymvj\n5. serendipity - lu\n\nSentence:\nxb'j VfhZbDkJUv zFjl QcE peX mn labyrinthine serendipity ehJE ephemeral mellifluous IAs.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-b1-'-e2 b5-a2-c2-z-b1-d1-a3-e2-a5-b5 z-a2-e2-b3 b4-c1-e1 a4-e1-d5 c3-d3 c4-z-b4-c5-c5 b3-a5 e1-c2-e2-e1 8 e2-e5-c3-b5-e2 d2-a1-d4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxb'j [MASK_2] zFjl [MASK_0] peX mn RZQWW LU ehJE 8 [MASK_1] IAs.\n\nMask_0:\n ## ##     ## ##    ### ###  \n##   ##   ##   ##    ##  ##  \n##   ##   ##         ##      \n##   ##   ##         ## ##   \n##   ##   ##         ##      \n##  ##    ##   ##    ##  ##  \n ##  ##    ## ##    ### ###  \n                             \n\n\nMask_1:\n   ####   ##  ##    ##   ##   ### ###      ####  \n    ##    ##  ##     ## ##     ##  ##       ##   \n    ##    ##  ##    # ### #    ##  ##       ##   \n    ##     ## ##    ## # ##    ##  ##       ##   \n##  ##      ##      ##   ##    ### ##   ##  ##   \n##  ##      ##      ##   ##     ###     ##  ##   \n ## #       ##      ##   ##      ##      ## #    \n                                                 \n\n\nMask_2:\n### ###   ### ###   ###  ##   ### ##    ### ##    ### ##    ##  ###      ####   ##  ###   ### ###  \n ##  ##    ##  ##    ##  ##   ##  ##     ##  ##    ##  ##   ##  ##        ##    ##   ##    ##  ##  \n ##  ##    ##        ##  ##      ##      ##  ##    ##  ##   ## ##         ##    ##   ##    ##  ##  \n ##  ##    ## ##     ## ###     ##       ## ##     ##  ##   ## ##         ##    ##   ##    ##  ##  \n ### ##    ##        ##  ##    ##        ##  ##    ##  ##   ## ###    ##  ##    ##   ##    ### ##  \n  ###      ##        ##  ##   ##  ##     ##  ##    ##  ##   ##  ##    ##  ##    ##   ##     ###    \n   ##     ####      ###  ##   # ####    ### ##    ### ##    ##  ###    ## #      ## ##       ##    \n                                                                                                   \n"}
{"sentence": "xCG yuFy rbf kTTFa Fe JM VHoK Mu J NhlQkO'w vwWM tpgkelX.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neENHIHl1RnkgcmJmIGtUVEZhIEZlIEpNIFZIb0sgTXUgSiBOaGxRa08ndyB2d1dNIHRwZ2tlbFgu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nkPT lhSl eos xGGSn Sr WZ IUbX Zh W AuyDxB'j ijJZ gctxryK.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxCGay uFyyay rbfay akTTFay eFay JMay oKVHay uMay Jay O'wNhlQkay vwWMay elXtpgkay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nxCG yuFy rbf k77F4 F3 JM VH0K Mu J NhlQk0'w vwWM 7pgk3lX.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncVH uiGu tng lYYGs Gr K, BJpL ,i K Mj;WlP'e beE, y[hlr;C.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nx\u0186\u2141 \u028en\u2132\u028e \u0279q\u025f \u029e\u22a5\u22a5\u2132\u0250 \u2132\u01dd \u017fW \u039bHo\ua4d8 Wn \u017f N\u0265l\u10e2\u029eO'\u028d \u028c\u028dMW \u0287d\u0183\u029e\u01ddlX.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nGCx yFuy fbr aFTTk eF MJ KoHV uM J w'OkQlhN MWwv .Xlekgpt\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - xcg\n2. quixotic - mu\n3. ephemeral - rbf\n4. mellifluous - vwwm\n5. serendipity - jm\n\nSentence:\nlabyrinthine yuFy ephemeral kTTFa Fe serendipity VHoK quixotic J NhlQkO'w mellifluous tpgkelX.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-c1-b2 e5-a5-a2-e5 c4-b1-a2 a3-e4-e4-a2-a1 a2-e1 e2-c3 b5-c2-e3-a3 c3-a5 e2 d3-c2-b3-b4-a3-e3-'-c5 b5-c5-c5-c3 e4-a4-b2-a3-e1-b3-d5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxCG yuFy rbf kTTFa Fe JM [MASK_2] [MASK_0] J NhlQkO'w vwWM [MASK_1].\n\nMask_0:\n##   ##   ##  ###  \n ## ##    ##   ##  \n# ### #   ##   ##  \n## # ##   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n##   ##    ## ##   \n                   \n\n\nMask_1:\n#### ##   ### ##     ## ##    ##  ###   ### ###   ####      ##  ##   \n# ## ##    ##  ##   ##   ##   ##  ##     ##  ##    ##       ### ##   \n  ##       ##  ##   ##        ## ##      ##        ##        ###     \n  ##       ##  ##   ##  ###   ## ##      ## ##     ##         ###    \n  ##       ## ##    ##   ##   ## ###     ##        ##          ###   \n  ##       ##       ##   ##   ##  ##     ##  ##    ##  ##   ##  ###  \n ####     ####       ## ##    ##  ###   ### ###   ### ###   ##   ##  \n                                                                     \n\n\nMask_2:\n### ###   ###  ##    ## ##    ##  ###  \n ##  ##    ##  ##   ##   ##   ##  ##   \n ##  ##    ##  ##   ##   ##   ## ##    \n ##  ##    ## ###   ##   ##   ## ##    \n ### ##    ##  ##   ##   ##   ## ###   \n  ###      ##  ##   ##   ##   ##  ##   \n   ##     ###  ##    ## ##    ##  ###  \n                                       \n"}
{"sentence": "Bxk RcRH QpA kVLaw FGy QppkJeC ZA XVEds-dqQscAp kzevP.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nQnhrIFJjUkggUXBBIGtWTGF3IEZHeSBRcHBrSmVDIFpBIFhWRWRzLWRxUXNjQXAga3pldlAu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nOkx EpEU DcN xIYnj STl DccxWrP MN KIRqf-qdDfpNc xmriC.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nBxkay RcRHay AQpay awkVLay FGyay eCQppkJay AZay Eds-dqQscApXVay evPkzay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nBxk RcRH Qp4 kVL4w FGy QppkJ3C Z4 XV3d5-dqQ5c4p kz3vP.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nNcl TvTJ W[S lB;se GHu W[[lKrV XS CBRfd-fwWdvS[ lxrb[.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15fax\u029e \u1d1a\u0254\u1d1aH \u10e2d\u2200 \u029e\u039b\u2142\u0250\u028d \u2132\u2141\u028e \u10e2dd\u029e\u017f\u01dd\u0186 Z\u2200 X\u039b\u018eps-pb\u10e2s\u0254\u2200d \u029ez\u01dd\u028c\u0500.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nkxB HRcR ApQ waLVk yGF CeJkppQ AZ pAcsQqd-sdEVX .Pvezk\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - fgy\n2. mellifluous - za\n3. serendipity - xvedsdqqscap\n4. labyrinthine - kzevp\n5. ephemeral - bxk\n\nSentence:\nephemeral RcRH QpA kVLaw quixotic QppkJeC mellifluous serendipity kzevP.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb1-d5-a3 c4-c1-c4-c2 b4-a4-a1 a3-b5-b3-a1-c5 a2-b2-e5 b4-a4-a4-a3-e2-e1-c1 z-a1 d5-b5-e1-d1-d4-d1-b4-b4-d4-c1-a1-a4 a3-z-e1-b5-a4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nBxk [MASK_1] [MASK_0] kVLaw [MASK_2] QppkJeC ZA XVEds-dqQscAp kzevP.\n\nMask_0:\n ## ##    ### ##      ##     \n##   ##    ##  ##      ##    \n##   ##    ##  ##    ## ##   \n##   ##    ##  ##    ##  ##  \n##   ##    ## ##     ## ###  \n##  ##     ##        ##  ##  \n ##  ##   ####      ###  ##  \n                             \n\n\nMask_1:\n### ##     ## ##    ### ##    ###  ##  \n ##  ##   ##   ##    ##  ##    ##  ##  \n ##  ##   ##         ##  ##    ##  ##  \n ## ##    ##         ## ##     ## ###  \n ## ##    ##         ## ##     ##  ##  \n ##  ##   ##   ##    ##  ##    ##  ##  \n#### ##    ## ##    #### ##   ###  ##  \n                                       \n\n\nMask_2:\n### ###    ## ##    ##  ##   \n ##  ##   ##   ##   ##  ##   \n ##       ##        ##  ##   \n ## ##    ##  ###    ## ##   \n ##       ##   ##     ##     \n ##       ##   ##     ##     \n####       ## ##      ##     \n                             \n"}
{"sentence": "jj VUEdqi P HUE bnxYjx MXBFLEt iIL riX UayRiTb qLuP pL AqR zWZiij gzg lbPC.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\namogVlVFZHFpIFAgSFVFIGJueFlqeCBNWEJGTEV0IGlJTCByaVggVWF5UmlUYiBxTHVQIHBMIEFxUiB6V1ppaWogZ3pnIGxiUEMu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nww IHRqdv C UHR oakLwk ZKOSYRg vVY evK HnlEvGo dYhC cY NdE mJMvvw tmt yoCP.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\njjay UEdqiVay Pay UEHay bnxYjxay EtMXBFLay iILyay iXray UayRiTbyay uPqLay pLay AqRyay iijzWZay gzgay lbPCay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\njj VU3dq1 P HU3 bnxYjx MXBFL37 11L r1X U4yR17b qLuP pL 4qR zWZ11j gzg lbPC.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nkk BIRfwo [ JIR nmcUkc ,CNG;Ry oO; toC IsuToYn w;i[ [; SwT xEXook hxh ;n[V.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u027e\u027e \u039b\u2229\u018epb\u1d09 \u0500 H\u2229\u018e qux\u2144\u027ex WX\u15fa\u2132\u2142\u018e\u0287 \u1d09I\u2142 \u0279\u1d09X \u2229\u0250\u028e\u1d1a\u1d09\u22a5q b\u2142n\u0500 d\u2142 \u2200b\u1d1a zMZ\u1d09\u1d09\u027e \u0183z\u0183 lq\u0500\u0186.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njj iqdEUV P EUH xjYxnb tELFBXM LIi Xir bTiRyaU PuLq Lp RqA jiiZWz gzg .CPbl\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - p\n2. labyrinthine - vuedqi\n3. serendipity - uayritb\n4. mellifluous - bnxyjx\n5. quixotic - qlup\n\nSentence:\njj labyrinthine ephemeral HUE mellifluous MXBFLEt iIL riX serendipity quixotic pL AqR zWZiij gzg lbPC.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-e2 b5-a5-e1-d1-b4-d2 a4 c2-a5-e1 b1-d3-d5-e5-e2-d5 c3-d5-b1-a2-b3-e1-e4 d2-d2-b3 c4-d2-d5 a5-a1-e5-c4-d2-e4-b1 b4-b3-a5-a4 a4-b3 a1-b4-c4 z-c5-z-d2-d2-e2 b2-z-b2 b3-b1-a4-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\njj VUEdqi P [MASK_0] bnxYjx [MASK_2] iIL riX UayRiTb qLuP [MASK_1] AqR zWZiij gzg lbPC.\n\nMask_0:\n###  ##   ##  ###   ### ###  \n ##  ##   ##   ##    ##  ##  \n ##  ##   ##   ##    ##      \n ## ###   ##   ##    ## ##   \n ##  ##   ##   ##    ##      \n ##  ##   ##   ##    ##  ##  \n###  ##    ## ##    ### ###  \n                             \n\n\nMask_1:\n### ##    ####     \n ##  ##    ##      \n ##  ##    ##      \n ##  ##    ##      \n ## ##     ##      \n ##        ##  ##  \n####      ### ###  \n                   \n\n\nMask_2:\n##   ##   ##  ##    ### ##    ### ###   ####      ### ###   #### ##  \n ## ##    ### ##     ##  ##    ##  ##    ##        ##  ##   # ## ##  \n# ### #    ###       ##  ##    ##        ##        ##         ##     \n## # ##     ###      ## ##     ## ##     ##        ## ##      ##     \n##   ##      ###     ##  ##    ##        ##        ##         ##     \n##   ##   ##  ###    ##  ##    ##        ##  ##    ##  ##     ##     \n##   ##   ##   ##   ### ##    ####      ### ###   ### ###    ####    \n                                                                     \n"}
{"sentence": "What's your address?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCdzIHlvdXIgYWRkcmVzcz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung'f lbhe nqqerff?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nat'sWhay ouryay addressyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47'5 y0ur 4ddr355?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy'd upit sfftrdd?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287's \u028eon\u0279 \u0250pp\u0279\u01ddss?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tahW ruoy ?sserdda\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - whats\n2. labyrinthine - your\n3. quixotic - address\n\nSentence:\nmellifluous labyrinthine address?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4-'-d4 e5-e3-a5-c4 a1-d1-d1-c4-e1-d4-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat's [MASK_1] [MASK_0]?\n\nMask_0:\n  ##      ### ##    ### ##    ### ##    ### ###    ## ##     ## ##   \n   ##      ##  ##    ##  ##    ##  ##    ##  ##   ##   ##   ##   ##  \n ## ##     ##  ##    ##  ##    ##  ##    ##       ####      ####     \n ##  ##    ##  ##    ##  ##    ## ##     ## ##     #####     #####   \n ## ###    ##  ##    ##  ##    ## ##     ##           ###       ###  \n ##  ##    ##  ##    ##  ##    ##  ##    ##  ##   ##   ##   ##   ##  \n###  ##   ### ##    ### ##    #### ##   ### ###    ## ##     ## ##   \n                                                                     \n\n\nMask_1:\n##  ##     ## ##    ##  ###   ### ##   \n##  ##    ##   ##   ##   ##    ##  ##  \n##  ##    ##   ##   ##   ##    ##  ##  \n ## ##    ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ##  ##  \n  ##       ## ##     ## ##    #### ##  \n                                       \n\n\nMask_2:\n##   ##   ###  ##     ##      #### ##    ## ##   \n##   ##    ##  ##      ##     # ## ##   ##   ##  \n##   ##    ##  ##    ## ##      ##      ####     \n## # ##    ## ###    ##  ##     ##       #####   \n# ### #    ##  ##    ## ###     ##          ###  \n ## ##     ##  ##    ##  ##     ##      ##   ##  \n##   ##   ###  ##   ###  ##    ####      ## ##   \n                                                 \n"}
{"sentence": "Have you got a match?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGF2ZSB5b3UgZ290IGEgbWF0Y2g/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUnir lbh tbg n zngpu?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naveHay ouyay otgay ayay atchmay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH4v3 y0u g07 4 m47ch?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJsbr upi hpy s ,syvj?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u0250\u028c\u01dd \u028eon \u0183o\u0287 \u0250 \u026f\u0250\u0287\u0254\u0265?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nevaH uoy tog a ?hctam\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - a\n2. ephemeral - match\n3. serendipity - you\n4. labyrinthine - have\n5. mellifluous - got\n\nSentence:\nlabyrinthine serendipity mellifluous quixotic match?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-a1-b5-e1 e5-e3-a5 b2-e3-e4 a1 c3-a1-e4-c1-c2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHave [MASK_1] [MASK_2] a [MASK_0]?\n\nMask_0:\n##   ##     ##      #### ##    ## ##    ###  ##  \n ## ##       ##     # ## ##   ##   ##    ##  ##  \n# ### #    ## ##      ##      ##         ##  ##  \n## # ##    ##  ##     ##      ##         ## ###  \n##   ##    ## ###     ##      ##         ##  ##  \n##   ##    ##  ##     ##      ##   ##    ##  ##  \n##   ##   ###  ##    ####      ## ##    ###  ##  \n                                                 \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n ## ##     ## ##    #### ##  \n##   ##   ##   ##   # ## ##  \n##        ##   ##     ##     \n##  ###   ##   ##     ##     \n##   ##   ##   ##     ##     \n##   ##   ##   ##     ##     \n ## ##     ## ##     ####    \n                             \n"}
{"sentence": "Do you like spaghetti?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IGxpa2Ugc3BhZ2hldHRpPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh yvxr fcnturggv?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay ikelay aghettispay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u l1k3 5p4gh3771?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi ;olr d[shjryyo?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon l\u1d09\u029e\u01dd sd\u0250\u0183\u0265\u01dd\u0287\u0287\u1d09?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy ekil ?ittehgaps\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - do\n2. mellifluous - you\n3. ephemeral - like\n4. serendipity - spaghetti\n\nSentence:\nlabyrinthine mellifluous ephemeral spaghetti?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 b3-d2-a3-e1 d4-a4-a1-b2-c2-e1-e4-e4-d2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] [MASK_1] spaghetti?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n####        ####    ##  ###   ### ###  \n ##          ##     ##  ##     ##  ##  \n ##          ##     ## ##      ##      \n ##          ##     ## ##      ## ##   \n ##          ##     ## ###     ##      \n ##  ##      ##     ##  ##     ##  ##  \n### ###     ####    ##  ###   ### ###  \n                                       \n\n\nMask_2:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n"}
{"sentence": "Does she live in Paris?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG9lcyBzaGUgbGl2ZSBpbiBQYXJpcz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQbrf fur yvir va Cnevf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noesDay eshay ivelay inyay arisPay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD035 5h3 l1v3 1n P4r15?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFprd djr ;obr om [stod?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o\u01dds s\u0265\u01dd l\u1d09\u028c\u01dd \u1d09u \u0500\u0250\u0279\u1d09s?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nseoD ehs evil ni ?siraP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - live\n2. quixotic - paris\n3. labyrinthine - she\n4. mellifluous - in\n5. ephemeral - does\n\nSentence:\nephemeral labyrinthine serendipity mellifluous Paris?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3-e1-d4 d4-c2-e1 b3-d2-b5-e1 d2-d3 a4-a1-c4-d2-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDoes [MASK_1] [MASK_0] in [MASK_2]?\n\nMask_0:\n####        ####    ### ###   ### ###  \n ##          ##      ##  ##    ##  ##  \n ##          ##      ##  ##    ##      \n ##          ##      ##  ##    ## ##   \n ##          ##      ### ##    ##      \n ##  ##      ##       ###      ##  ##  \n### ###     ####       ##     ### ###  \n                                       \n\n\nMask_1:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n\n\nMask_2:\n### ##      ##      ### ##      ####     ## ##   \n ##  ##      ##      ##  ##      ##     ##   ##  \n ##  ##    ## ##     ##  ##      ##     ####     \n ##  ##    ##  ##    ## ##       ##      #####   \n ## ##     ## ###    ## ##       ##         ###  \n ##        ##  ##    ##  ##      ##     ##   ##  \n####      ###  ##   #### ##     ####     ## ##   \n                                                 \n"}
{"sentence": "How big a problem is it?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGJpZyBhIHByb2JsZW0gaXMgaXQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj ovt n ceboyrz vf vg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay igbay ayay oblempray isyay ityay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w b1g 4 pr0bl3m 15 17?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe noh s [tpn;r, od oy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d q\u1d09\u0183 \u0250 d\u0279oql\u01dd\u026f \u1d09s \u1d09\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH gib a melborp si ?ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - how\n2. serendipity - is\n3. quixotic - big\n4. mellifluous - problem\n5. ephemeral - it\n\nSentence:\nlabyrinthine quixotic a mellifluous serendipity it?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 b1-d2-b2 a1 a4-c4-e3-b1-b3-e1-c3 d2-d4 d2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHow [MASK_1] a problem [MASK_2] [MASK_0]?\n\nMask_0:\n  ####    #### ##  \n   ##     # ## ##  \n   ##       ##     \n   ##       ##     \n   ##       ##     \n   ##       ##     \n  ####     ####    \n                   \n\n\nMask_1:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n\n\nMask_2:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n"}
{"sentence": "kASA'O sEnY EZGlGHp?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\na0FTQSdPIHNFblkgRVpHbEdIcD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nxNFN'B fRaL RMTyTUc?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nASA'Okay EnYsay EZGlGHpyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk454'0 53nY 3ZGlGHp?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nlSDS'P dRmU RXH;HJ[?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e\u2200S\u2200'O s\u018eu\u2144 \u018eZ\u2141l\u2141Hd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nO'ASAk YnEs ?pHGlGZE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - kasao\n2. serendipity - seny\n3. labyrinthine - ezglghp\n\nSentence:\nquixotic serendipity EZGlGHp?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-a1-d4-a1-'-e3 d4-e1-d3-e5 e1-z-b2-b3-b2-c2-a4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nkASA'O [MASK_0] [MASK_1]?\n\nMask_0:\n ## ##    ### ###   ###  ##   ##  ##   \n##   ##    ##  ##     ## ##   ##  ##   \n####       ##        # ## #   ##  ##   \n #####     ## ##     ## ##     ## ##   \n    ###    ##        ##  ##     ##     \n##   ##    ##  ##    ##  ##     ##     \n ## ##    ### ###   ###  ##     ##     \n                                       \n\n\nMask_1:\n### ###   ### ##     ## ##    ####       ## ##    ###  ##   ### ##   \n ##  ##   ##  ##    ##   ##    ##       ##   ##    ##  ##    ##  ##  \n ##          ##     ##         ##       ##         ##  ##    ##  ##  \n ## ##      ##      ##  ###    ##       ##  ###    ## ###    ##  ##  \n ##        ##       ##   ##    ##       ##   ##    ##  ##    ## ##   \n ##  ##   ##  ##    ##   ##    ##  ##   ##   ##    ##  ##    ##      \n### ###   # ####     ## ##    ### ###    ## ##    ###  ##   ####     \n                                                                     \n\n\nMask_2:\n##  ###     ##       ## ##      ##       ## ##   \n##  ##       ##     ##   ##      ##     ##   ##  \n## ##      ## ##    ####       ## ##    ##   ##  \n## ##      ##  ##    #####     ##  ##   ##   ##  \n## ###     ## ###       ###    ## ###   ##   ##  \n##  ##     ##  ##   ##   ##    ##  ##   ##   ##  \n##  ###   ###  ##    ## ##    ###  ##    ## ##   \n                                                 \n"}
{"sentence": "Yaax LBe jYW o oScBV?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWWFheCBMQmUgallXIG8gb1NjQlY/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLnnk YOr wLJ b bFpOI?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naaxYay eLBay jYWay oyay oScBVyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY44x LB3 jYW 0 05cBV?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUssc ;Nr kUE p pDvNB?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144\u0250\u0250x \u2142\u15fa\u01dd \u027e\u2144M o oS\u0254\u15fa\u039b?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nxaaY eBL WYj o ?VBcSo\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - jyw\n2. quixotic - yaax\n3. serendipity - lbe\n4. labyrinthine - oscbv\n5. mellifluous - o\n\nSentence:\nquixotic serendipity ephemeral mellifluous oScBV?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-a1-a1-d5 b3-b1-e1 e2-e5-c5 e3 e3-d4-c1-b1-b5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_1] [MASK_0] o oScBV?\n\nMask_0:\n   ####   ##  ##    ##   ##  \n    ##    ##  ##    ##   ##  \n    ##    ##  ##    ##   ##  \n    ##     ## ##    ## # ##  \n##  ##      ##      # ### #  \n##  ##      ##       ## ##   \n ## #       ##      ##   ##  \n                             \n\n\nMask_1:\n####      ### ##    ### ###  \n ##        ##  ##    ##  ##  \n ##        ##  ##    ##      \n ##        ## ##     ## ##   \n ##        ##  ##    ##      \n ##  ##    ##  ##    ##  ##  \n### ###   ### ##    ### ###  \n                             \n\n\nMask_2:\n##  ##      ##        ##      ##  ##   \n##  ##       ##        ##     ### ##   \n##  ##     ## ##     ## ##     ###     \n ## ##     ##  ##    ##  ##     ###    \n  ##       ## ###    ## ###      ###   \n  ##       ##  ##    ##  ##   ##  ###  \n  ##      ###  ##   ###  ##   ##   ##  \n                                       \n"}
{"sentence": "XA NCc vIFS hPxbjVfhZ?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWEEgTkNjIHZJRlMgaFB4YmpWZmhaPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nKN APp iVSF uCkowIsuM?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAXay NCcay IFSvay hPxbjVfhZay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nX4 NCc v1F5 hPxbjVfhZ?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nCS MVv bOGD j[cnkBgjX?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nX\u2200 N\u0186\u0254 \u028cI\u2132S \u0265\u0500xq\u027e\u039b\u025f\u0265Z?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nAX cCN SFIv ?ZhfVjbxPh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - xa\n2. serendipity - ncc\n3. quixotic - vifs\n4. labyrinthine - hpxbjvfhz\n\nSentence:\nephemeral serendipity quixotic hPxbjVfhZ?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-a1 d3-c1-c1 b5-d2-a2-d4 c2-a4-d5-b1-e2-b5-a2-c2-z-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] NCc [MASK_2] [MASK_0]?\n\nMask_0:\n###  ##   ### ##    ##  ##    ### ##       ####   ### ###   ### ###   ###  ##   ### ##   \n ##  ##    ##  ##   ### ##     ##  ##       ##     ##  ##    ##  ##    ##  ##   ##  ##   \n ##  ##    ##  ##    ###       ##  ##       ##     ##  ##    ##        ##  ##      ##    \n ## ###    ##  ##     ###      ## ##        ##     ##  ##    ## ##     ## ###     ##     \n ##  ##    ## ##       ###     ##  ##   ##  ##     ### ##    ##        ##  ##    ##      \n ##  ##    ##       ##  ###    ##  ##   ##  ##      ###      ##        ##  ##   ##  ##   \n###  ##   ####      ##   ##   ### ##     ## #        ##     ####      ###  ##   # ####   \n                                                                                         \n\n\nMask_1:\n##  ##      ##     \n### ##       ##    \n ###       ## ##   \n  ###      ##  ##  \n   ###     ## ###  \n##  ###    ##  ##  \n##   ##   ###  ##  \n                   \n\n\nMask_2:\n### ###     ####    ### ###    ## ##   \n ##  ##      ##      ##  ##   ##   ##  \n ##  ##      ##      ##       ####     \n ##  ##      ##      ## ##     #####   \n ### ##      ##      ##           ###  \n  ###        ##      ##       ##   ##  \n   ##       ####    ####       ## ##   \n                                       \n"}
{"sentence": "bDkJ Uvz FjlQ cE peXmn?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nYkRrSiBVdnogRmpsUSBjRSBwZVhtbj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\noQxW Him SwyD pR crKza?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nbDkJay Uvzyay FjlQay Ecay eXmnpay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nbDkJ Uvz FjlQ c3 p3Xmn?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nnFlK Ibx Gk;W vR [rC,m?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nq\u15e1\u029e\u017f \u2229\u028cz \u2132\u027el\u10e2 \u0254\u018e d\u01ddX\u026fu?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nJkDb zvU QljF Ec ?nmXep\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - fjlq\n2. ephemeral - uvz\n3. quixotic - ce\n4. serendipity - pexmn\n5. mellifluous - bdkj\n\nSentence:\nmellifluous ephemeral labyrinthine quixotic peXmn?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb1-d1-a3-e2 a5-b5-z a2-e2-b3-b4 c1-e1 a4-e1-d5-c3-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] FjlQ cE [MASK_2]?\n\nMask_0:\n##  ###   ### ###   ### ##   \n##   ##    ##  ##   ##  ##   \n##   ##    ##  ##      ##    \n##   ##    ##  ##     ##     \n##   ##    ### ##    ##      \n##   ##     ###     ##  ##   \n ## ##       ##     # ####   \n                             \n\n\nMask_1:\n### ##    ### ##    ##  ###      ####  \n ##  ##    ##  ##   ##  ##        ##   \n ##  ##    ##  ##   ## ##         ##   \n ## ##     ##  ##   ## ##         ##   \n ##  ##    ##  ##   ## ###    ##  ##   \n ##  ##    ##  ##   ##  ##    ##  ##   \n### ##    ### ##    ##  ###    ## #    \n                                       \n\n\nMask_2:\n### ##    ### ###   ##  ##    ##   ##   ###  ##  \n ##  ##    ##  ##   ### ##     ## ##      ## ##  \n ##  ##    ##        ###      # ### #    # ## #  \n ##  ##    ## ##      ###     ## # ##    ## ##   \n ## ##     ##          ###    ##   ##    ##  ##  \n ##        ##  ##   ##  ###   ##   ##    ##  ##  \n####      ### ###   ##   ##   ##   ##   ###  ##  \n                                                 \n"}
{"sentence": "RZQ WWL U ehJEJym vj IA?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUlpRIFdXTCBVIGVoSkVKeW0gdmogSUE/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nEMD JJY H ruWRWlz iw VN?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nRZQay WWLay Uyay ehJEJymyay vjay IAyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nRZQ WWL U 3hJ3Jym vj 14?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nTXW EE; I rjKRKu, bk OS?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u1d1aZ\u10e2 MM\u2142 \u2229 \u01dd\u0265\u017f\u018e\u017f\u028e\u026f \u028c\u027e I\u2200?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nQZR LWW U myJEJhe jv ?AI\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - ia\n2. ephemeral - wwl\n3. labyrinthine - rzq\n4. mellifluous - vj\n5. serendipity - u\n\nSentence:\nlabyrinthine ephemeral serendipity ehJEJym mellifluous IA?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc4-z-b4 c5-c5-b3 a5 e1-c2-e2-e1-e2-e5-c3 b5-e2 d2-a1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] U ehJEJym vj [MASK_1]?\n\nMask_0:\n##   ##   ##   ##   ####     \n##   ##   ##   ##    ##      \n##   ##   ##   ##    ##      \n## # ##   ## # ##    ##      \n# ### #   # ### #    ##      \n ## ##     ## ##     ##  ##  \n##   ##   ##   ##   ### ###  \n                             \n\n\nMask_1:\n  ####      ##     \n   ##        ##    \n   ##      ## ##   \n   ##      ##  ##  \n   ##      ## ###  \n   ##      ##  ##  \n  ####    ###  ##  \n                   \n\n\nMask_2:\n### ##    ### ##     ## ##   \n ##  ##   ##  ##    ##   ##  \n ##  ##      ##     ##   ##  \n ## ##      ##      ##   ##  \n ## ##     ##       ##   ##  \n ##  ##   ##  ##    ##  ##   \n#### ##   # ####     ##  ##  \n                             \n"}
{"sentence": "If you could buy anything you wanted, what would you buy?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSWYgeW91IGNvdWxkIGJ1eSBhbnl0aGluZyB5b3Ugd2FudGVkLCB3aGF0IHdvdWxkIHlvdSBidXk/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVs lbh pbhyq ohl nalguvat lbh jnagrq, jung jbhyq lbh ohl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIfyay ouyay ouldcay uybay anythingyay ouyay antedway, atwhay ouldway ouyay uybay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1f y0u c0uld buy 4ny7h1ng y0u w4n73d, wh47 w0uld y0u buy?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOg upi vpi;f niu smuyjomh upi esmyrf, ejsy epi;f upi niu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u025f \u028eon \u0254onlp qn\u028e \u0250u\u028e\u0287\u0265\u1d09u\u0183 \u028eon \u028d\u0250u\u0287\u01ddp, \u028d\u0265\u0250\u0287 \u028donlp \u028eon qn\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nfI uoy dluoc yub gnihtyna uoy ,detnaw tahw dluow uoy ?yub\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - wanted\n2. serendipity - anything\n3. labyrinthine - buy\n4. ephemeral - could\n5. mellifluous - you\n\nSentence:\nIf mellifluous ephemeral buy serendipity mellifluous wanted, what would mellifluous buy?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-a2 e5-e3-a5 c1-e3-a5-b3-d1 b1-a5-e5 a1-d3-e5-e4-c2-d2-d3-b2 e5-e3-a5 c5-a1-d3-e4-e1-d1-, c5-c2-a1-e4 c5-e3-a5-b3-d1 e5-e3-a5 b1-a5-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] you [MASK_2] buy anything you wanted, [MASK_1] would you buy?\n\nMask_0:\n  ####    ### ###  \n   ##      ##  ##  \n   ##      ##      \n   ##      ## ##   \n   ##      ##      \n   ##      ##      \n  ####    ####     \n                   \n\n\nMask_1:\n##   ##   ###  ##     ##      #### ##  \n##   ##    ##  ##      ##     # ## ##  \n##   ##    ##  ##    ## ##      ##     \n## # ##    ## ###    ##  ##     ##     \n# ### #    ##  ##    ## ###     ##     \n ## ##     ##  ##    ##  ##     ##     \n##   ##   ###  ##   ###  ##    ####    \n                                       \n\n\nMask_2:\n ## ##     ## ##    ##  ###   ####      ### ##   \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n##        ##   ##   ##   ##    ##        ##  ##  \n##        ##   ##   ##   ##    ##        ##  ##  \n##        ##   ##   ##   ##    ##        ##  ##  \n##   ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##     ## ##    ### ###   ### ##   \n                                                 \n"}
{"sentence": "Do you consider yourself a liberal or a conservative?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IGNvbnNpZGVyIHlvdXJzZWxmIGEgbGliZXJhbCBvciBhIGNvbnNlcnZhdGl2ZT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh pbafvqre lbhefrys n yvoreny be n pbafreingvir?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay onsidercay ourselfyay ayay iberallay oryay ayay onservativecay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u c0n51d3r y0ur53lf 4 l1b3r4l 0r 4 c0n53rv471v3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi vpmdofrt upitdr;g s ;onrts; pt s vpmdrtbsyobr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon \u0254ous\u1d09p\u01dd\u0279 \u028eon\u0279s\u01ddl\u025f \u0250 l\u1d09q\u01dd\u0279\u0250l o\u0279 \u0250 \u0254ous\u01dd\u0279\u028c\u0250\u0287\u1d09\u028c\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy redisnoc flesruoy a larebil ro a ?evitavresnoc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - you\n2. labyrinthine - conservative\n3. quixotic - liberal\n4. ephemeral - consider\n5. serendipity - a\n\nSentence:\nDo mellifluous ephemeral yourself serendipity quixotic or serendipity conservative?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 c1-e3-d3-d4-d2-d1-e1-c4 e5-e3-a5-c4-d4-e1-b3-a2 a1 b3-d2-b1-e1-c4-a1-b3 e3-c4 a1 c1-e3-d3-d4-e1-c4-b5-a1-e4-d2-b5-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDo [MASK_2] [MASK_0] yourself a liberal or a [MASK_1]?\n\nMask_0:\n ## ##     ## ##    ###  ##    ## ##      ####    ### ##    ### ###   ### ##   \n##   ##   ##   ##     ## ##   ##   ##      ##      ##  ##    ##  ##    ##  ##  \n##        ##   ##    # ## #   ####         ##      ##  ##    ##        ##  ##  \n##        ##   ##    ## ##     #####       ##      ##  ##    ## ##     ## ##   \n##        ##   ##    ##  ##       ###      ##      ##  ##    ##        ## ##   \n##   ##   ##   ##    ##  ##   ##   ##      ##      ##  ##    ##  ##    ##  ##  \n ## ##     ## ##    ###  ##    ## ##      ####    ### ##    ### ###   #### ##  \n                                                                               \n\n\nMask_1:\n ## ##     ## ##    ###  ##    ## ##    ### ###   ### ##    ### ###     ##      #### ##     ####    ### ###   ### ###  \n##   ##   ##   ##     ## ##   ##   ##    ##  ##    ##  ##    ##  ##      ##     # ## ##      ##      ##  ##    ##  ##  \n##        ##   ##    # ## #   ####       ##        ##  ##    ##  ##    ## ##      ##         ##      ##  ##    ##      \n##        ##   ##    ## ##     #####     ## ##     ## ##     ##  ##    ##  ##     ##         ##      ##  ##    ## ##   \n##        ##   ##    ##  ##       ###    ##        ## ##     ### ##    ## ###     ##         ##      ### ##    ##      \n##   ##   ##   ##    ##  ##   ##   ##    ##  ##    ##  ##     ###      ##  ##     ##         ##       ###      ##  ##  \n ## ##     ## ##    ###  ##    ## ##    ### ###   #### ##      ##     ###  ##    ####       ####       ##     ### ###  \n                                                                                                                       \n\n\nMask_2:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n"}
{"sentence": "Did you hear about the new animal discovered in Ecuador?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRGlkIHlvdSBoZWFyIGFib3V0IHRoZSBuZXcgYW5pbWFsIGRpc2NvdmVyZWQgaW4gRWN1YWRvcj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQvq lbh urne nobhg gur arj navzny qvfpbirerq va Rphnqbe?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nidDay ouyay earhay aboutyay ethay ewnay animalyay iscoveredday inyay Ecuadoryay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD1d y0u h34r 4b0u7 7h3 n3w 4n1m4l d15c0v3r3d 1n 3cu4d0r?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFof upi jrst snpiy yjr mre smo,s; fodvpbrtrf om Rvisfpt?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1\u1d09p \u028eon \u0265\u01dd\u0250\u0279 \u0250qon\u0287 \u0287\u0265\u01dd u\u01dd\u028d \u0250u\u1d09\u026f\u0250l p\u1d09s\u0254o\u028c\u01dd\u0279\u01ddp \u1d09u \u018e\u0254n\u0250po\u0279?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ndiD uoy raeh tuoba eht wen lamina derevocsid ni ?rodaucE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - animal\n2. serendipity - about\n3. ephemeral - did\n4. quixotic - the\n5. mellifluous - new\n\nSentence:\nephemeral you hear serendipity quixotic mellifluous labyrinthine discovered in Ecuador?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-d2-d1 e5-e3-a5 c2-e1-a1-c4 a1-b1-e3-a5-e4 e4-c2-e1 d3-e1-c5 a1-d3-d2-c3-a1-b3 d1-d2-d4-c1-e3-b5-e1-c4-e1-d1 d2-d3 e1-c1-a5-a1-d1-e3-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDid [MASK_0] [MASK_2] about the new [MASK_1] discovered in Ecuador?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n  ##      ###  ##     ####    ##   ##     ##      ####     \n   ##       ## ##      ##      ## ##       ##      ##      \n ## ##     # ## #      ##     # ### #    ## ##     ##      \n ##  ##    ## ##       ##     ## # ##    ##  ##    ##      \n ## ###    ##  ##      ##     ##   ##    ## ###    ##      \n ##  ##    ##  ##      ##     ##   ##    ##  ##    ##  ##  \n###  ##   ###  ##     ####    ##   ##   ###  ##   ### ###  \n                                                           \n\n\nMask_2:\n###  ##   ### ###     ##      ### ##   \n ##  ##    ##  ##      ##      ##  ##  \n ##  ##    ##        ## ##     ##  ##  \n ## ###    ## ##     ##  ##    ## ##   \n ##  ##    ##        ## ###    ## ##   \n ##  ##    ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   ###  ##   #### ##  \n                                       \n"}
{"sentence": "Why do you keep asking such obvious questions?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2h5IGRvIHlvdSBrZWVwIGFza2luZyBzdWNoIG9idmlvdXMgcXVlc3Rpb25zPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJul qb lbh xrrc nfxvat fhpu boivbhf dhrfgvbaf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nWhyay oday ouyay eepkay askingyay uchsay obviousyay uestionsqay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWhy d0 y0u k33p 45k1ng 5uch 0bv10u5 qu35710n5?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEju fp upi lrr[ sdlomh divj pnbopid wirdyopmd?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u028e po \u028eon \u029e\u01dd\u01ddd \u0250s\u029e\u1d09u\u0183 sn\u0254\u0265 oq\u028c\u1d09ons bn\u01dds\u0287\u1d09ous?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyhW od uoy peek gniksa hcus suoivbo ?snoitseuq\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - keep\n2. quixotic - you\n3. ephemeral - such\n4. labyrinthine - asking\n5. mellifluous - obvious\n\nSentence:\nWhy do quixotic serendipity labyrinthine ephemeral mellifluous questions?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e5 d1-e3 e5-e3-a5 a3-e1-e1-a4 a1-d4-a3-d2-d3-b2 d4-a5-c1-c2 e3-b1-b5-d2-e3-a5-d4 b4-a5-e1-d4-e4-d2-e3-d3-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhy do you keep [MASK_0] such [MASK_1] [MASK_2]?\n\nMask_0:\n  ##       ## ##    ##  ###     ####    ###  ##    ## ##   \n   ##     ##   ##   ##  ##       ##       ## ##   ##   ##  \n ## ##    ####      ## ##        ##      # ## #   ##       \n ##  ##    #####    ## ##        ##      ## ##    ##  ###  \n ## ###       ###   ## ###       ##      ##  ##   ##   ##  \n ##  ##   ##   ##   ##  ##       ##      ##  ##   ##   ##  \n###  ##    ## ##    ##  ###     ####    ###  ##    ## ##   \n                                                           \n\n\nMask_1:\n ## ##    ### ##    ### ###     ####     ## ##    ##  ###    ## ##   \n##   ##    ##  ##    ##  ##      ##     ##   ##   ##   ##   ##   ##  \n##   ##    ##  ##    ##  ##      ##     ##   ##   ##   ##   ####     \n##   ##    ## ##     ##  ##      ##     ##   ##   ##   ##    #####   \n##   ##    ##  ##    ### ##      ##     ##   ##   ##   ##       ###  \n##   ##    ##  ##     ###        ##     ##   ##   ##   ##   ##   ##  \n ## ##    ### ##       ##       ####     ## ##     ## ##     ## ##   \n                                                                     \n\n\nMask_2:\n ## ##    ##  ###   ### ###    ## ##    #### ##     ####     ## ##    ###  ##    ## ##   \n##   ##   ##   ##    ##  ##   ##   ##   # ## ##      ##     ##   ##     ## ##   ##   ##  \n##   ##   ##   ##    ##       ####        ##         ##     ##   ##    # ## #   ####     \n##   ##   ##   ##    ## ##     #####      ##         ##     ##   ##    ## ##     #####   \n##   ##   ##   ##    ##           ###     ##         ##     ##   ##    ##  ##       ###  \n##  ##    ##   ##    ##  ##   ##   ##     ##         ##     ##   ##    ##  ##   ##   ##  \n ##  ##    ## ##    ### ###    ## ##     ####       ####     ## ##    ###  ##    ## ##   \n                                                                                         \n"}
{"sentence": "Are you seriously going to let him talk about me that way?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSBzZXJpb3VzbHkgZ29pbmcgdG8gbGV0IGhpbSB0YWxrIGFib3V0IG1lIHRoYXQgd2F5Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh frevbhfyl tbvat gb yrg uvz gnyx nobhg zr gung jnl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay eriouslysay oinggay otay etlay imhay alktay aboutyay emay atthay ayway?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u 53r10u5ly g01ng 70 l37 h1m 74lk 4b0u7 m3 7h47 w4y?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi drtopid;u hpomh yp ;ry jo, ys;l snpiy ,r yjsy esu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon s\u01dd\u0279\u1d09onsl\u028e \u0183o\u1d09u\u0183 \u0287o l\u01dd\u0287 \u0265\u1d09\u026f \u0287\u0250l\u029e \u0250qon\u0287 \u026f\u01dd \u0287\u0265\u0250\u0287 \u028d\u0250\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy ylsuoires gniog ot tel mih klat tuoba em taht ?yaw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - about\n2. mellifluous - talk\n3. ephemeral - me\n4. quixotic - you\n5. serendipity - are\n\nSentence:\nserendipity quixotic seriously going to let him mellifluous labyrinthine ephemeral that way?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 d4-e1-c4-d2-e3-a5-d4-b3-e5 b2-e3-d2-d3-b2 e4-e3 b3-e1-e4 c2-d2-c3 e4-a1-b3-a3 a1-b1-e3-a5-e4 c3-e1 e4-c2-a1-e4 c5-a1-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAre you seriously going to let him talk [MASK_2] [MASK_1] that [MASK_0]?\n\nMask_0:\n##   ##     ##      ##  ##   \n##   ##      ##     ##  ##   \n##   ##    ## ##    ##  ##   \n## # ##    ##  ##    ## ##   \n# ### #    ## ###     ##     \n ## ##     ##  ##     ##     \n##   ##   ###  ##     ##     \n                             \n\n\nMask_1:\n##   ##   ### ###  \n ## ##     ##  ##  \n# ### #    ##      \n## # ##    ## ##   \n##   ##    ##      \n##   ##    ##  ##  \n##   ##   ### ###  \n                   \n\n\nMask_2:\n  ##      ### ##     ## ##    ##  ###   #### ##  \n   ##      ##  ##   ##   ##   ##   ##   # ## ##  \n ## ##     ##  ##   ##   ##   ##   ##     ##     \n ##  ##    ## ##    ##   ##   ##   ##     ##     \n ## ###    ##  ##   ##   ##   ##   ##     ##     \n ##  ##    ##  ##   ##   ##   ##   ##     ##     \n###  ##   ### ##     ## ##     ## ##     ####    \n                                                 \n"}
{"sentence": "kA SAO sEnYE ZGl GHpYaaxL Bej YWooSc, BVXA NCcvI FSh Pxb?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\na0EgU0FPIHNFbllFIFpHbCBHSHBZYWF4TCBCZWogWVdvb1NjLCBCVlhBIE5DY3ZJIEZTaCBQeGI/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nxN FNB fRaLR MTy TUcLnnkY Orw LJbbFp, OIKN APpiV SFu Cko?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAkay AOSay EnYEsay ZGlay aaxLGHpYay ejBay ooScYWay, ABVXay INCcvay FShay Pxbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk4 540 53nY3 ZGl GHpY44xL B3j YW005c, BVX4 NCcv1 F5h Pxb?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nlS DSP dRmUR XH; HJ[Ussc; Nrk UEppDv, NBCS MVvbO GDj [cn?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e\u2200 S\u2200O s\u018eu\u2144\u018e Z\u2141l \u2141Hd\u2144\u0250\u0250x\u2142 \u15fa\u01dd\u027e \u2144MooS\u0254, \u15fa\u039bX\u2200 N\u0186\u0254\u028cI \u2132S\u0265 \u0500xq?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nAk OAS EYnEs lGZ LxaaYpHG jeB ,cSooWY AXVB IvcCN hSF ?bxP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - nccvi\n2. serendipity - zgl\n3. quixotic - sao\n4. labyrinthine - bej\n5. ephemeral - pxb\n\nSentence:\nkA quixotic sEnYE serendipity GHpYaaxL labyrinthine YWooSc, BVXA mellifluous FSh Pxb?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-a1 d4-a1-e3 d4-e1-d3-e5-e1 z-b2-b3 b2-c2-a4-e5-a1-a1-d5-b3 b1-e1-e2 e5-c5-e3-e3-d4-c1-, b1-b5-d5-a1 d3-c1-c1-b5-d2 a2-d4-c2 a4-d5-b1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nkA [MASK_0] sEnYE ZGl GHpYaaxL Bej YWooSc, [MASK_2] NCcvI FSh [MASK_1]?\n\nMask_0:\n ## ##      ##       ## ##   \n##   ##      ##     ##   ##  \n####       ## ##    ##   ##  \n #####     ##  ##   ##   ##  \n    ###    ## ###   ##   ##  \n##   ##    ##  ##   ##   ##  \n ## ##    ###  ##    ## ##   \n                             \n\n\nMask_1:\n### ##    ##  ##    ### ##   \n ##  ##   ### ##     ##  ##  \n ##  ##    ###       ##  ##  \n ##  ##     ###      ## ##   \n ## ##       ###     ##  ##  \n ##       ##  ###    ##  ##  \n####      ##   ##   ### ##   \n                             \n\n\nMask_2:\n### ##    ### ###   ##  ##      ##     \n ##  ##    ##  ##   ### ##       ##    \n ##  ##    ##  ##    ###       ## ##   \n ## ##     ##  ##     ###      ##  ##  \n ##  ##    ### ##      ###     ## ###  \n ##  ##     ###     ##  ###    ##  ##  \n### ##       ##     ##   ##   ###  ##  \n                                       \n"}
{"sentence": "jV fhZ bDkJUvzF jlQcEpeX m nRZQWWL Ue h JEJymvjIAsxC?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nalYgZmhaIGJEa0pVdnpGIGpsUWNFcGVYIG0gblJaUVdXTCBVZSBoIEpFSnltdmpJQXN4Qz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nwI suM oQxWHimS wyDpRcrK z aEMDJJY Hr u WRWlziwVNfkP?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\njVay fhZay UvzFbDkJay EpeXjlQcay may nRZQWWLay Ueyay hay EJymvjIAsxCJay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\njV fhZ bDkJUvzF jlQc3p3X m nRZQWWL U3 h J3Jymvj145xC?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nkB gjX nFlKIbxG k;WvR[rC , mTXWEE; Ir j KRKu,bkOSdcV?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u027e\u039b \u025f\u0265Z q\u15e1\u029e\u017f\u2229\u028cz\u2132 \u027el\u10e2\u0254\u018ed\u01ddX \u026f u\u1d1aZ\u10e2MM\u2142 \u2229\u01dd \u0265 \u017f\u018e\u017f\u028e\u026f\u028c\u027eI\u2200sx\u0186?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nVj Zhf FzvUJkDb XepEcQlj m LWWQZRn eU h ?CxsAIjvmyJEJ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - jejymvjiasxc\n2. labyrinthine - jv\n3. quixotic - nrzqwwl\n4. serendipity - ue\n5. mellifluous - jlqcepex\n\nSentence:\nlabyrinthine fhZ bDkJUvzF mellifluous m quixotic serendipity h JEJymvjIAsxC?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-b5 a2-c2-z b1-d1-a3-e2-a5-b5-z-a2 e2-b3-b4-c1-e1-a4-e1-d5 c3 d3-c4-z-b4-c5-c5-b3 a5-e1 c2 e2-e1-e2-e5-c3-b5-e2-d2-a1-d4-d5-c1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] fhZ bDkJUvzF jlQcEpeX m [MASK_2] Ue h [MASK_1]?\n\nMask_0:\n   ####   ### ###  \n    ##     ##  ##  \n    ##     ##  ##  \n    ##     ##  ##  \n##  ##     ### ##  \n##  ##      ###    \n ## #        ##    \n                   \n\n\nMask_1:\n   ####   ### ###      ####   ##  ##    ##   ##   ### ###      ####     ####      ##       ## ##    ##  ##     ## ##   \n    ##     ##  ##       ##    ##  ##     ## ##     ##  ##       ##       ##        ##     ##   ##   ### ##    ##   ##  \n    ##     ##           ##    ##  ##    # ### #    ##  ##       ##       ##      ## ##    ####       ###      ##       \n    ##     ## ##        ##     ## ##    ## # ##    ##  ##       ##       ##      ##  ##    #####      ###     ##       \n##  ##     ##       ##  ##      ##      ##   ##    ### ##   ##  ##       ##      ## ###       ###      ###    ##       \n##  ##     ##  ##   ##  ##      ##      ##   ##     ###     ##  ##       ##      ##  ##   ##   ##   ##  ###   ##   ##  \n ## #     ### ###    ## #       ##      ##   ##      ##      ## #       ####    ###  ##    ## ##    ##   ##    ## ##   \n                                                                                                                       \n\n\nMask_2:\n###  ##   ### ##    ### ##     ## ##    ##   ##   ##   ##   ####     \n  ## ##    ##  ##   ##  ##    ##   ##   ##   ##   ##   ##    ##      \n # ## #    ##  ##      ##     ##   ##   ##   ##   ##   ##    ##      \n ## ##     ## ##      ##      ##   ##   ## # ##   ## # ##    ##      \n ##  ##    ## ##     ##       ##   ##   # ### #   # ### #    ##      \n ##  ##    ##  ##   ##  ##    ##  ##     ## ##     ## ##     ##  ##  \n###  ##   #### ##   # ####     ##  ##   ##   ##   ##   ##   ### ###  \n                                                                     \n"}
{"sentence": "Gyu Fyr bfkT TFaFe JMV HoK MuJNhl QkOwvwWMtp gk elXBxkR?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nR3l1IEZ5ciBiZmtUIFRGYUZlIEpNViBIb0sgTXVKTmhsIFFrT3d2d1dNdHAgZ2sgZWxYQnhrUj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nTlh Sle osxG GSnSr WZI UbX ZhWAuy DxBjijJZgc tx ryKOkxE?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nuGyay Fyray bfkTay aFeTFay JMVay oKHay uJNhlMay OwvwWMtpQkay gkay elXBxkRyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nGyu Fyr bfk7 7F4F3 JMV H0K MuJNhl Qk0wvwWM7p gk 3lXBxkR?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nHui Gut nglY YGsGr K,B JpL ,iKMj; WlPebeE,y[ hl r;CNclT?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2141\u028en \u2132\u028e\u0279 q\u025f\u029e\u22a5 \u22a5\u2132\u0250\u2132\u01dd \u017fW\u039b Ho\ua4d8 Wn\u017fN\u0265l \u10e2\u029eO\u028d\u028c\u028dMW\u0287d \u0183\u029e \u01ddlX\u15fax\u029e\u1d1a?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuyG ryF Tkfb eFaFT VMJ KoH lhNJuM ptMWwvwOkQ kg ?RkxBXle\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - mujnhl\n2. ephemeral - gyu\n3. mellifluous - tfafe\n4. quixotic - bfkt\n5. serendipity - hok\n\nSentence:\nephemeral Fyr quixotic mellifluous JMV serendipity labyrinthine QkOwvwWMtp gk elXBxkR?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-e5-a5 a2-e5-c4 b1-a2-a3-e4 e4-a2-a1-a2-e1 e2-c3-b5 c2-e3-a3 c3-a5-e2-d3-c2-b3 b4-a3-e3-c5-b5-c5-c5-c3-e4-a4 b2-a3 e1-b3-d5-b1-d5-a3-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nGyu Fyr bfkT [MASK_0] JMV HoK [MASK_1] QkOwvwWMtp [MASK_2] elXBxkR?\n\nMask_0:\n#### ##   ### ###     ##      ### ###   ### ###  \n# ## ##    ##  ##      ##      ##  ##    ##  ##  \n  ##       ##        ## ##     ##        ##      \n  ##       ## ##     ##  ##    ## ##     ## ##   \n  ##       ##        ## ###    ##        ##      \n  ##       ##        ##  ##    ##        ##  ##  \n ####     ####      ###  ##   ####      ### ###  \n                                                 \n\n\nMask_1:\n##   ##   ##  ###      ####   ###  ##   ###  ##   ####     \n ## ##    ##   ##       ##      ## ##    ##  ##    ##      \n# ### #   ##   ##       ##     # ## #    ##  ##    ##      \n## # ##   ##   ##       ##     ## ##     ## ###    ##      \n##   ##   ##   ##   ##  ##     ##  ##    ##  ##    ##      \n##   ##   ##   ##   ##  ##     ##  ##    ##  ##    ##  ##  \n##   ##    ## ##     ## #     ###  ##   ###  ##   ### ###  \n                                                           \n\n\nMask_2:\n ## ##    ##  ###  \n##   ##   ##  ##   \n##        ## ##    \n##  ###   ## ##    \n##   ##   ## ###   \n##   ##   ##  ##   \n ## ##    ##  ###  \n                   \n"}
{"sentence": "cRH Qp AkV LawF GyQppk JeCZ AXVEdsd qQscApkze?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nY1JIIFFwIEFrViBMYXdGIEd5UXBwayBKZUNaIEFYVkVkc2QgcVFzY0Fwa3plPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\npEU Dc NxI YnjS TlDccx WrPM NKIRqfq dDfpNcxmr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ncRHay Qpay AkVyay awFLay GyQppkay eCZJay AXVEdsdyay ApkzeqQscay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\ncRH Qp 4kV L4wF GyQppk J3CZ 4XV3d5d qQ5c4pkz3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nvTJ W[ SlB ;seG HuW[[l KrVX SCBRfdf wWdvS[lxr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0254\u1d1aH \u10e2d \u2200\u029e\u039b \u2142\u0250\u028d\u2132 \u2141\u028e\u10e2dd\u029e \u017f\u01dd\u0186Z \u2200X\u039b\u018epsp b\u10e2s\u0254\u2200d\u029ez\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nHRc pQ VkA FwaL kppQyG ZCeJ dsdEVXA ?ezkpAcsQq\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - jecz\n2. quixotic - lawf\n3. labyrinthine - qp\n4. mellifluous - crh\n5. serendipity - gyqppk\n\nSentence:\nmellifluous labyrinthine AkV quixotic serendipity ephemeral AXVEdsd qQscApkze?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc1-c4-c2 b4-a4 a1-a3-b5 b3-a1-c5-a2 b2-e5-b4-a4-a4-a3 e2-e1-c1-z a1-d5-b5-e1-d1-d4-d1 b4-b4-d4-c1-a1-a4-a3-z-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\ncRH Qp AkV LawF GyQppk [MASK_1] [MASK_2] [MASK_0]?\n\nMask_0:\n ## ##     ## ##     ## ##     ## ##      ##      ### ##    ##  ###   ### ##    ### ###  \n##   ##   ##   ##   ##   ##   ##   ##      ##      ##  ##   ##  ##    ##  ##     ##  ##  \n##   ##   ##   ##   ####      ##         ## ##     ##  ##   ## ##        ##      ##      \n##   ##   ##   ##    #####    ##         ##  ##    ##  ##   ## ##       ##       ## ##   \n##   ##   ##   ##       ###   ##         ## ###    ## ##    ## ###     ##        ##      \n##  ##    ##  ##    ##   ##   ##   ##    ##  ##    ##       ##  ##    ##  ##     ##  ##  \n ##  ##    ##  ##    ## ##     ## ##    ###  ##   ####      ##  ###   # ####    ### ###  \n                                                                                         \n\n\nMask_1:\n   ####   ### ###    ## ##    ### ##   \n    ##     ##  ##   ##   ##   ##  ##   \n    ##     ##       ##           ##    \n    ##     ## ##    ##          ##     \n##  ##     ##       ##         ##      \n##  ##     ##  ##   ##   ##   ##  ##   \n ## #     ### ###    ## ##    # ####   \n                                       \n\n\nMask_2:\n  ##      ##  ##    ### ###   ### ###   ### ##     ## ##    ### ##   \n   ##     ### ##     ##  ##    ##  ##    ##  ##   ##   ##    ##  ##  \n ## ##     ###       ##  ##    ##        ##  ##   ####       ##  ##  \n ##  ##     ###      ##  ##    ## ##     ##  ##    #####     ##  ##  \n ## ###      ###     ### ##    ##        ##  ##       ###    ##  ##  \n ##  ##   ##  ###     ###      ##  ##    ##  ##   ##   ##    ##  ##  \n###  ##   ##   ##      ##     ### ###   ### ##     ## ##    ### ##   \n                                                                     \n"}
{"sentence": "vPj jVU EdqiPHUEb nxYjx MX BFL Eti ILri XUayR iT bqLu PpL?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndlBqIGpWVSBFZHFpUEhVRWIgbnhZanggTVggQkZMIEV0aSBJTHJpIFhVYXlSIGlUIGJxTHUgUHBMPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\niCw wIH RqdvCUHRo akLwk ZK OSY Rgv VYev KHnlE vG odYh CcY?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nvPjay UjVay EdqiPHUEbyay nxYjxay MXay BFLay Etiyay ILriyay UayRXay iTyay ubqLay PpLay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nvPj jVU 3dq1PHU3b nxYjx MX BFL 371 1Lr1 XU4yR 17 bqLu PpL?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nb[k kBI Rfwo[JIRn mcUkc ,C NG; Ryo O;to CIsuT oY nw;i [[;?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u028c\u0500\u027e \u027e\u039b\u2229 \u018epb\u1d09\u0500H\u2229\u018eq ux\u2144\u027ex WX \u15fa\u2132\u2142 \u018e\u0287\u1d09 I\u2142\u0279\u1d09 X\u2229\u0250\u028e\u1d1a \u1d09\u22a5 qb\u2142n \u0500d\u2142?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njPv UVj bEUHPiqdE xjYxn XM LFB itE irLI RyaUX Ti uLqb ?LpP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - it\n2. labyrinthine - bqlu\n3. quixotic - ppl\n4. mellifluous - mx\n5. serendipity - nxyjx\n\nSentence:\nvPj jVU EdqiPHUEb serendipity mellifluous BFL Eti ILri XUayR ephemeral labyrinthine PpL?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-a4-e2 e2-b5-a5 e1-d1-b4-d2-a4-c2-a5-e1-b1 d3-d5-e5-e2-d5 c3-d5 b1-a2-b3 e1-e4-d2 d2-b3-c4-d2 d5-a5-a1-e5-c4 d2-e4 b1-b4-b3-a5 a4-a4-b3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] jVU [MASK_2] nxYjx MX BFL Eti ILri [MASK_0] iT bqLu PpL?\n\nMask_0:\n##  ##    ##  ###     ##      ##  ##    ### ##   \n### ##    ##   ##      ##     ##  ##     ##  ##  \n ###      ##   ##    ## ##    ##  ##     ##  ##  \n  ###     ##   ##    ##  ##    ## ##     ## ##   \n   ###    ##   ##    ## ###     ##       ## ##   \n##  ###   ##   ##    ##  ##     ##       ##  ##  \n##   ##    ## ##    ###  ##     ##      #### ##  \n                                                 \n\n\nMask_1:\n### ###   ### ##       ####  \n ##  ##    ##  ##       ##   \n ##  ##    ##  ##       ##   \n ##  ##    ##  ##       ##   \n ### ##    ## ##    ##  ##   \n  ###      ##       ##  ##   \n   ##     ####       ## #    \n                             \n\n\nMask_2:\n### ###   ### ##     ## ##      ####    ### ##    ###  ##   ##  ###   ### ###   ### ##   \n ##  ##    ##  ##   ##   ##      ##      ##  ##    ##  ##   ##   ##    ##  ##    ##  ##  \n ##        ##  ##   ##   ##      ##      ##  ##    ##  ##   ##   ##    ##        ##  ##  \n ## ##     ##  ##   ##   ##      ##      ##  ##    ## ###   ##   ##    ## ##     ## ##   \n ##        ##  ##   ##   ##      ##      ## ##     ##  ##   ##   ##    ##        ##  ##  \n ##  ##    ##  ##   ##  ##       ##      ##        ##  ##   ##   ##    ##  ##    ##  ##  \n### ###   ### ##     ##  ##     ####    ####      ###  ##    ## ##    ### ###   ### ##   \n                                                                                         \n"}
