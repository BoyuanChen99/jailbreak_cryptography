{"sentence": "I had a beta fish.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBoYWQgYSBiZXRhIGZpc2gu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV unq n orgn svfu.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay adhay ayay etabay ishfay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 h4d 4 b374 f15h.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO jsf s nrys godj.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0265\u0250p \u0250 q\u01dd\u0287\u0250 \u025f\u1d09s\u0265.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI dah a ateb .hsif\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - had\n2. quixotic - i\n3. labyrinthine - a\n4. serendipity - fish\n5. mellifluous - beta\n\nSentence:\nquixotic ephemeral labyrinthine mellifluous fish.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 c2-a1-d1 a1 b1-e1-e4-a1 a2-d2-d4-c2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_1] [MASK_2] beta fish.\n\nMask_0:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n\n\nMask_1:\n###  ##     ##      ### ##   \n ##  ##      ##      ##  ##  \n ##  ##    ## ##     ##  ##  \n ## ###    ##  ##    ##  ##  \n ##  ##    ## ###    ##  ##  \n ##  ##    ##  ##    ##  ##  \n###  ##   ###  ##   ### ##   \n                             \n\n\nMask_2:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n"}
{"sentence": "Let's go shopping.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nTGV0J3MgZ28gc2hvcHBpbmcu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nYrg'f tb fubccvat.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\net'sLay ogay oppingshay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nL37'5 g0 5h0pp1ng.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;ry'd hp djp[[omh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2142\u01dd\u0287's \u0183o s\u0265odd\u1d09u\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'teL og .gnippohs\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - lets\n2. serendipity - go\n3. quixotic - shopping\n\nSentence:\nlabyrinthine serendipity shopping.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-e1-e4-'-d4 b2-e3 d4-c2-e3-a4-a4-d2-d3-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nLet's [MASK_0] shopping.\n\nMask_0:\n ## ##     ## ##   \n##   ##   ##   ##  \n##        ##   ##  \n##  ###   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n"}
{"sentence": "We see them every week.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2Ugc2VlIHRoZW0gZXZlcnkgd2Vlay4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJr frr gurz rirel jrrx.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neWay eesay emthay everyyay eekway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW3 533 7h3m 3v3ry w33k.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEr drr yjr, rbrtu errl.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u01dd s\u01dd\u01dd \u0287\u0265\u01dd\u026f \u01dd\u028c\u01dd\u0279\u028e \u028d\u01dd\u01dd\u029e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neW ees meht yreve .keew\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - see\n2. quixotic - every\n3. labyrinthine - them\n4. ephemeral - week\n5. serendipity - we\n\nSentence:\nserendipity mellifluous labyrinthine quixotic week.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1 d4-e1-e1 e4-c2-e1-c3 e1-b5-e1-c4-e5 c5-e1-e1-a3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_1] them [MASK_0] week.\n\nMask_0:\n### ###   ### ###   ### ###   ### ##    ##  ##   \n ##  ##    ##  ##    ##  ##    ##  ##   ##  ##   \n ##        ##  ##    ##        ##  ##   ##  ##   \n ## ##     ##  ##    ## ##     ## ##     ## ##   \n ##        ### ##    ##        ## ##      ##     \n ##  ##     ###      ##  ##    ##  ##     ##     \n### ###      ##     ### ###   #### ##     ##     \n                                                 \n\n\nMask_1:\n ## ##    ### ###   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##        ##      \n #####     ## ##     ## ##   \n    ###    ##        ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ### ###   ### ###  \n                             \n\n\nMask_2:\n##   ##   ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n## # ##    ## ##   \n# ### #    ##      \n ## ##     ##  ##  \n##   ##   ### ###  \n                   \n"}
{"sentence": "You should never lie.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWW91IHNob3VsZCBuZXZlciBsaWUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLbh fubhyq arire yvr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nouYay ouldshay evernay ielay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY0u 5h0uld n3v3r l13.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUpi djpi;f mrbrt ;or.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144on s\u0265onlp u\u01dd\u028c\u01dd\u0279 l\u1d09\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuoY dluohs reven .eil\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - you\n2. ephemeral - should\n3. serendipity - never\n4. mellifluous - lie\n\nSentence:\nlabyrinthine ephemeral serendipity lie.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e3-a5 d4-c2-e3-a5-b3-d1 d3-e1-b5-e1-c4 b3-d2-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYou [MASK_1] [MASK_0] [MASK_2].\n\nMask_0:\n###  ##   ### ###   ### ###   ### ###   ### ##   \n  ## ##    ##  ##    ##  ##    ##  ##    ##  ##  \n # ## #    ##        ##  ##    ##        ##  ##  \n ## ##     ## ##     ##  ##    ## ##     ## ##   \n ##  ##    ##        ### ##    ##        ## ##   \n ##  ##    ##  ##     ###      ##  ##    ##  ##  \n###  ##   ### ###      ##     ### ###   #### ##  \n                                                 \n\n\nMask_1:\n ## ##    ###  ##    ## ##    ##  ###   ####      ### ##   \n##   ##    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n####       ##  ##   ##   ##   ##   ##    ##        ##  ##  \n #####     ## ###   ##   ##   ##   ##    ##        ##  ##  \n    ###    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##    ###  ##    ## ##     ## ##    ### ###   ### ##   \n                                                           \n\n\nMask_2:\n####        ####    ### ###  \n ##          ##      ##  ##  \n ##          ##      ##      \n ##          ##      ## ##   \n ##          ##      ##      \n ##  ##      ##      ##  ##  \n### ###     ####    ### ###  \n                             \n"}
{"sentence": "You'll get used to it.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWW91J2xsIGdldCB1c2VkIHRvIGl0Lg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLbh'yy trg hfrq gb vg.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nou'llYay etgay usedyay otay ityay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY0u'll g37 u53d 70 17.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUpi';; hry idrf yp oy.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144on'll \u0183\u01dd\u0287 ns\u01ddp \u0287o \u1d09\u0287.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nll'uoY teg desu ot .ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - youll\n2. mellifluous - get\n3. ephemeral - to\n4. serendipity - it\n5. quixotic - used\n\nSentence:\nlabyrinthine mellifluous quixotic ephemeral it.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e3-a5-'-b3-b3 b2-e1-e4 a5-d4-e1-d1 e4-e3 d2-e4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYou'll get [MASK_2] [MASK_0] it.\n\nMask_0:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_1:\n##  ##     ## ##    ##  ###   ####      ####     \n##  ##    ##   ##   ##   ##    ##        ##      \n##  ##    ##   ##   ##   ##    ##        ##      \n ## ##    ##   ##   ##   ##    ##        ##      \n  ##      ##   ##   ##   ##    ##        ##      \n  ##      ##   ##   ##   ##    ##  ##    ##  ##  \n  ##       ## ##     ## ##    ### ###   ### ###  \n                                                 \n\n\nMask_2:\n##  ###    ## ##    ### ###   ### ##   \n##   ##   ##   ##    ##  ##    ##  ##  \n##   ##   ####       ##        ##  ##  \n##   ##    #####     ## ##     ##  ##  \n##   ##       ###    ##        ##  ##  \n##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##    ### ###   ### ##   \n                                       \n"}
{"sentence": "We have bodyweight training.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2UgaGF2ZSBib2R5d2VpZ2h0IHRyYWluaW5nLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJr unir obqljrvtug genvavat.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neWay avehay odyweightbay ainingtray.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW3 h4v3 b0dyw31gh7 7r41n1ng.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEr jsbr npfuerohjy ytsomomh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u01dd \u0265\u0250\u028c\u01dd qop\u028e\u028d\u01dd\u1d09\u0183\u0265\u0287 \u0287\u0279\u0250\u1d09u\u1d09u\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neW evah thgiewydob .gniniart\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - we\n2. serendipity - have\n3. ephemeral - bodyweight\n4. labyrinthine - training\n\nSentence:\nquixotic serendipity ephemeral training.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1 c2-a1-b5-e1 b1-e3-d1-e5-c5-e1-d2-b2-c2-e4 e4-c4-a1-d2-d3-d2-d3-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] have [MASK_0] [MASK_2].\n\nMask_0:\n### ##     ## ##    ### ##    ##  ##    ##   ##   ### ###     ####     ## ##    ###  ##   #### ##  \n ##  ##   ##   ##    ##  ##   ##  ##    ##   ##    ##  ##      ##     ##   ##    ##  ##   # ## ##  \n ##  ##   ##   ##    ##  ##   ##  ##    ##   ##    ##          ##     ##         ##  ##     ##     \n ## ##    ##   ##    ##  ##    ## ##    ## # ##    ## ##       ##     ##  ###    ## ###     ##     \n ##  ##   ##   ##    ##  ##     ##      # ### #    ##          ##     ##   ##    ##  ##     ##     \n ##  ##   ##   ##    ##  ##     ##       ## ##     ##  ##      ##     ##   ##    ##  ##     ##     \n### ##     ## ##    ### ##      ##      ##   ##   ### ###     ####     ## ##    ###  ##    ####    \n                                                                                                   \n\n\nMask_1:\n##   ##   ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n## # ##    ## ##   \n# ### #    ##      \n ## ##     ##  ##  \n##   ##   ### ###  \n                   \n\n\nMask_2:\n#### ##   ### ##      ##        ####    ###  ##     ####    ###  ##    ## ##   \n# ## ##    ##  ##      ##        ##       ## ##      ##       ## ##   ##   ##  \n  ##       ##  ##    ## ##       ##      # ## #      ##      # ## #   ##       \n  ##       ## ##     ##  ##      ##      ## ##       ##      ## ##    ##  ###  \n  ##       ## ##     ## ###      ##      ##  ##      ##      ##  ##   ##   ##  \n  ##       ##  ##    ##  ##      ##      ##  ##      ##      ##  ##   ##   ##  \n ####     #### ##   ###  ##     ####    ###  ##     ####    ###  ##    ## ##   \n                                                                               \n"}
{"sentence": "He was efficient in his work.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGUgd2FzIGVmZmljaWVudCBpbiBoaXMgd29yay4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUr jnf rssvpvrag va uvf jbex.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neHay asway efficientyay inyay ishay orkway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3 w45 3ff1c13n7 1n h15 w0rk.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJr esd rggovormy om jod eptl.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd \u028d\u0250s \u01dd\u025f\u025f\u1d09\u0254\u1d09\u01ddu\u0287 \u1d09u \u0265\u1d09s \u028do\u0279\u029e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neH saw tneiciffe ni sih .krow\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - was\n2. mellifluous - in\n3. serendipity - his\n4. labyrinthine - work\n5. ephemeral - he\n\nSentence:\nephemeral quixotic efficient mellifluous serendipity work.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1 c5-a1-d4 e1-a2-a2-d2-c1-d2-e1-d3-e4 d2-d3 c2-d2-d4 c5-e3-c4-a3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHe [MASK_0] efficient [MASK_1] [MASK_2] work.\n\nMask_0:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n\n\nMask_1:\n  ####    ###  ##  \n   ##       ## ##  \n   ##      # ## #  \n   ##      ## ##   \n   ##      ##  ##  \n   ##      ##  ##  \n  ####    ###  ##  \n                   \n\n\nMask_2:\n###  ##     ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ####     \n ## ###      ##      #####   \n ##  ##      ##         ###  \n ##  ##      ##     ##   ##  \n###  ##     ####     ## ##   \n                             \n"}
{"sentence": "It's as good as new.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXQncyBhcyBnb29kIGFzIG5ldy4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVg'f nf tbbq nf arj.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIt'syay asyay oodgay asyay ewnay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n17'5 45 g00d 45 n3w.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOy'd sd hppf sd mre.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u0287's \u0250s \u0183oop \u0250s u\u01dd\u028d.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tI sa doog sa .wen\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - good\n2. mellifluous - its\n3. ephemeral - new\n4. labyrinthine - as\n\nSentence:\nmellifluous labyrinthine serendipity labyrinthine new.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-e4-'-d4 a1-d4 b2-e3-e3-d1 a1-d4 d3-e1-c5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIt's [MASK_0] good [MASK_0] [MASK_1].\n\nMask_0:\n  ##       ## ##   \n   ##     ##   ##  \n ## ##    ####     \n ##  ##    #####   \n ## ###       ###  \n ##  ##   ##   ##  \n###  ##    ## ##   \n                   \n\n\nMask_1:\n###  ##   ### ###   ##   ##  \n  ## ##    ##  ##   ##   ##  \n # ## #    ##       ##   ##  \n ## ##     ## ##    ## # ##  \n ##  ##    ##       # ### #  \n ##  ##    ##  ##    ## ##   \n###  ##   ### ###   ##   ##  \n                             \n\n\nMask_2:\n  ####    #### ##    ## ##   \n   ##     # ## ##   ##   ##  \n   ##       ##      ####     \n   ##       ##       #####   \n   ##       ##          ###  \n   ##       ##      ##   ##  \n  ####     ####      ## ##   \n                             \n"}
{"sentence": "The girl in red is his girlfriend.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIGdpcmwgaW4gcmVkIGlzIGhpcyBnaXJsZnJpZW5kLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur tvey va erq vf uvf tveysevraq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay irlgay inyay edray isyay ishay irlfriendgay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 g1rl 1n r3d 15 h15 g1rlfr13nd.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr hot; om trf od jod hot;gtormf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd \u0183\u1d09\u0279l \u1d09u \u0279\u01ddp \u1d09s \u0265\u1d09s \u0183\u1d09\u0279l\u025f\u0279\u1d09\u01ddup.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT lrig ni der si sih .dneirflrig\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - red\n2. mellifluous - girl\n3. ephemeral - girlfriend\n4. quixotic - the\n5. serendipity - is\n\nSentence:\nquixotic mellifluous in labyrinthine serendipity his girlfriend.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 b2-d2-c4-b3 d2-d3 c4-e1-d1 d2-d4 c2-d2-d4 b2-d2-c4-b3-a2-c4-d2-e1-d3-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThe [MASK_1] in [MASK_0] [MASK_2] his girlfriend.\n\nMask_0:\n### ##    ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##        ##  ##  \n ## ##     ## ##     ##  ##  \n ## ##     ##        ##  ##  \n ##  ##    ##  ##    ##  ##  \n#### ##   ### ###   ### ##   \n                             \n\n\nMask_1:\n ## ##      ####    ### ##    ####     \n##   ##      ##      ##  ##    ##      \n##           ##      ##  ##    ##      \n##  ###      ##      ## ##     ##      \n##   ##      ##      ## ##     ##      \n##   ##      ##      ##  ##    ##  ##  \n ## ##      ####    #### ##   ### ###  \n                                       \n\n\nMask_2:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n"}
{"sentence": "He wanted very badly to survive.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGUgd2FudGVkIHZlcnkgYmFkbHkgdG8gc3Vydml2ZS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUr jnagrq irel onqyl gb fheivir.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neHay antedway eryvay adlybay otay urvivesay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3 w4n73d v3ry b4dly 70 5urv1v3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJr esmyrf brtu nsf;u yp ditbobr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd \u028d\u0250u\u0287\u01ddp \u028c\u01dd\u0279\u028e q\u0250pl\u028e \u0287o sn\u0279\u028c\u1d09\u028c\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neH detnaw yrev yldab ot .evivrus\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - badly\n2. mellifluous - he\n3. quixotic - to\n4. labyrinthine - wanted\n5. serendipity - survive\n\nSentence:\nmellifluous labyrinthine very ephemeral quixotic survive.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1 c5-a1-d3-e4-e1-d1 b5-e1-c4-e5 b1-a1-d1-b3-e5 e4-e3 d4-a5-c4-b5-d2-b5-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] wanted very [MASK_1] [MASK_0] survive.\n\nMask_0:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_1:\n### ##      ##      ### ##    ####      ##  ##   \n ##  ##      ##      ##  ##    ##       ##  ##   \n ##  ##    ## ##     ##  ##    ##       ##  ##   \n ## ##     ##  ##    ##  ##    ##        ## ##   \n ##  ##    ## ###    ##  ##    ##         ##     \n ##  ##    ##  ##    ##  ##    ##  ##     ##     \n### ##    ###  ##   ### ##    ### ###     ##     \n                                                 \n\n\nMask_2:\n###  ##   ### ###  \n ##  ##    ##  ##  \n ##  ##    ##      \n ## ###    ## ##   \n ##  ##    ##      \n ##  ##    ##  ##  \n###  ##   ### ###  \n                   \n"}
{"sentence": "He is my father.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGUgaXMgbXkgZmF0aGVyLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUr vf zl sngure.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neHay isyay myay atherfay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3 15 my f47h3r.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJr od ,u gsyjrt.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd \u1d09s \u026f\u028e \u025f\u0250\u0287\u0265\u01dd\u0279.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neH si ym .rehtaf\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - he\n2. serendipity - is\n3. quixotic - my\n4. labyrinthine - father\n\nSentence:\nmellifluous serendipity quixotic father.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1 d2-d4 c3-e5 a2-a1-e4-c2-e1-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] is [MASK_2] [MASK_0].\n\nMask_0:\n### ###     ##      #### ##   ###  ##   ### ###   ### ##   \n ##  ##      ##     # ## ##    ##  ##    ##  ##    ##  ##  \n ##        ## ##      ##       ##  ##    ##        ##  ##  \n ## ##     ##  ##     ##       ## ###    ## ##     ## ##   \n ##        ## ###     ##       ##  ##    ##        ## ##   \n ##        ##  ##     ##       ##  ##    ##  ##    ##  ##  \n####      ###  ##    ####     ###  ##   ### ###   #### ##  \n                                                           \n\n\nMask_1:\n###  ##   ### ###  \n ##  ##    ##  ##  \n ##  ##    ##      \n ## ###    ## ##   \n ##  ##    ##      \n ##  ##    ##  ##  \n###  ##   ### ###  \n                   \n\n\nMask_2:\n##   ##   ##  ##   \n ## ##    ##  ##   \n# ### #   ##  ##   \n## # ##    ## ##   \n##   ##     ##     \n##   ##     ##     \n##   ##     ##     \n                   \n"}
{"sentence": "Those apples are very red.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhvc2UgYXBwbGVzIGFyZSB2ZXJ5IHJlZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGubfr nccyrf ner irel erq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noseThay applesyay areyay eryvay edray.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h053 4ppl35 4r3 v3ry r3d.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjpdr s[[;rd str brtu trf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265os\u01dd \u0250ddl\u01dds \u0250\u0279\u01dd \u028c\u01dd\u0279\u028e \u0279\u01ddp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nesohT selppa era yrev .der\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - red\n2. labyrinthine - are\n3. ephemeral - those\n4. serendipity - apples\n5. mellifluous - very\n\nSentence:\nephemeral serendipity labyrinthine mellifluous red.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e3-d4-e1 a1-a4-a4-b3-e1-d4 a1-c4-e1 b5-e1-c4-e5 c4-e1-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] are very [MASK_1].\n\nMask_0:\n  ##      ### ##    ### ##    ####      ### ###    ## ##   \n   ##      ##  ##    ##  ##    ##        ##  ##   ##   ##  \n ## ##     ##  ##    ##  ##    ##        ##       ####     \n ##  ##    ##  ##    ##  ##    ##        ## ##     #####   \n ## ###    ## ##     ## ##     ##        ##           ###  \n ##  ##    ##        ##        ##  ##    ##  ##   ##   ##  \n###  ##   ####      ####      ### ###   ### ###    ## ##   \n                                                           \n\n\nMask_1:\n### ##    ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##        ##  ##  \n ## ##     ## ##     ##  ##  \n ## ##     ##        ##  ##  \n ##  ##    ##  ##    ##  ##  \n#### ##   ### ###   ### ##   \n                             \n\n\nMask_2:\n#### ##   ###  ##    ## ##     ## ##    ### ###  \n# ## ##    ##  ##   ##   ##   ##   ##    ##  ##  \n  ##       ##  ##   ##   ##   ####       ##      \n  ##       ## ###   ##   ##    #####     ## ##   \n  ##       ##  ##   ##   ##       ###    ##      \n  ##       ##  ##   ##   ##   ##   ##    ##  ##  \n ####     ###  ##    ## ##     ## ##    ### ###  \n                                                 \n"}
{"sentence": "The snail has a hard shell.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIHNuYWlsIGhhcyBhIGhhcmQgc2hlbGwu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur fanvy unf n uneq furyy.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay ailsnay ashay ayay ardhay ellshay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 5n41l h45 4 h4rd 5h3ll.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr dmso; jsd s jstf djr;;.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd su\u0250\u1d09l \u0265\u0250s \u0250 \u0265\u0250\u0279p s\u0265\u01ddll.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT lians sah a drah .llehs\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - a\n2. mellifluous - shell\n3. serendipity - snail\n4. ephemeral - the\n5. quixotic - hard\n\nSentence:\nephemeral serendipity has labyrinthine quixotic shell.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 d4-d3-a1-d2-b3 c2-a1-d4 a1 c2-a1-c4-d1 d4-c2-e1-b3-b3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] snail [MASK_0] a hard [MASK_2].\n\nMask_0:\n###  ##     ##       ## ##   \n ##  ##      ##     ##   ##  \n ##  ##    ## ##    ####     \n ## ###    ##  ##    #####   \n ##  ##    ## ###       ###  \n ##  ##    ##  ##   ##   ##  \n###  ##   ###  ##    ## ##   \n                             \n\n\nMask_1:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n\n\nMask_2:\n ## ##    ###  ##   ### ###   ####      ####     \n##   ##    ##  ##    ##  ##    ##        ##      \n####       ##  ##    ##        ##        ##      \n #####     ## ###    ## ##     ##        ##      \n    ###    ##  ##    ##        ##        ##      \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###   ### ###   ### ###  \n                                                 \n"}
{"sentence": "You can order it spicy or classic.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWW91IGNhbiBvcmRlciBpdCBzcGljeSBvciBjbGFzc2ljLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLbh pna beqre vg fcvpl be pynffvp.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nouYay ancay orderyay ityay icyspay oryay assicclay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY0u c4n 0rd3r 17 5p1cy 0r cl4551c.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUpi vsm ptfrt oy d[ovu pt v;sddov.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144on \u0254\u0250u o\u0279p\u01dd\u0279 \u1d09\u0287 sd\u1d09\u0254\u028e o\u0279 \u0254l\u0250ss\u1d09\u0254.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuoY nac redro ti ycips ro .cissalc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - or\n2. serendipity - it\n3. mellifluous - you\n4. ephemeral - spicy\n5. quixotic - order\n\nSentence:\nmellifluous can quixotic serendipity ephemeral labyrinthine classic.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e3-a5 c1-a1-d3 e3-c4-d1-e1-c4 d2-e4 d4-a4-d2-c1-e5 e3-c4 c1-b3-a1-d4-d4-d2-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYou can order [MASK_0] [MASK_1] [MASK_2] classic.\n\nMask_0:\n  ####    #### ##  \n   ##     # ## ##  \n   ##       ##     \n   ##       ##     \n   ##       ##     \n   ##       ##     \n  ####     ####    \n                   \n\n\nMask_1:\n ## ##    ### ##      ####     ## ##    ##  ##   \n##   ##    ##  ##      ##     ##   ##   ##  ##   \n####       ##  ##      ##     ##        ##  ##   \n #####     ##  ##      ##     ##         ## ##   \n    ###    ## ##       ##     ##          ##     \n##   ##    ##          ##     ##   ##     ##     \n ## ##    ####        ####     ## ##      ##     \n                                                 \n\n\nMask_2:\n ## ##    ### ##   \n##   ##    ##  ##  \n##   ##    ##  ##  \n##   ##    ## ##   \n##   ##    ## ##   \n##   ##    ##  ##  \n ## ##    #### ##  \n                   \n"}
{"sentence": "I have a small house.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBoYXZlIGEgc21hbGwgaG91c2Uu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV unir n fznyy ubhfr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay avehay ayay allsmay ousehay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 h4v3 4 5m4ll h0u53.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO jsbr s d,s;; jpidr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0265\u0250\u028c\u01dd \u0250 s\u026f\u0250ll \u0265ons\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI evah a llams .esuoh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - house\n2. mellifluous - a\n3. labyrinthine - have\n4. ephemeral - i\n5. serendipity - small\n\nSentence:\nephemeral labyrinthine mellifluous serendipity house.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 c2-a1-b5-e1 a1 d4-c3-a1-b3-b3 c2-e3-a5-d4-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI [MASK_1] a [MASK_2] [MASK_0].\n\nMask_0:\n###  ##    ## ##    ##  ###    ## ##    ### ###  \n ##  ##   ##   ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##   ####       ##      \n ## ###   ##   ##   ##   ##    #####     ## ##   \n ##  ##   ##   ##   ##   ##       ###    ##      \n ##  ##   ##   ##   ##   ##   ##   ##    ##  ##  \n###  ##    ## ##     ## ##     ## ##    ### ###  \n                                                 \n\n\nMask_1:\n###  ##     ##      ### ###   ### ###  \n ##  ##      ##      ##  ##    ##  ##  \n ##  ##    ## ##     ##  ##    ##      \n ## ###    ##  ##    ##  ##    ## ##   \n ##  ##    ## ###    ### ##    ##      \n ##  ##    ##  ##     ###      ##  ##  \n###  ##   ###  ##      ##     ### ###  \n                                       \n\n\nMask_2:\n ## ##    ##   ##     ##      ####      ####     \n##   ##    ## ##       ##      ##        ##      \n####      # ### #    ## ##     ##        ##      \n #####    ## # ##    ##  ##    ##        ##      \n    ###   ##   ##    ## ###    ##        ##      \n##   ##   ##   ##    ##  ##    ##  ##    ##  ##  \n ## ##    ##   ##   ###  ##   ### ###   ### ###  \n                                                 \n"}
{"sentence": "I'm cutting down on sweets.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSdtIGN1dHRpbmcgZG93biBvbiBzd2VldHMu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV'z phggvat qbja ba fjrrgf.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nI'myay uttingcay ownday onyay eetssway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1'm cu771ng d0wn 0n 5w3375.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO', viyyomh fpem pm derryd.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI'\u026f \u0254n\u0287\u0287\u1d09u\u0183 po\u028du ou s\u028d\u01dd\u01dd\u0287s.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nm'I gnittuc nwod no .steews\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - cutting\n2. serendipity - im\n3. quixotic - down\n4. mellifluous - sweets\n5. ephemeral - on\n\nSentence:\nserendipity labyrinthine quixotic ephemeral sweets.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-'-c3 c1-a5-e4-e4-d2-d3-b2 d1-e3-c5-d3 e3-d3 d4-c5-e1-e1-e4-d4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI'm [MASK_0] down on [MASK_2].\n\nMask_0:\n ## ##    ##  ###   #### ##   #### ##     ####    ###  ##    ## ##   \n##   ##   ##   ##   # ## ##   # ## ##      ##       ## ##   ##   ##  \n##        ##   ##     ##        ##         ##      # ## #   ##       \n##        ##   ##     ##        ##         ##      ## ##    ##  ###  \n##        ##   ##     ##        ##         ##      ##  ##   ##   ##  \n##   ##   ##   ##     ##        ##         ##      ##  ##   ##   ##  \n ## ##     ## ##     ####      ####       ####    ###  ##    ## ##   \n                                                                     \n\n\nMask_1:\n  ####    ##   ##  \n   ##      ## ##   \n   ##     # ### #  \n   ##     ## # ##  \n   ##     ##   ##  \n   ##     ##   ##  \n  ####    ##   ##  \n                   \n\n\nMask_2:\n ## ##    ##   ##   ### ###   ### ###   #### ##    ## ##   \n##   ##   ##   ##    ##  ##    ##  ##   # ## ##   ##   ##  \n####      ##   ##    ##        ##         ##      ####     \n #####    ## # ##    ## ##     ## ##      ##       #####   \n    ###   # ### #    ##        ##         ##          ###  \n##   ##    ## ##     ##  ##    ##  ##     ##      ##   ##  \n ## ##    ##   ##   ### ###   ### ###    ####      ## ##   \n                                                           \n"}
{"sentence": "Albert is so cute.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQWxiZXJ0IGlzIHNvIGN1dGUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNyoreg vf fb phgr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAlbertyay isyay osay utecay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4lb3r7 15 50 cu73.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nS;nrty od dp viyr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200lq\u01dd\u0279\u0287 \u1d09s so \u0254n\u0287\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntreblA si os .etuc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - albert\n2. labyrinthine - is\n3. quixotic - so\n4. serendipity - cute\n\nSentence:\nmellifluous labyrinthine quixotic cute.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-b3-b1-e1-c4-e4 d2-d4 d4-e3 c1-a5-e4-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_1] so [MASK_2].\n\nMask_0:\n  ##      ####      ### ##    ### ###   ### ##    #### ##  \n   ##      ##        ##  ##    ##  ##    ##  ##   # ## ##  \n ## ##     ##        ##  ##    ##        ##  ##     ##     \n ##  ##    ##        ## ##     ## ##     ## ##      ##     \n ## ###    ##        ##  ##    ##        ## ##      ##     \n ##  ##    ##  ##    ##  ##    ##  ##    ##  ##     ##     \n###  ##   ### ###   ### ##    ### ###   #### ##    ####    \n                                                           \n\n\nMask_1:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n\n\nMask_2:\n ## ##    ##  ###   #### ##   ### ###  \n##   ##   ##   ##   # ## ##    ##  ##  \n##        ##   ##     ##       ##      \n##        ##   ##     ##       ## ##   \n##        ##   ##     ##       ##      \n##   ##   ##   ##     ##       ##  ##  \n ## ##     ## ##     ####     ### ###  \n                                       \n"}
{"sentence": "We can make ice cream.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2UgY2FuIG1ha2UgaWNlIGNyZWFtLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJr pna znxr vpr pernz.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neWay ancay akemay iceyay eamcray.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW3 c4n m4k3 1c3 cr34m.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEr vsm ,slr ovr vtrs,.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u01dd \u0254\u0250u \u026f\u0250\u029e\u01dd \u1d09\u0254\u01dd \u0254\u0279\u01dd\u0250\u026f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neW nac ekam eci .maerc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - can\n2. serendipity - cream\n3. ephemeral - we\n4. mellifluous - make\n5. labyrinthine - ice\n\nSentence:\nephemeral quixotic mellifluous labyrinthine cream.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1 c1-a1-d3 c3-a1-a3-e1 d2-c1-e1 c1-c4-e1-a1-c3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] can make [MASK_2] [MASK_1].\n\nMask_0:\n##   ##   ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n## # ##    ## ##   \n# ### #    ##      \n ## ##     ##  ##  \n##   ##   ### ###  \n                   \n\n\nMask_1:\n ## ##    ### ##    ### ###     ##      ##   ##  \n##   ##    ##  ##    ##  ##      ##      ## ##   \n##         ##  ##    ##        ## ##    # ### #  \n##         ## ##     ## ##     ##  ##   ## # ##  \n##         ## ##     ##        ## ###   ##   ##  \n##   ##    ##  ##    ##  ##    ##  ##   ##   ##  \n ## ##    #### ##   ### ###   ###  ##   ##   ##  \n                                                 \n\n\nMask_2:\n  ####     ## ##    ### ###  \n   ##     ##   ##    ##  ##  \n   ##     ##         ##      \n   ##     ##         ## ##   \n   ##     ##         ##      \n   ##     ##   ##    ##  ##  \n  ####     ## ##    ### ###  \n                             \n"}
{"sentence": "We are completely in love.She has a beehive full of bees", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2UgYXJlIGNvbXBsZXRlbHkgaW4gbG92ZS5TaGUgaGFzIGEgYmVlaGl2ZSBmdWxsIG9mIGJlZXM=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJr ner pbzcyrgryl va ybir.Fur unf n orruvir shyy bs orrf\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neWay areyay ompletelycay inyay ove.Shelay ashay ayay eehivebay ullfay ofyay eesbay\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW3 4r3 c0mpl373ly 1n l0v3.5h3 h45 4 b33h1v3 full 0f b335\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEr str vp,[;ryr;u om ;pbr.Djr jsd s nrrjobr gi;; pg nrrd\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u01dd \u0250\u0279\u01dd \u0254o\u026fdl\u01dd\u0287\u01ddl\u028e \u1d09u lo\u028c\u01dd.S\u0265\u01dd \u0265\u0250s \u0250 q\u01dd\u01dd\u0265\u1d09\u028c\u01dd \u025fnll o\u025f q\u01dd\u01dds\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neW era yletelpmoc ni ehS.evol sah a eviheeb lluf fo seeb\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - in\n2. labyrinthine - full\n3. mellifluous - we\n4. serendipity - are\n5. ephemeral - a\n\nSentence:\nmellifluous serendipity completely quixotic love.She has ephemeral beehive labyrinthine of bees", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1 a1-c4-e1 c1-e3-c3-a4-b3-e1-e4-e1-b3-e5 d2-d3 b3-e3-b5-e1-.-d4-c2-e1 c2-a1-d4 a1 b1-e1-e1-c2-d2-b5-e1 a2-a5-b3-b3 e3-a2 b1-e1-e1-d4\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWe are completely [MASK_0] love.She has [MASK_1] beehive [MASK_2] of bees\n\nMask_0:\n  ####    ###  ##  \n   ##       ## ##  \n   ##      # ## #  \n   ##      ## ##   \n   ##      ##  ##  \n   ##      ##  ##  \n  ####    ###  ##  \n                   \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n### ###   ##  ###   ####      ####     \n ##  ##   ##   ##    ##        ##      \n ##       ##   ##    ##        ##      \n ## ##    ##   ##    ##        ##      \n ##       ##   ##    ##        ##      \n ##       ##   ##    ##  ##    ##  ##  \n####       ## ##    ### ###   ### ###  \n                                       \n"}
{"sentence": "My mom is from China.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nTXkgbW9tIGlzIGZyb20gQ2hpbmEu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nZl zbz vf sebz Puvan.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nMyay ommay isyay omfray inaChay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nMy m0m 15 fr0m Ch1n4.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n,u ,p, od gtp, Vjoms.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nW\u028e \u026fo\u026f \u1d09s \u025f\u0279o\u026f \u0186\u0265\u1d09u\u0250.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyM mom si morf .anihC\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - my\n2. serendipity - from\n3. mellifluous - mom\n4. quixotic - is\n5. labyrinthine - china\n\nSentence:\nephemeral mellifluous quixotic serendipity China.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc3-e5 c3-e3-c3 d2-d4 a2-c4-e3-c3 c1-c2-d2-d3-a1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] mom is [MASK_0] [MASK_1].\n\nMask_0:\n### ###   ### ##     ## ##    ##   ##  \n ##  ##    ##  ##   ##   ##    ## ##   \n ##        ##  ##   ##   ##   # ### #  \n ## ##     ## ##    ##   ##   ## # ##  \n ##        ## ##    ##   ##   ##   ##  \n ##        ##  ##   ##   ##   ##   ##  \n####      #### ##    ## ##    ##   ##  \n                                       \n\n\nMask_1:\n ## ##    ###  ##     ####    ###  ##     ##     \n##   ##    ##  ##      ##       ## ##      ##    \n##         ##  ##      ##      # ## #    ## ##   \n##         ## ###      ##      ## ##     ##  ##  \n##         ##  ##      ##      ##  ##    ## ###  \n##   ##    ##  ##      ##      ##  ##    ##  ##  \n ## ##    ###  ##     ####    ###  ##   ###  ##  \n                                                 \n\n\nMask_2:\n##   ##   ##  ##   \n ## ##    ##  ##   \n# ### #   ##  ##   \n## # ##    ## ##   \n##   ##     ##     \n##   ##     ##     \n##   ##     ##     \n                   \n"}
{"sentence": "No sport should be called football.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nTm8gc3BvcnQgc2hvdWxkIGJlIGNhbGxlZCBmb290YmFsbC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nAb fcbeg fubhyq or pnyyrq sbbgonyy.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noNay ortspay ouldshay ebay alledcay ootballfay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nN0 5p0r7 5h0uld b3 c4ll3d f007b4ll.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nMp d[pty djpi;f nr vs;;rf gppyns;;.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nNo sdo\u0279\u0287 s\u0265onlp q\u01dd \u0254\u0250ll\u01ddp \u025foo\u0287q\u0250ll.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noN trops dluohs eb dellac .llabtoof\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - no\n2. quixotic - football\n3. ephemeral - should\n4. mellifluous - sport\n5. serendipity - be\n\nSentence:\nlabyrinthine mellifluous ephemeral serendipity called football.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd3-e3 d4-a4-e3-c4-e4 d4-c2-e3-a5-b3-d1 b1-e1 c1-a1-b3-b3-e1-d1 a2-e3-e3-e4-b1-a1-b3-b3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nNo sport [MASK_2] [MASK_1] called [MASK_0].\n\nMask_0:\n### ###    ## ##     ## ##    #### ##   ### ##      ##      ####      ####     \n ##  ##   ##   ##   ##   ##   # ## ##    ##  ##      ##      ##        ##      \n ##       ##   ##   ##   ##     ##       ##  ##    ## ##     ##        ##      \n ## ##    ##   ##   ##   ##     ##       ## ##     ##  ##    ##        ##      \n ##       ##   ##   ##   ##     ##       ##  ##    ## ###    ##        ##      \n ##       ##   ##   ##   ##     ##       ##  ##    ##  ##    ##  ##    ##  ##  \n####       ## ##     ## ##     ####     ### ##    ###  ##   ### ###   ### ###  \n                                                                               \n\n\nMask_1:\n### ##    ### ###  \n ##  ##    ##  ##  \n ##  ##    ##      \n ## ##     ## ##   \n ##  ##    ##      \n ##  ##    ##  ##  \n### ##    ### ###  \n                   \n\n\nMask_2:\n ## ##    ###  ##    ## ##    ##  ###   ####      ### ##   \n##   ##    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n####       ##  ##   ##   ##   ##   ##    ##        ##  ##  \n #####     ## ###   ##   ##   ##   ##    ##        ##  ##  \n    ###    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##    ###  ##    ## ##     ## ##    ### ###   ### ##   \n                                                           \n"}
{"sentence": "I was hung over.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSB3YXMgaHVuZyBvdmVyLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV jnf uhat bire.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay asway unghay overyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 w45 hung 0v3r.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO esd jimh pbrt.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u028d\u0250s \u0265nu\u0183 o\u028c\u01dd\u0279.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI saw gnuh .revo\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - i\n2. mellifluous - was\n3. serendipity - hung\n4. labyrinthine - over\n\nSentence:\nephemeral mellifluous serendipity over.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 c5-a1-d4 c2-a5-d3-b2 e3-b5-e1-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] was [MASK_0] [MASK_1].\n\nMask_0:\n###  ##   ##  ###   ###  ##    ## ##   \n ##  ##   ##   ##     ## ##   ##   ##  \n ##  ##   ##   ##    # ## #   ##       \n ## ###   ##   ##    ## ##    ##  ###  \n ##  ##   ##   ##    ##  ##   ##   ##  \n ##  ##   ##   ##    ##  ##   ##   ##  \n###  ##    ## ##    ###  ##    ## ##   \n                                       \n\n\nMask_1:\n ## ##    ### ###   ### ###   ### ##   \n##   ##    ##  ##    ##  ##    ##  ##  \n##   ##    ##  ##    ##        ##  ##  \n##   ##    ##  ##    ## ##     ## ##   \n##   ##    ### ##    ##        ## ##   \n##   ##     ###      ##  ##    ##  ##  \n ## ##       ##     ### ###   #### ##  \n                                       \n\n\nMask_2:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n"}
{"sentence": "I can open the door.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBjYW4gb3BlbiB0aGUgZG9vci4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV pna bcra gur qbbe.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay ancay openyay ethay oorday.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 c4n 0p3n 7h3 d00r.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO vsm p[rm yjr fppt.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0254\u0250u od\u01ddu \u0287\u0265\u01dd poo\u0279.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI nac nepo eht .rood\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - the\n2. ephemeral - open\n3. serendipity - i\n4. quixotic - door\n5. labyrinthine - can\n\nSentence:\nserendipity labyrinthine ephemeral mellifluous door.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 c1-a1-d3 e3-a4-e1-d3 e4-c2-e1 d1-e3-e3-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] open the [MASK_2].\n\nMask_0:\n ## ##      ##      ###  ##  \n##   ##      ##       ## ##  \n##         ## ##     # ## #  \n##         ##  ##    ## ##   \n##         ## ###    ##  ##  \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ###  ##  \n                             \n\n\nMask_1:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n\n\nMask_2:\n### ##     ## ##     ## ##    ### ##   \n ##  ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ##  ##  \n### ##     ## ##     ## ##    #### ##  \n                                       \n"}
{"sentence": "You don't listen to me.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWW91IGRvbid0IGxpc3RlbiB0byBtZS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLbh qba'g yvfgra gb zr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nouYay on'tday istenlay otay emay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY0u d0n'7 l1573n 70 m3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUpi fpm'y ;odyrm yp ,r.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144on pou'\u0287 l\u1d09s\u0287\u01ddu \u0287o \u026f\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuoY t'nod netsil ot .em\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - to\n2. mellifluous - you\n3. ephemeral - listen\n4. serendipity - dont\n5. quixotic - me\n\nSentence:\nmellifluous serendipity ephemeral labyrinthine me.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e3-a5 d1-e3-d3-'-e4 b3-d2-d4-e4-e1-d3 e4-e3 c3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYou don't [MASK_1] [MASK_0] [MASK_2].\n\nMask_0:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_1:\n####        ####     ## ##    #### ##   ### ###   ###  ##  \n ##          ##     ##   ##   # ## ##    ##  ##     ## ##  \n ##          ##     ####        ##       ##        # ## #  \n ##          ##      #####      ##       ## ##     ## ##   \n ##          ##         ###     ##       ##        ##  ##  \n ##  ##      ##     ##   ##     ##       ##  ##    ##  ##  \n### ###     ####     ## ##     ####     ### ###   ###  ##  \n                                                           \n\n\nMask_2:\n##   ##   ### ###  \n ## ##     ##  ##  \n# ### #    ##      \n## # ##    ## ##   \n##   ##    ##      \n##   ##    ##  ##  \n##   ##   ### ###  \n                   \n"}
{"sentence": "I do not want to smoke.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBkbyBub3Qgd2FudCB0byBzbW9rZS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV qb abg jnag gb fzbxr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay oday otnay antway otay okesmay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 d0 n07 w4n7 70 5m0k3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO fp mpy esmy yp d,plr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI po uo\u0287 \u028d\u0250u\u0287 \u0287o s\u026fo\u029e\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI od ton tnaw ot .ekoms\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - not\n2. quixotic - want\n3. serendipity - do\n4. mellifluous - i\n5. ephemeral - to\n\nSentence:\nmellifluous serendipity labyrinthine quixotic ephemeral smoke.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 d1-e3 d3-e3-e4 c5-a1-d3-e4 e4-e3 d4-c3-e3-a3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI [MASK_0] [MASK_2] want to [MASK_1].\n\nMask_0:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n\n\nMask_1:\n ## ##    ##   ##    ## ##    ##  ###   ### ###  \n##   ##    ## ##    ##   ##   ##  ##     ##  ##  \n####      # ### #   ##   ##   ## ##      ##      \n #####    ## # ##   ##   ##   ## ##      ## ##   \n    ###   ##   ##   ##   ##   ## ###     ##      \n##   ##   ##   ##   ##   ##   ##  ##     ##  ##  \n ## ##    ##   ##    ## ##    ##  ###   ### ###  \n                                                 \n\n\nMask_2:\n###  ##    ## ##    #### ##  \n  ## ##   ##   ##   # ## ##  \n # ## #   ##   ##     ##     \n ## ##    ##   ##     ##     \n ##  ##   ##   ##     ##     \n ##  ##   ##   ##     ##     \n###  ##    ## ##     ####    \n                             \n"}
{"sentence": "I'll get around to it.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSdsbCBnZXQgYXJvdW5kIHRvIGl0Lg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV'yy trg nebhaq gb vg.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nI'llyay etgay aroundyay otay ityay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1'll g37 4r0und 70 17.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO';; hry stpimf yp oy.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI'll \u0183\u01dd\u0287 \u0250\u0279onup \u0287o \u1d09\u0287.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nll'I teg dnuora ot .ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - ill\n2. ephemeral - get\n3. serendipity - around\n4. quixotic - to\n5. labyrinthine - it\n\nSentence:\nmellifluous ephemeral serendipity quixotic it.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-'-b3-b3 b2-e1-e4 a1-c4-e3-a5-d3-d1 e4-e3 d2-e4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI'll get [MASK_0] [MASK_1] it.\n\nMask_0:\n  ##      ### ##     ## ##    ##  ###   ###  ##   ### ##   \n   ##      ##  ##   ##   ##   ##   ##     ## ##    ##  ##  \n ## ##     ##  ##   ##   ##   ##   ##    # ## #    ##  ##  \n ##  ##    ## ##    ##   ##   ##   ##    ## ##     ##  ##  \n ## ###    ## ##    ##   ##   ##   ##    ##  ##    ##  ##  \n ##  ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n###  ##   #### ##    ## ##     ## ##    ###  ##   ### ##   \n                                                           \n\n\nMask_1:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_2:\n  ####    ####      ####     \n   ##      ##        ##      \n   ##      ##        ##      \n   ##      ##        ##      \n   ##      ##        ##      \n   ##      ##  ##    ##  ##  \n  ####    ### ###   ### ###  \n                             \n"}
{"sentence": "I just need a swimming pool.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBqdXN0IG5lZWQgYSBzd2ltbWluZyBwb29sLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV whfg arrq n fjvzzvat cbby.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay ustjay eednay ayay immingsway oolpay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 ju57 n33d 4 5w1mm1ng p00l.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO kidy mrrf s deo,,omh [pp;.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u027ens\u0287 u\u01dd\u01ddp \u0250 s\u028d\u1d09\u026f\u026f\u1d09u\u0183 dool.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI tsuj deen a gnimmiws .loop\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - need\n2. quixotic - pool\n3. mellifluous - just\n4. ephemeral - a\n5. labyrinthine - i\n\nSentence:\nlabyrinthine mellifluous serendipity ephemeral swimming pool.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 e2-a5-d4-e4 d3-e1-e1-d1 a1 d4-c5-d2-c3-c3-d2-d3-b2 a4-e3-e3-b3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI [MASK_2] need [MASK_1] [MASK_0] pool.\n\nMask_0:\n ## ##    ##   ##     ####    ##   ##   ##   ##     ####    ###  ##    ## ##   \n##   ##   ##   ##      ##      ## ##     ## ##       ##       ## ##   ##   ##  \n####      ##   ##      ##     # ### #   # ### #      ##      # ## #   ##       \n #####    ## # ##      ##     ## # ##   ## # ##      ##      ## ##    ##  ###  \n    ###   # ### #      ##     ##   ##   ##   ##      ##      ##  ##   ##   ##  \n##   ##    ## ##       ##     ##   ##   ##   ##      ##      ##  ##   ##   ##  \n ## ##    ##   ##     ####    ##   ##   ##   ##     ####    ###  ##    ## ##   \n                                                                               \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n   ####   ##  ###    ## ##    #### ##  \n    ##    ##   ##   ##   ##   # ## ##  \n    ##    ##   ##   ####        ##     \n    ##    ##   ##    #####      ##     \n##  ##    ##   ##       ###     ##     \n##  ##    ##   ##   ##   ##     ##     \n ## #      ## ##     ## ##     ####    \n                                       \n"}
{"sentence": "We are completely in love.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2UgYXJlIGNvbXBsZXRlbHkgaW4gbG92ZS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJr ner pbzcyrgryl va ybir.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neWay areyay ompletelycay inyay ovelay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW3 4r3 c0mpl373ly 1n l0v3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEr str vp,[;ryr;u om ;pbr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u01dd \u0250\u0279\u01dd \u0254o\u026fdl\u01dd\u0287\u01ddl\u028e \u1d09u lo\u028c\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neW era yletelpmoc ni .evol\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - in\n2. labyrinthine - we\n3. serendipity - completely\n4. mellifluous - are\n5. ephemeral - love\n\nSentence:\nlabyrinthine mellifluous serendipity quixotic love.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1 a1-c4-e1 c1-e3-c3-a4-b3-e1-e4-e1-b3-e5 d2-d3 b3-e3-b5-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWe [MASK_1] completely [MASK_0] [MASK_2].\n\nMask_0:\n  ####    ###  ##  \n   ##       ## ##  \n   ##      # ## #  \n   ##      ## ##   \n   ##      ##  ##  \n   ##      ##  ##  \n  ####    ###  ##  \n                   \n\n\nMask_1:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n\n\nMask_2:\n####       ## ##    ### ###   ### ###  \n ##       ##   ##    ##  ##    ##  ##  \n ##       ##   ##    ##  ##    ##      \n ##       ##   ##    ##  ##    ## ##   \n ##       ##   ##    ### ##    ##      \n ##  ##   ##   ##     ###      ##  ##  \n### ###    ## ##       ##     ### ###  \n                                       \n"}
{"sentence": "The Avengers are stupid.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIEF2ZW5nZXJzIGFyZSBzdHVwaWQu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur Niratref ner fghcvq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay Avengersyay areyay upidstay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 4v3ng3r5 4r3 57up1d.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr Sbrmhrtd str dyi[of.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd \u2200\u028c\u01ddu\u0183\u01dd\u0279s \u0250\u0279\u01dd s\u0287nd\u1d09p.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT sregnevA era .diputs\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - the\n2. quixotic - avengers\n3. serendipity - are\n4. ephemeral - stupid\n\nSentence:\nlabyrinthine quixotic serendipity stupid.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 a1-b5-e1-d3-b2-e1-c4-d4 a1-c4-e1 d4-e4-a5-a4-d2-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThe [MASK_2] [MASK_1] [MASK_0].\n\nMask_0:\n ## ##    #### ##   ##  ###   ### ##      ####    ### ##   \n##   ##   # ## ##   ##   ##    ##  ##      ##      ##  ##  \n####        ##      ##   ##    ##  ##      ##      ##  ##  \n #####      ##      ##   ##    ##  ##      ##      ##  ##  \n    ###     ##      ##   ##    ## ##       ##      ##  ##  \n##   ##     ##      ##   ##    ##          ##      ##  ##  \n ## ##     ####      ## ##    ####        ####    ### ##   \n                                                           \n\n\nMask_1:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n\n\nMask_2:\n  ##      ### ###   ### ###   ###  ##    ## ##    ### ###   ### ##     ## ##   \n   ##      ##  ##    ##  ##     ## ##   ##   ##    ##  ##    ##  ##   ##   ##  \n ## ##     ##  ##    ##        # ## #   ##         ##        ##  ##   ####     \n ##  ##    ##  ##    ## ##     ## ##    ##  ###    ## ##     ## ##     #####   \n ## ###    ### ##    ##        ##  ##   ##   ##    ##        ## ##        ###  \n ##  ##     ###      ##  ##    ##  ##   ##   ##    ##  ##    ##  ##   ##   ##  \n###  ##      ##     ### ###   ###  ##    ## ##    ### ###   #### ##    ## ##   \n                                                                               \n"}
{"sentence": "I don't hate you.", "long": false, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBkb24ndCBoYXRlIHlvdS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV qba'g ungr lbh.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay on'tday atehay ouyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 d0n'7 h473 y0u.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO fpm'y jsyr upi.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI pou'\u0287 \u0265\u0250\u0287\u01dd \u028eon.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI t'nod etah .uoy\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - i\n2. ephemeral - dont\n3. serendipity - hate\n4. mellifluous - you\n\nSentence:\nquixotic ephemeral serendipity you.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 d1-e3-d3-'-e4 c2-a1-e4-e1 e5-e3-a5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] don't [MASK_2] [MASK_1].\n\nMask_0:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n###  ##     ##      #### ##   ### ###  \n ##  ##      ##     # ## ##    ##  ##  \n ##  ##    ## ##      ##       ##      \n ## ###    ##  ##     ##       ## ##   \n ##  ##    ## ###     ##       ##      \n ##  ##    ##  ##     ##       ##  ##  \n###  ##   ###  ##    ####     ### ###  \n                                       \n"}
{"sentence": "k ASA O sEnY EZGl.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nayBBU0EgTyBzRW5ZIEVaR2wu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nx NFN B fRaL RMTy.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nkay ASAyay Oyay EnYsay EZGlyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk 454 0 53nY 3ZGl.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nl SDS P dRmU RXH;.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e \u2200S\u2200 O s\u018eu\u2144 \u018eZ\u2141l.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nk ASA O YnEs .lGZE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - seny\n2. serendipity - k\n3. ephemeral - asa\n4. quixotic - ezgl\n5. labyrinthine - o\n\nSentence:\nserendipity ephemeral labyrinthine mellifluous EZGl.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3 a1-d4-a1 e3 d4-e1-d3-e5 e1-z-b2-b3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nk [MASK_2] [MASK_0] [MASK_1] EZGl.\n\nMask_0:\n ## ##   \n##   ##  \n##   ##  \n##   ##  \n##   ##  \n##   ##  \n ## ##   \n         \n\n\nMask_1:\n ## ##    ### ###   ###  ##   ##  ##   \n##   ##    ##  ##     ## ##   ##  ##   \n####       ##        # ## #   ##  ##   \n #####     ## ##     ## ##     ## ##   \n    ###    ##        ##  ##     ##     \n##   ##    ##  ##    ##  ##     ##     \n ## ##    ### ###   ###  ##     ##     \n                                       \n\n\nMask_2:\n  ##       ## ##      ##     \n   ##     ##   ##      ##    \n ## ##    ####       ## ##   \n ##  ##    #####     ##  ##  \n ## ###       ###    ## ###  \n ##  ##   ##   ##    ##  ##  \n###  ##    ## ##    ###  ##  \n                             \n"}
{"sentence": "GHp'Y aa xLBejYWo.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nR0hwJ1kgYWEgeExCZWpZV28u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nTUc'L nn kYOrwLJb.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nGHp'Yay aayay ejYWoxLBay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nGHp'Y 44 xLB3jYW0.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nHJ['U ss c;NrkUEp.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2141Hd'\u2144 \u0250\u0250 x\u2142\u15fa\u01dd\u027e\u2144Mo.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nY'pHG aa .oWYjeBLx\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - ghpy\n2. serendipity - aa\n3. quixotic - xlbejywo\n\nSentence:\nlabyrinthine serendipity xLBejYWo.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-c2-a4-'-e5 a1-a1 d5-b3-b1-e1-e2-e5-c5-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nGHp'Y [MASK_0] xLBejYWo.\n\nMask_0:\n  ##        ##     \n   ##        ##    \n ## ##     ## ##   \n ##  ##    ##  ##  \n ## ###    ## ###  \n ##  ##    ##  ##  \n###  ##   ###  ##  \n                   \n"}
{"sentence": "oS cBV XANC cvIFS hPxb.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nb1MgY0JWIFhBTkMgY3ZJRlMgaFB4Yi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nbF pOI KNAP piVSF uCko.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noSyay cBVay ANCXay IFScvay hPxbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n05 cBV X4NC cv1F5 hPxb.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\npD vNB CSMV vbOGD j[cn.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\noS \u0254\u15fa\u039b X\u2200N\u0186 \u0254\u028cI\u2132S \u0265\u0500xq.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nSo VBc CNAX SFIvc .bxPh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - os\n2. labyrinthine - cvifs\n3. serendipity - cbv\n4. quixotic - xanc\n5. ephemeral - hpxb\n\nSentence:\nmellifluous serendipity quixotic labyrinthine hPxb.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne3-d4 c1-b1-b5 d5-a1-d3-c1 c1-b5-d2-a2-d4 c2-a4-d5-b1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] XANC cvIFS [MASK_1].\n\nMask_0:\n ## ##    ### ##    ### ###  \n##   ##    ##  ##    ##  ##  \n##         ##  ##    ##  ##  \n##         ## ##     ##  ##  \n##         ##  ##    ### ##  \n##   ##    ##  ##     ###    \n ## ##    ### ##       ##    \n                             \n\n\nMask_1:\n###  ##   ### ##    ##  ##    ### ##   \n ##  ##    ##  ##   ### ##     ##  ##  \n ##  ##    ##  ##    ###       ##  ##  \n ## ###    ##  ##     ###      ## ##   \n ##  ##    ## ##       ###     ##  ##  \n ##  ##    ##       ##  ###    ##  ##  \n###  ##   ####      ##   ##   ### ##   \n                                       \n\n\nMask_2:\n ## ##     ## ##   \n##   ##   ##   ##  \n##   ##   ####     \n##   ##    #####   \n##   ##       ###  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n"}
{"sentence": "jVf hZbDkJ UvzFj lQc.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nalZmIGhaYkRrSiBVdnpGaiBsUWMu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nwIs uMoQxW HimSw yDp.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\njVfay hZbDkJay UvzFjyay lQcay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\njVf hZbDkJ UvzFj lQc.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nkBg jXnFlK IbxGk ;Wv.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u027e\u039b\u025f \u0265Zq\u15e1\u029e\u017f \u2229\u028cz\u2132\u027e l\u10e2\u0254.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nfVj JkDbZh jFzvU .cQl\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - jvf\n2. quixotic - hzbdkj\n3. serendipity - uvzfj\n4. ephemeral - lqc\n\nSentence:\nmellifluous quixotic serendipity lQc.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-b5-a2 c2-z-b1-d1-a3-e2 a5-b5-z-a2-e2 b3-b4-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_2] UvzFj [MASK_1].\n\nMask_0:\n   ####   ### ###   ### ###  \n    ##     ##  ##    ##  ##  \n    ##     ##  ##    ##      \n    ##     ##  ##    ## ##   \n##  ##     ### ##    ##      \n##  ##      ###      ##      \n ## #        ##     ####     \n                             \n\n\nMask_1:\n####       ## ##     ## ##   \n ##       ##   ##   ##   ##  \n ##       ##   ##   ##       \n ##       ##   ##   ##       \n ##       ##   ##   ##       \n ##  ##   ##  ##    ##   ##  \n### ###    ##  ##    ## ##   \n                             \n\n\nMask_2:\n###  ##   ### ##    ### ##    ### ##    ##  ###      ####  \n ##  ##   ##  ##     ##  ##    ##  ##   ##  ##        ##   \n ##  ##      ##      ##  ##    ##  ##   ## ##         ##   \n ## ###     ##       ## ##     ##  ##   ## ##         ##   \n ##  ##    ##        ##  ##    ##  ##   ## ###    ##  ##   \n ##  ##   ##  ##     ##  ##    ##  ##   ##  ##    ##  ##   \n###  ##   # ####    ### ##    ### ##    ##  ###    ## #    \n                                                           \n"}
{"sentence": "Epe'Xm nRZ QWWL Ue hJ.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRXBlJ1htIG5SWiBRV1dMIFVlIGhKLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nRcr'Kz aEM DJJY Hr uW.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nEpe'Xmyay nRZay QWWLay Ueyay hJay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3p3'Xm nRZ QWWL U3 hJ.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nR[r'C, mTX WEE; Ir jK.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u018ed\u01dd'X\u026f u\u1d1aZ \u10e2MM\u2142 \u2229\u01dd \u0265\u017f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nmX'epE ZRn LWWQ eU .Jh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - nrz\n2. quixotic - epexm\n3. serendipity - ue\n4. ephemeral - qwwl\n5. labyrinthine - hj\n\nSentence:\nquixotic mellifluous ephemeral serendipity hJ.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-a4-e1-'-d5-c3 d3-c4-z b4-c5-c5-b3 a5-e1 c2-e2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nEpe'Xm [MASK_1] QWWL Ue [MASK_0].\n\nMask_0:\n###  ##      ####  \n ##  ##       ##   \n ##  ##       ##   \n ## ###       ##   \n ##  ##   ##  ##   \n ##  ##   ##  ##   \n###  ##    ## #    \n                   \n\n\nMask_1:\n###  ##   ### ##    ### ##   \n  ## ##    ##  ##   ##  ##   \n # ## #    ##  ##      ##    \n ## ##     ## ##      ##     \n ##  ##    ## ##     ##      \n ##  ##    ##  ##   ##  ##   \n###  ##   #### ##   # ####   \n                             \n\n\nMask_2:\n### ###   ### ##    ### ###   ##  ##    ##   ##  \n ##  ##    ##  ##    ##  ##   ### ##     ## ##   \n ##        ##  ##    ##        ###      # ### #  \n ## ##     ##  ##    ## ##      ###     ## # ##  \n ##        ## ##     ##          ###    ##   ##  \n ##  ##    ##        ##  ##   ##  ###   ##   ##  \n### ###   ####      ### ###   ##   ##   ##   ##  \n                                                 \n"}
{"sentence": "EJ ymvj IAsxCGyuFy rbfkTTFa.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRUogeW12aiBJQXN4Q0d5dUZ5IHJiZmtUVEZhLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nRW lziw VNfkPTlhSl eosxGGSn.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nEJyay ymvjay IAsxCGyuFyyay arbfkTTFay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3J ymvj 145xCGyuFy rbfk77F4.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nRK u,bk OSdcVHuiGu tnglYYGs.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u018e\u017f \u028e\u026f\u028c\u027e I\u2200sx\u0186\u2141\u028en\u2132\u028e \u0279q\u025f\u029e\u22a5\u22a5\u2132\u0250.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nJE jvmy yFuyGCxsAI .aFTTkfbr\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - ej\n2. mellifluous - ymvj\n3. labyrinthine - iasxcgyufy\n4. ephemeral - rbfkttfa\n\nSentence:\nquixotic mellifluous labyrinthine rbfkTTFa.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-e2 e5-c3-b5-e2 d2-a1-d4-d5-c1-b2-e5-a5-a2-e5 c4-b1-a2-a3-e4-e4-a2-a1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] [MASK_0] rbfkTTFa.\n\nMask_0:\n  ####      ##       ## ##    ##  ##     ## ##     ## ##    ##  ##    ##  ###   ### ###   ##  ##   \n   ##        ##     ##   ##   ### ##    ##   ##   ##   ##   ##  ##    ##   ##    ##  ##   ##  ##   \n   ##      ## ##    ####       ###      ##        ##        ##  ##    ##   ##    ##       ##  ##   \n   ##      ##  ##    #####      ###     ##        ##  ###    ## ##    ##   ##    ## ##     ## ##   \n   ##      ## ###       ###      ###    ##        ##   ##     ##      ##   ##    ##         ##     \n   ##      ##  ##   ##   ##   ##  ###   ##   ##   ##   ##     ##      ##   ##    ##         ##     \n  ####    ###  ##    ## ##    ##   ##    ## ##     ## ##      ##       ## ##    ####        ##     \n                                                                                                   \n\n\nMask_1:\n### ###      ####  \n ##  ##       ##   \n ##           ##   \n ## ##        ##   \n ##       ##  ##   \n ##  ##   ##  ##   \n### ###    ## #    \n                   \n\n\nMask_2:\n##  ##    ##   ##   ### ###      ####  \n##  ##     ## ##     ##  ##       ##   \n##  ##    # ### #    ##  ##       ##   \n ## ##    ## # ##    ##  ##       ##   \n  ##      ##   ##    ### ##   ##  ##   \n  ##      ##   ##     ###     ##  ##   \n  ##      ##   ##      ##      ## #    \n                                       \n"}
{"sentence": "Fe JMV HoKMuJNhl Qk Owv wWMt.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRmUgSk1WIEhvS011Sk5obCBRayBPd3Ygd1dNdC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nSr WZI UbXZhWAuy Dx Bji jJZg.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neFay JMVay oKMuJNhlHay Qkay Owvyay wWMtay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nF3 JMV H0KMuJNhl Qk 0wv wWM7.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nGr K,B JpL,iKMj; Wl Peb eE,y.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2132\u01dd \u017fW\u039b Ho\ua4d8Wn\u017fN\u0265l \u10e2\u029e O\u028d\u028c \u028dMW\u0287.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neF VMJ lhNJuMKoH kQ vwO .tMWw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - qk\n2. quixotic - hokmujnhl\n3. ephemeral - fe\n4. labyrinthine - wwmt\n5. serendipity - jmv\n\nSentence:\nephemeral serendipity quixotic mellifluous Owv wWMt.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na2-e1 e2-c3-b5 c2-e3-a3-c3-a5-e2-d3-c2-b3 b4-a3 e3-c5-b5 c5-c5-c3-e4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] JMV HoKMuJNhl [MASK_2] [MASK_1] wWMt.\n\nMask_0:\n### ###   ### ###  \n ##  ##    ##  ##  \n ##        ##      \n ## ##     ## ##   \n ##        ##      \n ##        ##  ##  \n####      ### ###  \n                   \n\n\nMask_1:\n ## ##    ##   ##   ### ###  \n##   ##   ##   ##    ##  ##  \n##   ##   ##   ##    ##  ##  \n##   ##   ## # ##    ##  ##  \n##   ##   # ### #    ### ##  \n##   ##    ## ##      ###    \n ## ##    ##   ##      ##    \n                             \n\n\nMask_2:\n ## ##    ##  ###  \n##   ##   ##  ##   \n##   ##   ## ##    \n##   ##   ## ##    \n##   ##   ## ###   \n##  ##    ##  ##   \n ##  ##   ##  ###  \n                   \n"}
{"sentence": "pg'k el XBxk Rc RHQ.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncGcnayBlbCBYQnhrIFJjIFJIUS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nct'x ry KOkx Ep EUD.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\npg'kay elyay XBxkay Rcay RHQay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\npg'k 3l XBxk Rc RHQ.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n[h'l r; CNcl Tv TJW.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nd\u0183'\u029e \u01ddl X\u15fax\u029e \u1d1a\u0254 \u1d1aH\u10e2.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nk'gp le kxBX cR .QHR\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - rc\n2. labyrinthine - el\n3. serendipity - pgk\n4. quixotic - rhq\n5. mellifluous - xbxk\n\nSentence:\nserendipity labyrinthine mellifluous ephemeral RHQ.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na4-b2-'-a3 e1-b3 d5-b1-d5-a3 c4-c1 c4-c2-b4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\npg'k el [MASK_2] Rc [MASK_0].\n\nMask_0:\n### ##    ###  ##    ## ##   \n ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##   ##   ##  \n ## ##     ## ###   ##   ##  \n ## ##     ##  ##   ##   ##  \n ##  ##    ##  ##   ##  ##   \n#### ##   ###  ##    ##  ##  \n                             \n\n\nMask_1:\n### ##     ## ##    ##  ###  \n ##  ##   ##   ##   ##  ##   \n ##  ##   ##        ## ##    \n ##  ##   ##  ###   ## ##    \n ## ##    ##   ##   ## ###   \n ##       ##   ##   ##  ##   \n####       ## ##    ##  ###  \n                             \n\n\nMask_2:\n##  ##    ### ##    ##  ##    ##  ###  \n### ##     ##  ##   ### ##    ##  ##   \n ###       ##  ##    ###      ## ##    \n  ###      ## ##      ###     ## ##    \n   ###     ##  ##      ###    ## ###   \n##  ###    ##  ##   ##  ###   ##  ##   \n##   ##   ### ##    ##   ##   ##  ###  \n                                       \n"}
{"sentence": "pAk VLaw FG yQp pk JeC ZAXVEdsdqQ.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncEFrIFZMYXcgRkcgeVFwIHBrIEplQyBaQVhWRWRzZHFRLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ncNx IYnj ST lDc cx WrP MNKIRqfqdD.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAkpay awVLay FGay yQpay pkay eCJay AXVEdsdqQZay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\np4k VL4w FG yQp pk J3C Z4XV3d5dqQ.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n[Sl B;se GH uW[ [l KrV XSCBRfdfwW.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nd\u2200\u029e \u039b\u2142\u0250\u028d \u2132\u2141 \u028e\u10e2d d\u029e \u017f\u01dd\u0186 Z\u2200X\u039b\u018epspb\u10e2.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nkAp waLV GF pQy kp CeJ .QqdsdEVXAZ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - zaxvedsdqq\n2. serendipity - pak\n3. mellifluous - jec\n4. ephemeral - fg\n5. labyrinthine - yqp\n\nSentence:\nserendipity VLaw ephemeral labyrinthine pk mellifluous ZAXVEdsdqQ.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na4-a1-a3 b5-b3-a1-c5 a2-b2 e5-b4-a4 a4-a3 e2-e1-c1 z-a1-d5-b5-e1-d1-d4-d1-b4-b4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] VLaw FG [MASK_2] [MASK_1] JeC ZAXVEdsdqQ.\n\nMask_0:\n### ##      ##      ##  ###  \n ##  ##      ##     ##  ##   \n ##  ##    ## ##    ## ##    \n ##  ##    ##  ##   ## ##    \n ## ##     ## ###   ## ###   \n ##        ##  ##   ##  ##   \n####      ###  ##   ##  ###  \n                             \n\n\nMask_1:\n### ##    ##  ###  \n ##  ##   ##  ##   \n ##  ##   ## ##    \n ##  ##   ## ##    \n ## ##    ## ###   \n ##       ##  ##   \n####      ##  ###  \n                   \n\n\nMask_2:\n##  ##     ## ##    ### ##   \n##  ##    ##   ##    ##  ##  \n##  ##    ##   ##    ##  ##  \n ## ##    ##   ##    ##  ##  \n  ##      ##   ##    ## ##   \n  ##      ##  ##     ##      \n  ##       ##  ##   ####     \n                             \n"}
{"sentence": "sc Apkzev PjjV UEdqi PH UEbnxYj.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nc2MgQXBremV2IFBqalYgVUVkcWkgUEggVUVibnhZai4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nfp Ncxmri CwwI HRqdv CU HRoakLw.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nscay Apkzevyay PjjVay UEdqiyay PHay UEbnxYjyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5c 4pkz3v PjjV U3dq1 PH U3bnxYj.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ndv S[lxrb [kkB IRfwo [J IRnmcUk.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\ns\u0254 \u2200d\u029ez\u01dd\u028c \u0500\u027e\u027e\u039b \u2229\u018epb\u1d09 \u0500H \u2229\u018equx\u2144\u027e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ncs vezkpA VjjP iqdEU HP .jYxnbEU\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - pjjv\n2. quixotic - ph\n3. labyrinthine - uedqi\n4. ephemeral - apkzev\n5. serendipity - uebnxyj\n\nSentence:\nsc ephemeral mellifluous labyrinthine quixotic UEbnxYj.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c1 a1-a4-a3-z-e1-b5 a4-e2-e2-b5 a5-e1-d1-b4-d2 a4-c2 a5-e1-b1-d3-d5-e5-e2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] [MASK_0] UEdqi PH UEbnxYj.\n\nMask_0:\n### ##       ####      ####   ### ###  \n ##  ##       ##        ##     ##  ##  \n ##  ##       ##        ##     ##  ##  \n ##  ##       ##        ##     ##  ##  \n ## ##    ##  ##    ##  ##     ### ##  \n ##       ##  ##    ##  ##      ###    \n####       ## #      ## #        ##    \n                                       \n\n\nMask_1:\n ## ##     ## ##   \n##   ##   ##   ##  \n####      ##       \n #####    ##       \n    ###   ##       \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n\n\nMask_2:\n  ##      ### ##    ##  ###   ### ##    ### ###   ### ###  \n   ##      ##  ##   ##  ##    ##  ##     ##  ##    ##  ##  \n ## ##     ##  ##   ## ##        ##      ##        ##  ##  \n ##  ##    ##  ##   ## ##       ##       ## ##     ##  ##  \n ## ###    ## ##    ## ###     ##        ##        ### ##  \n ##  ##    ##       ##  ##    ##  ##     ##  ##     ###    \n###  ##   ####      ##  ###   # ####    ### ###      ##    \n                                                           \n"}
{"sentence": "xM XB FL EtiILr.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neE0gWEIgRkwgRXRpSUxyLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nkZ KO SY RgvVYe.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxMay XBay FLay EtiILryay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nxM XB FL 3711Lr.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nc, CN G; RyoO;t.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nxW X\u15fa \u2132\u2142 \u018e\u0287\u1d09I\u2142\u0279.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nMx BX LF .rLIitE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - xm\n2. ephemeral - xb\n3. mellifluous - fl\n4. labyrinthine - etiilr\n\nSentence:\nquixotic ephemeral mellifluous EtiILr.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-c3 d5-b1 a2-b3 e1-e4-d2-d2-b3-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxM [MASK_1] [MASK_0] [MASK_2].\n\nMask_0:\n### ###   ####     \n ##  ##    ##      \n ##        ##      \n ## ##     ##      \n ##        ##      \n ##        ##  ##  \n####      ### ###  \n                   \n\n\nMask_1:\n##  ##    ### ##   \n### ##     ##  ##  \n ###       ##  ##  \n  ###      ## ##   \n   ###     ##  ##  \n##  ###    ##  ##  \n##   ##   ### ##   \n                   \n\n\nMask_2:\n### ###   #### ##     ####      ####    ####      ### ##   \n ##  ##   # ## ##      ##        ##      ##        ##  ##  \n ##         ##         ##        ##      ##        ##  ##  \n ## ##      ##         ##        ##      ##        ## ##   \n ##         ##         ##        ##      ##        ## ##   \n ##  ##     ##         ##        ##      ##  ##    ##  ##  \n### ###    ####       ####      ####    ### ###   #### ##  \n                                                           \n"}
{"sentence": "iXUay RiTbqL uPp LAqR zWZ.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\naVhVYXkgUmlUYnFMIHVQcCBMQXFSIHpXWi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nvKHnl EvGodY hCc YNdE mJM.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\niXUayyay iTbqLRay uPpyay AqRLay zWZay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1XU4y R17bqL uPp L4qR zWZ.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\noCIsu ToYnw; i[[ ;SwT xEX.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u1d09X\u2229\u0250\u028e \u1d1a\u1d09\u22a5qb\u2142 n\u0500d \u2142\u2200b\u1d1a zMZ.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyaUXi LqbTiR pPu RqAL .ZWz\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - zwz\n2. labyrinthine - ixuay\n3. ephemeral - ritbql\n4. mellifluous - laqr\n5. serendipity - upp\n\nSentence:\nlabyrinthine ephemeral serendipity mellifluous zWZ.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d5-a5-a1-e5 c4-d2-e4-b1-b4-b3 a5-a4-a4 b3-a1-b4-c4 z-c5-z-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\niXUay [MASK_1] [MASK_0] LAqR [MASK_2].\n\nMask_0:\n##  ###   ### ##    ### ##   \n##   ##    ##  ##    ##  ##  \n##   ##    ##  ##    ##  ##  \n##   ##    ##  ##    ##  ##  \n##   ##    ## ##     ## ##   \n##   ##    ##        ##      \n ## ##    ####      ####     \n                             \n\n\nMask_1:\n### ##      ####    #### ##   ### ##     ## ##    ####     \n ##  ##      ##     # ## ##    ##  ##   ##   ##    ##      \n ##  ##      ##       ##       ##  ##   ##   ##    ##      \n ## ##       ##       ##       ## ##    ##   ##    ##      \n ## ##       ##       ##       ##  ##   ##   ##    ##      \n ##  ##      ##       ##       ##  ##   ##  ##     ##  ##  \n#### ##     ####     ####     ### ##     ##  ##   ### ###  \n                                                           \n\n\nMask_2:\n### ##    ##   ##   ### ##   \n##  ##    ##   ##   ##  ##   \n   ##     ##   ##      ##    \n  ##      ## # ##     ##     \n ##       # ### #    ##      \n##  ##     ## ##    ##  ##   \n# ####    ##   ##   # ####   \n                             \n"}
{"sentence": "iij gzglb PCY j ehPs itIuz.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\naWlqIGd6Z2xiIFBDWSBqIGVoUHMgaXRJdXou\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nvvw tmtyo CPL w ruCf vgVhm.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\niijyay gzglbay PCYay jay ehPsyay itIuzyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n11j gzglb PCY j 3hP5 171uz.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nook hxh;n [VU k rj[d oyOix.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u1d09\u1d09\u027e \u0183z\u0183lq \u0500\u0186\u2144 \u027e \u01dd\u0265\u0500s \u1d09\u0287Inz.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njii blgzg YCP j sPhe .zuIti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - ehps\n2. ephemeral - j\n3. labyrinthine - pcy\n4. quixotic - iij\n5. serendipity - gzglb\n\nSentence:\nquixotic serendipity labyrinthine ephemeral mellifluous itIuz.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d2-e2 b2-z-b2-b3-b1 a4-c1-e5 e2 e1-c2-a4-d4 d2-e4-d2-a5-z-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\niij [MASK_2] [MASK_1] j ehPs [MASK_0].\n\nMask_0:\n  ####    #### ##     ####    ##  ###   ### ##   \n   ##     # ## ##      ##     ##   ##   ##  ##   \n   ##       ##         ##     ##   ##      ##    \n   ##       ##         ##     ##   ##     ##     \n   ##       ##         ##     ##   ##    ##      \n   ##       ##         ##     ##   ##   ##  ##   \n  ####     ####       ####     ## ##    # ####   \n                                                 \n\n\nMask_1:\n### ##     ## ##    ##  ##   \n ##  ##   ##   ##   ##  ##   \n ##  ##   ##        ##  ##   \n ##  ##   ##         ## ##   \n ## ##    ##          ##     \n ##       ##   ##     ##     \n####       ## ##      ##     \n                             \n\n\nMask_2:\n ## ##    ### ##     ## ##    ####      ### ##   \n##   ##   ##  ##    ##   ##    ##        ##  ##  \n##           ##     ##         ##        ##  ##  \n##  ###     ##      ##  ###    ##        ## ##   \n##   ##    ##       ##   ##    ##        ##  ##  \n##   ##   ##  ##    ##   ##    ##  ##    ##  ##  \n ## ##    # ####     ## ##    ### ###   ### ##   \n                                                 \n"}
{"sentence": "FoN kll ymTVJ Wc MTGVX dY ayDezWK.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRm9OIGtsbCB5bVRWSiBXYyBNVEdWWCBkWSBheURleldLLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nSbA xyy lzGIW Jp ZGTIK qL nlQrmJX.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noNFay kllay ymTVJay Wcay MTGVXay dYay ayDezWKyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nF0N kll ym7VJ Wc M7GVX dY 4yD3zWK.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nGpM l;; u,YBK Ev ,YHBC fU suFrxEL.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2132oN \u029ell \u028e\u026f\u22a5\u039b\u017f M\u0254 W\u22a5\u2141\u039bX p\u2144 \u0250\u028e\u15e1\u01ddzM\ua4d8.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nNoF llk JVTmy cW XVGTM Yd .KWzeDya\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - dy\n2. mellifluous - kll\n3. labyrinthine - mtgvx\n4. ephemeral - aydezwk\n5. serendipity - fon\n\nSentence:\nserendipity mellifluous ymTVJ Wc labyrinthine quixotic ayDezWK.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na2-e3-d3 a3-b3-b3 e5-c3-e4-b5-e2 c5-c1 c3-e4-b2-b5-d5 d1-e5 a1-e5-d1-e1-z-c5-a3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nFoN [MASK_0] [MASK_2] Wc [MASK_1] dY ayDezWK.\n\nMask_0:\n##  ###   ####      ####     \n##  ##     ##        ##      \n## ##      ##        ##      \n## ##      ##        ##      \n## ###     ##        ##      \n##  ##     ##  ##    ##  ##  \n##  ###   ### ###   ### ###  \n                             \n\n\nMask_1:\n##   ##   #### ##    ## ##    ### ###   ##  ##   \n ## ##    # ## ##   ##   ##    ##  ##   ### ##   \n# ### #     ##      ##         ##  ##    ###     \n## # ##     ##      ##  ###    ##  ##     ###    \n##   ##     ##      ##   ##    ### ##      ###   \n##   ##     ##      ##   ##     ###     ##  ###  \n##   ##    ####      ## ##       ##     ##   ##  \n                                                 \n\n\nMask_2:\n##  ##    ##   ##   #### ##   ### ###      ####  \n##  ##     ## ##    # ## ##    ##  ##       ##   \n##  ##    # ### #     ##       ##  ##       ##   \n ## ##    ## # ##     ##       ##  ##       ##   \n  ##      ##   ##     ##       ### ##   ##  ##   \n  ##      ##   ##     ##        ###     ##  ##   \n  ##      ##   ##    ####        ##      ## #    \n                                                 \n"}
{"sentence": "l ToqS M uVcpy jtUsG.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nbCBUb3FTIE0gdVZjcHkganRVc0cu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ny GbdF Z hIpcl wgHfT.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nlay oqSTay May uVcpyyay UsGjtay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nl 70q5 M uVcpy j7U5G.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n; YpwD , iBv[u kyIdH.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nl \u22a5obS W n\u039b\u0254d\u028e \u027e\u0287\u2229s\u2141.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nl SqoT M ypcVu .GsUtj\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - l\n2. quixotic - jtusg\n3. mellifluous - toqs\n4. serendipity - uvcpy\n5. ephemeral - m\n\nSentence:\nlabyrinthine mellifluous ephemeral serendipity jtUsG.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3 e4-e3-b4-d4 c3 a5-b5-c1-a4-e5 e2-e4-a5-d4-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nl ToqS [MASK_2] [MASK_0] [MASK_1].\n\nMask_0:\n##  ###   ### ###    ## ##    ### ##    ##  ##   \n##   ##    ##  ##   ##   ##    ##  ##   ##  ##   \n##   ##    ##  ##   ##         ##  ##   ##  ##   \n##   ##    ##  ##   ##         ##  ##    ## ##   \n##   ##    ### ##   ##         ## ##      ##     \n##   ##     ###     ##   ##    ##         ##     \n ## ##       ##      ## ##    ####        ##     \n                                                 \n\n\nMask_1:\n   ####   #### ##   ##  ###    ## ##     ## ##   \n    ##    # ## ##   ##   ##   ##   ##   ##   ##  \n    ##      ##      ##   ##   ####      ##       \n    ##      ##      ##   ##    #####    ##  ###  \n##  ##      ##      ##   ##       ###   ##   ##  \n##  ##      ##      ##   ##   ##   ##   ##   ##  \n ## #      ####      ## ##     ## ##     ## ##   \n                                                 \n\n\nMask_2:\n##   ##  \n ## ##   \n# ### #  \n## # ##  \n##   ##  \n##   ##  \n##   ##  \n         \n"}
{"sentence": "Z'J FKgIMdG MVuH ts SNHWJm.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWidKIEZLZ0lNZEcgTVZ1SCB0cyBTTkhXSm0u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nM'W SXtVZqT ZIhU gf FAUJWz.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nZ'Jay IMdGFKgay uHMVay tsay SNHWJmay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nZ'J FKg1MdG MVuH 75 5NHWJm.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nX'K GLhO,fH ,BiJ yd DMJEK,.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nZ'\u017f \u2132\ua4d8\u0183IWp\u2141 W\u039bnH \u0287s SNHM\u017f\u026f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nJ'Z GdMIgKF HuVM st .mJWHNS\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - ts\n2. serendipity - mvuh\n3. mellifluous - snhwjm\n4. labyrinthine - zj\n5. ephemeral - fkgimdg\n\nSentence:\nlabyrinthine ephemeral serendipity quixotic SNHWJm.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-'-e2 a2-a3-b2-d2-c3-d1-b2 c3-b5-a5-c2 e4-d4 d4-d3-c2-c5-e2-c3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nZ'J [MASK_1] [MASK_2] [MASK_0] SNHWJm.\n\nMask_0:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ####     \n  ##       #####   \n  ##          ###  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_1:\n### ###   ##  ###    ## ##      ####    ##   ##   ### ##     ## ##   \n ##  ##   ##  ##    ##   ##      ##      ## ##     ##  ##   ##   ##  \n ##       ## ##     ##           ##     # ### #    ##  ##   ##       \n ## ##    ## ##     ##  ###      ##     ## # ##    ##  ##   ##  ###  \n ##       ## ###    ##   ##      ##     ##   ##    ##  ##   ##   ##  \n ##       ##  ##    ##   ##      ##     ##   ##    ##  ##   ##   ##  \n####      ##  ###    ## ##      ####    ##   ##   ### ##     ## ##   \n                                                                     \n\n\nMask_2:\n##   ##   ### ###   ##  ###   ###  ##  \n ## ##     ##  ##   ##   ##    ##  ##  \n# ### #    ##  ##   ##   ##    ##  ##  \n## # ##    ##  ##   ##   ##    ## ###  \n##   ##    ### ##   ##   ##    ##  ##  \n##   ##     ###     ##   ##    ##  ##  \n##   ##      ##      ## ##    ###  ##  \n                                       \n"}
{"sentence": "eNumwe uQ Ag ePeO.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZU51bXdlIHVRIEFnIGVQZU8u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nrAhzjr hD Nt rCrB.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neNumweyay uQyay Agyay ePeOyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3Numw3 uQ 4g 3P30.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nrMi,er iW Sh r[rP.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u01ddNn\u026f\u028d\u01dd n\u10e2 \u2200\u0183 \u01dd\u0500\u01ddO.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\newmuNe Qu gA .OePe\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - enumwe\n2. ephemeral - uq\n3. quixotic - ag\n4. labyrinthine - epeo\n\nSentence:\nmellifluous ephemeral quixotic ePeO.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-d3-a5-c3-c5-e1 a5-b4 a1-b2 e1-a4-e1-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] Ag [MASK_2].\n\nMask_0:\n##  ###    ## ##   \n##   ##   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n##   ##   ##  ##   \n ## ##     ##  ##  \n                   \n\n\nMask_1:\n### ###   ###  ##   ##  ###   ##   ##   ##   ##   ### ###  \n ##  ##     ## ##   ##   ##    ## ##    ##   ##    ##  ##  \n ##        # ## #   ##   ##   # ### #   ##   ##    ##      \n ## ##     ## ##    ##   ##   ## # ##   ## # ##    ## ##   \n ##        ##  ##   ##   ##   ##   ##   # ### #    ##      \n ##  ##    ##  ##   ##   ##   ##   ##    ## ##     ##  ##  \n### ###   ###  ##    ## ##    ##   ##   ##   ##   ### ###  \n                                                           \n\n\nMask_2:\n### ###   ### ##    ### ###    ## ##   \n ##  ##    ##  ##    ##  ##   ##   ##  \n ##        ##  ##    ##       ##   ##  \n ## ##     ##  ##    ## ##    ##   ##  \n ##        ## ##     ##       ##   ##  \n ##  ##    ##        ##  ##   ##   ##  \n### ###   ####      ### ###    ## ##   \n                                       \n"}
{"sentence": "ZW CGN bRPT CEH Gyzeo.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWlcgQ0dOIGJSUFQgQ0VIIEd5emVvLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nMJ PTA oECG PRU Tlmrb.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nZWay CGNay bRPTay EHCay eoGyzay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nZW CGN bRP7 C3H Gyz30.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nXE VHM nT[Y VRJ Huxrp.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nZM \u0186\u2141N q\u1d1a\u0500\u22a5 \u0186\u018eH \u2141\u028ez\u01ddo.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nWZ NGC TPRb HEC .oezyG\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - brpt\n2. quixotic - gyzeo\n3. serendipity - cgn\n4. labyrinthine - ceh\n5. ephemeral - zw\n\nSentence:\nephemeral serendipity mellifluous labyrinthine Gyzeo.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-c5 c1-b2-d3 b1-c4-a4-e4 c1-e1-c2 b2-e5-z-e1-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_1] [MASK_0] CEH Gyzeo.\n\nMask_0:\n### ##    ### ##    ### ##    #### ##  \n ##  ##    ##  ##    ##  ##   # ## ##  \n ##  ##    ##  ##    ##  ##     ##     \n ## ##     ## ##     ##  ##     ##     \n ##  ##    ## ##     ## ##      ##     \n ##  ##    ##  ##    ##         ##     \n### ##    #### ##   ####       ####    \n                                       \n\n\nMask_1:\n ## ##     ## ##    ###  ##  \n##   ##   ##   ##     ## ##  \n##        ##         # ## #  \n##        ##  ###    ## ##   \n##        ##   ##    ##  ##  \n##   ##   ##   ##    ##  ##  \n ## ##     ## ##    ###  ##  \n                             \n\n\nMask_2:\n### ##    ##   ##  \n##  ##    ##   ##  \n   ##     ##   ##  \n  ##      ## # ##  \n ##       # ### #  \n##  ##     ## ##   \n# ####    ##   ##  \n                   \n"}
{"sentence": "bd QBc prTLzUBDZp zy uFoO.Pfc ElF x TMnXCOO WNQU MS RqpE", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nYmQgUUJjIHByVEx6VUJEWnAgenkgdUZvTy5QZmMgRWxGIHggVE1uWENPTyBXTlFVIE1TIFJxcEU=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\noq DOp ceGYmHOQMc ml hSbB.Csp RyS k GZaKPBB JADH ZF EdcR\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nbday QBcay UBDZpprTLzay zyay uFoO.Pfcyay ElFyay xay OOTMnXCay UWNQay MSay ERqpay\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nbd QBc pr7LzUBDZp zy uF00.Pfc 3lF x 7MnXC00 WNQU M5 Rqp3\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nnf WNv [tY;xINFX[ xu iGpP.[gv R;G c Y,mCVPP EMWI ,D Tw[R\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nqp \u10e2\u15fa\u0254 d\u0279\u22a5\u2142z\u2229\u15fa\u15e1Zd z\u028e n\u2132oO.\u0500\u025f\u0254 \u018el\u2132 x \u22a5WuX\u0186OO MN\u10e2\u2229 WS \u1d1abd\u018e\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ndb cBQ pZDBUzLTrp yz cfP.OoFu FlE x OOCXnMT UQNW SM EpqR\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - ms\n2. ephemeral - prtlzubdzp\n3. mellifluous - elf\n4. labyrinthine - qbc\n5. quixotic - bd\n\nSentence:\nquixotic labyrinthine ephemeral zy uFoO.Pfc mellifluous x TMnXCOO WNQU serendipity RqpE", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb1-d1 b4-b1-c1 a4-c4-e4-b3-z-a5-b1-d1-z-a4 z-e5 a5-a2-e3-e3-.-a4-a2-c1 e1-b3-a2 d5 e4-c3-d3-d5-c1-e3-e3 c5-d3-b4-a5 c3-d4 c4-b4-a4-e1\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nbd QBc prTLzUBDZp zy uFoO.Pfc ElF [MASK_0] TMnXCOO WNQU MS [MASK_1]\n\nMask_0:\n##  ##   \n### ##   \n ###     \n  ###    \n   ###   \n##  ###  \n##   ##  \n         \n\n\nMask_1:\n### ##     ## ##    ### ##    ### ###  \n ##  ##   ##   ##    ##  ##    ##  ##  \n ##  ##   ##   ##    ##  ##    ##      \n ## ##    ##   ##    ##  ##    ## ##   \n ## ##    ##   ##    ## ##     ##      \n ##  ##   ##  ##     ##        ##  ##  \n#### ##    ##  ##   ####      ### ###  \n                                       \n\n\nMask_2:\n##  ###   ### ###    ## ##     ## ##    ### ##    ### ###    ## ##   \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##   ##   ##  \n##   ##    ##       ##   ##   ##   ##    ##  ##    ##       ##       \n##   ##    ## ##    ##   ##   ##   ##    ##  ##    ## ##    ##       \n##   ##    ##       ##   ##   ##   ##    ## ##     ##       ##       \n##   ##    ##       ##   ##   ##   ##    ##        ##       ##   ##  \n ## ##    ####       ## ##     ## ##    ####      ####       ## ##   \n                                                                     \n"}
{"sentence": "Fy tNy HT akum tzTjf.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRnkgdE55IEhUIGFrdW0gdHpUamYu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nSl gAl UG nxhz gmGws.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nFyay tNyay HTay akumyay tzTjfay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nFy 7Ny H7 4kum 7z7jf.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nGu yMu JY sli, yxYkg.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2132\u028e \u0287N\u028e H\u22a5 \u0250\u029en\u026f \u0287z\u22a5\u027e\u025f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyF yNt TH muka .fjTzt\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - akum\n2. ephemeral - fy\n3. mellifluous - tztjf\n4. quixotic - ht\n5. serendipity - tny\n\nSentence:\nephemeral serendipity quixotic labyrinthine tzTjf.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na2-e5 e4-d3-e5 c2-e4 a1-a3-a5-c3 e4-z-e4-e2-a2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nFy [MASK_2] HT [MASK_0] [MASK_1].\n\nMask_0:\n  ##      ##  ###   ##  ###   ##   ##  \n   ##     ##  ##    ##   ##    ## ##   \n ## ##    ## ##     ##   ##   # ### #  \n ##  ##   ## ##     ##   ##   ## # ##  \n ## ###   ## ###    ##   ##   ##   ##  \n ##  ##   ##  ##    ##   ##   ##   ##  \n###  ##   ##  ###    ## ##    ##   ##  \n                                       \n\n\nMask_1:\n#### ##   ### ##    #### ##      ####   ### ###  \n# ## ##   ##  ##    # ## ##       ##     ##  ##  \n  ##         ##       ##          ##     ##      \n  ##        ##        ##          ##     ## ##   \n  ##       ##         ##      ##  ##     ##      \n  ##      ##  ##      ##      ##  ##     ##      \n ####     # ####     ####      ## #     ####     \n                                                 \n\n\nMask_2:\n#### ##   ###  ##   ##  ##   \n# ## ##     ## ##   ##  ##   \n  ##       # ## #   ##  ##   \n  ##       ## ##     ## ##   \n  ##       ##  ##     ##     \n  ##       ##  ##     ##     \n ####     ###  ##     ##     \n                             \n"}
{"sentence": "Jl fHtNy VVDgkT Bn RvxPLR mqfbuGqj.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSmwgZkh0TnkgVlZEZ2tUIEJuIFJ2eFBMUiBtcWZidUdxai4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nWy sUgAl IIQtxG Oa EikCYE zdsohTdw.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nJlay fHtNyay VVDgkTay Bnay RvxPLRay uGqjmqfbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nJl fH7Ny VVDgk7 Bn RvxPLR mqfbuGqj.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nK; gJyMu BBFhlY Nm Tbc[;T ,wgniHwk.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u017fl \u025fH\u0287N\u028e \u039b\u039b\u15e1\u0183\u029e\u22a5 \u15fau \u1d1a\u028cx\u0500\u2142\u1d1a \u026fb\u025fqn\u2141b\u027e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nlJ yNtHf TkgDVV nB RLPxvR .jqGubfqm\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - jl\n2. serendipity - fhtny\n3. ephemeral - rvxplr\n4. quixotic - mqfbugqj\n5. labyrinthine - vvdgkt\n\nSentence:\nmellifluous serendipity labyrinthine Bn ephemeral mqfbuGqj.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-b3 a2-c2-e4-d3-e5 b5-b5-d1-b2-a3-e4 b1-d3 c4-b5-d5-a4-b3-c4 c3-b4-a2-b1-a5-b2-b4-e2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nJl fHtNy VVDgkT [MASK_1] [MASK_0] [MASK_2].\n\nMask_0:\n### ##    ### ###   ##  ##    ### ##    ####      ### ##   \n ##  ##    ##  ##   ### ##     ##  ##    ##        ##  ##  \n ##  ##    ##  ##    ###       ##  ##    ##        ##  ##  \n ## ##     ##  ##     ###      ##  ##    ##        ## ##   \n ## ##     ### ##      ###     ## ##     ##        ## ##   \n ##  ##     ###     ##  ###    ##        ##  ##    ##  ##  \n#### ##      ##     ##   ##   ####      ### ###   #### ##  \n                                                           \n\n\nMask_1:\n### ##    ###  ##  \n ##  ##     ## ##  \n ##  ##    # ## #  \n ## ##     ## ##   \n ##  ##    ##  ##  \n ##  ##    ##  ##  \n### ##    ###  ##  \n                   \n\n\nMask_2:\n##   ##    ## ##    ### ###   ### ##    ##  ###    ## ##     ## ##       ####  \n ## ##    ##   ##    ##  ##    ##  ##   ##   ##   ##   ##   ##   ##       ##   \n# ### #   ##   ##    ##        ##  ##   ##   ##   ##        ##   ##       ##   \n## # ##   ##   ##    ## ##     ## ##    ##   ##   ##  ###   ##   ##       ##   \n##   ##   ##   ##    ##        ##  ##   ##   ##   ##   ##   ##   ##   ##  ##   \n##   ##   ##  ##     ##        ##  ##   ##   ##   ##   ##   ##  ##    ##  ##   \n##   ##    ##  ##   ####      ### ##     ## ##     ## ##     ##  ##    ## #    \n                                                                               \n"}
{"sentence": "R Gmp MSrT ykzD.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUiBHbXAgTVNyVCB5a3pELg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nE Tzc ZFeG lxmQ.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nRay Gmpay MSrTay ykzDay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nR Gmp M5r7 ykzD.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nT H,[ ,DtY ulxF.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u1d1a \u2141\u026fd WS\u0279\u22a5 \u028e\u029ez\u15e1.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nR pmG TrSM .Dzky\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - r\n2. serendipity - gmp\n3. labyrinthine - msrt\n4. quixotic - ykzd\n\nSentence:\nmellifluous serendipity labyrinthine ykzD.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc4 b2-c3-a4 c3-d4-c4-e4 e5-a3-z-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_2] [MASK_1] ykzD.\n\nMask_0:\n### ##   \n ##  ##  \n ##  ##  \n ## ##   \n ## ##   \n ##  ##  \n#### ##  \n         \n\n\nMask_1:\n##   ##    ## ##    ### ##    #### ##  \n ## ##    ##   ##    ##  ##   # ## ##  \n# ### #   ####       ##  ##     ##     \n## # ##    #####     ## ##      ##     \n##   ##       ###    ## ##      ##     \n##   ##   ##   ##    ##  ##     ##     \n##   ##    ## ##    #### ##    ####    \n                                       \n\n\nMask_2:\n ## ##    ##   ##   ### ##   \n##   ##    ## ##     ##  ##  \n##        # ### #    ##  ##  \n##  ###   ## # ##    ##  ##  \n##   ##   ##   ##    ## ##   \n##   ##   ##   ##    ##      \n ## ##    ##   ##   ####     \n                             \n"}
{"sentence": "z BDN QrQl QyN rgmn.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neiBCRE4gUXJRbCBReU4gcmdtbi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nm OQA DeDy DlA etza.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nzay BDNay QrQlay QyNay rgmnay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nz BDN QrQl QyN rgmn.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nx NFM WtW; WuM th,m.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nz \u15fa\u15e1N \u10e2\u0279\u10e2l \u10e2\u028eN \u0279\u0183\u026fu.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nz NDB lQrQ NyQ .nmgr\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - bdn\n2. serendipity - qrql\n3. quixotic - qyn\n4. labyrinthine - rgmn\n5. ephemeral - z\n\nSentence:\nephemeral mellifluous serendipity quixotic rgmn.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz b1-d1-d3 b4-c4-b4-b3 b4-e5-d3 c4-b2-c3-d3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nz [MASK_2] QrQl [MASK_0] [MASK_1].\n\nMask_0:\n ## ##    ##  ##    ###  ##  \n##   ##   ##  ##      ## ##  \n##   ##   ##  ##     # ## #  \n##   ##    ## ##     ## ##   \n##   ##     ##       ##  ##  \n##  ##      ##       ##  ##  \n ##  ##     ##      ###  ##  \n                             \n\n\nMask_1:\n### ##     ## ##    ##   ##   ###  ##  \n ##  ##   ##   ##    ## ##      ## ##  \n ##  ##   ##        # ### #    # ## #  \n ## ##    ##  ###   ## # ##    ## ##   \n ## ##    ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ##  ##  \n#### ##    ## ##    ##   ##   ###  ##  \n                                       \n\n\nMask_2:\n### ##    ### ##    ###  ##  \n ##  ##    ##  ##     ## ##  \n ##  ##    ##  ##    # ## #  \n ## ##     ##  ##    ## ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##  ##    ##  ##  \n### ##    ### ##    ###  ##  \n                             \n"}
{"sentence": "cwZ OTx'b eGLczM CS Cp.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nY3daIE9UeCdiIGVHTGN6TSBDUyBDcC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\npjM BGk'o rTYpmZ PF Pc.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ncwZay OTx'byay eGLczMyay CSay Cpay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\ncwZ 07x'b 3GLczM C5 Cp.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nveX PYc'n rH;vx, VD V[.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0254\u028dZ O\u22a5x'q \u01dd\u2141\u2142\u0254zW \u0186S \u0186d.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nZwc b'xTO MzcLGe SC .pC\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - cp\n2. mellifluous - cwz\n3. serendipity - otxb\n4. quixotic - cs\n5. ephemeral - eglczm\n\nSentence:\nmellifluous serendipity ephemeral quixotic Cp.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc1-c5-z e3-e4-d5-'-b1 e1-b2-b3-c1-z-c3 c1-d4 c1-a4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] OTx'b [MASK_0] [MASK_1] Cp.\n\nMask_0:\n### ###    ## ##    ####       ## ##    ### ##    ##   ##  \n ##  ##   ##   ##    ##       ##   ##   ##  ##     ## ##   \n ##       ##         ##       ##           ##     # ### #  \n ## ##    ##  ###    ##       ##          ##      ## # ##  \n ##       ##   ##    ##       ##         ##       ##   ##  \n ##  ##   ##   ##    ##  ##   ##   ##   ##  ##    ##   ##  \n### ###    ## ##    ### ###    ## ##    # ####    ##   ##  \n                                                           \n\n\nMask_1:\n ## ##     ## ##   \n##   ##   ##   ##  \n##        ####     \n##         #####   \n##            ###  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n\n\nMask_2:\n ## ##    ##   ##   ### ##   \n##   ##   ##   ##   ##  ##   \n##        ##   ##      ##    \n##        ## # ##     ##     \n##        # ### #    ##      \n##   ##    ## ##    ##  ##   \n ## ##    ##   ##   # ####   \n                             \n"}
{"sentence": "a Ij gtm Dxax ki KYBHd.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nYSBJaiBndG0gRHhheCBraSBLWUJIZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nn Vw tgz Qknk xv XLOUq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nayay Ijyay gtmay axDxay ikay KYBHday.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4 1j g7m Dx4x k1 KYBHd.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ns Ok hy, Fcsc lo LUNJf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0250 I\u027e \u0183\u0287\u026f \u15e1x\u0250x \u029e\u1d09 \ua4d8\u2144\u15faHp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\na jI mtg xaxD ik .dHBYK\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - kybhd\n2. labyrinthine - dxax\n3. quixotic - ki\n4. ephemeral - ij\n5. serendipity - a\n\nSentence:\nserendipity ephemeral gtm labyrinthine quixotic KYBHd.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1 d2-e2 b2-e4-c3 d1-d5-a1-d5 a3-d2 a3-e5-b1-c2-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] Ij [MASK_2] Dxax ki [MASK_1].\n\nMask_0:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_1:\n##  ###   ##  ##    ### ##    ###  ##   ### ##   \n##  ##    ##  ##     ##  ##    ##  ##    ##  ##  \n## ##     ##  ##     ##  ##    ##  ##    ##  ##  \n## ##      ## ##     ## ##     ## ###    ##  ##  \n## ###      ##       ##  ##    ##  ##    ##  ##  \n##  ##      ##       ##  ##    ##  ##    ##  ##  \n##  ###     ##      ### ##    ###  ##   ### ##   \n                                                 \n\n\nMask_2:\n ## ##    #### ##   ##   ##  \n##   ##   # ## ##    ## ##   \n##          ##      # ### #  \n##  ###     ##      ## # ##  \n##   ##     ##      ##   ##  \n##   ##     ##      ##   ##  \n ## ##     ####     ##   ##  \n                             \n"}
{"sentence": "t'mA zJp oKZLDY bQ Le.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndCdtQSB6SnAgb0taTERZIGJRIExlLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ng'zN mWc bXMYQL oD Yr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAt'may zJpay oKZLDYyay bQay eLay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7'm4 zJp 0KZLDY bQ L3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ny',S xK[ pLX;FU nW ;r.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0287'\u026f\u2200 z\u017fd o\ua4d8Z\u2142\u15e1\u2144 q\u10e2 \u2142\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nAm't pJz YDLZKo Qb .eL\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - tma\n2. mellifluous - le\n3. quixotic - zjp\n4. serendipity - okzldy\n5. labyrinthine - bq\n\nSentence:\nephemeral quixotic serendipity labyrinthine Le.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-'-c3-a1 z-e2-a4 e3-a3-z-b3-d1-e5 b1-b4 b3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nt'mA [MASK_1] oKZLDY bQ [MASK_2].\n\nMask_0:\n#### ##   ##   ##     ##     \n# ## ##    ## ##       ##    \n  ##      # ### #    ## ##   \n  ##      ## # ##    ##  ##  \n  ##      ##   ##    ## ###  \n  ##      ##   ##    ##  ##  \n ####     ##   ##   ###  ##  \n                             \n\n\nMask_1:\n### ##       ####   ### ##   \n##  ##        ##     ##  ##  \n   ##         ##     ##  ##  \n  ##          ##     ##  ##  \n ##       ##  ##     ## ##   \n##  ##    ##  ##     ##      \n# ####     ## #     ####     \n                             \n\n\nMask_2:\n####      ### ###  \n ##        ##  ##  \n ##        ##      \n ##        ## ##   \n ##        ##      \n ##  ##    ##  ##  \n### ###   ### ###  \n                   \n"}
{"sentence": "f BVWQ mjdF H MINFERZR vjrj.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZiBCVldRIG1qZEYgSCBNSU5GRVJaUiB2anJqLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ns OIJD zwqS U ZVASREME iwew.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nfay BVWQay mjdFay Hay INFERZRMay vjrjay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nf BVWQ mjdF H M1NF3RZR vjrj.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ng NBEW ,kfG J ,OMGRTXT bktk.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u025f \u15fa\u039bM\u10e2 \u026f\u027ep\u2132 H WIN\u2132\u018e\u1d1aZ\u1d1a \u028c\u027e\u0279\u027e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nf QWVB Fdjm H RZREFNIM .jrjv\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - minferzr\n2. ephemeral - f\n3. quixotic - bvwq\n4. serendipity - h\n5. mellifluous - mjdf\n\nSentence:\nephemeral quixotic mellifluous serendipity labyrinthine vjrj.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na2 b1-b5-c5-b4 c3-e2-d1-a2 c2 c3-d2-d3-a2-e1-c4-z-c4 b5-e2-c4-e2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] BVWQ mjdF [MASK_2] [MASK_1] vjrj.\n\nMask_0:\n### ###  \n ##  ##  \n ##      \n ## ##   \n ##      \n ##      \n####     \n         \n\n\nMask_1:\n##   ##     ####    ###  ##   ### ###   ### ###   ### ##    ### ##    ### ##   \n ## ##       ##       ## ##    ##  ##    ##  ##    ##  ##   ##  ##     ##  ##  \n# ### #      ##      # ## #    ##        ##        ##  ##      ##      ##  ##  \n## # ##      ##      ## ##     ## ##     ## ##     ## ##      ##       ## ##   \n##   ##      ##      ##  ##    ##        ##        ## ##     ##        ## ##   \n##   ##      ##      ##  ##    ##        ##  ##    ##  ##   ##  ##     ##  ##  \n##   ##     ####    ###  ##   ####      ### ###   #### ##   # ####    #### ##  \n                                                                               \n\n\nMask_2:\n###  ##  \n ##  ##  \n ##  ##  \n ## ###  \n ##  ##  \n ##  ##  \n###  ##  \n         \n"}
{"sentence": "ws tOO aZeQelGgRm xr wdkc.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nd3MgdE9PIGFaZVFlbEdnUm0geHIgd2RrYy4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\njf gBB nMrDryTtEz ke jqxp.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nwsay OOtay aZeQelGgRmyay xray wdkcay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nw5 700 4Z3Q3lGgRm xr wdkc.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ned yPP sXrWr;HhT, ct eflv.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u028ds \u0287OO \u0250Z\u01dd\u10e2\u01ddl\u2141\u0183\u1d1a\u026f x\u0279 \u028dp\u029e\u0254.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsw OOt mRgGleQeZa rx .ckdw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - xr\n2. quixotic - too\n3. serendipity - wdkc\n4. labyrinthine - ws\n5. ephemeral - azeqelggrm\n\nSentence:\nlabyrinthine quixotic ephemeral mellifluous wdkc.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-d4 e4-e3-e3 a1-z-e1-b4-e1-b3-b2-b2-c4-c3 d5-c4 c5-d1-a3-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] tOO [MASK_1] [MASK_2] wdkc.\n\nMask_0:\n##   ##    ## ##   \n##   ##   ##   ##  \n##   ##   ####     \n## # ##    #####   \n# ### #       ###  \n ## ##    ##   ##  \n##   ##    ## ##   \n                   \n\n\nMask_1:\n  ##      ### ##    ### ###    ## ##    ### ###   ####       ## ##     ## ##    ### ##    ##   ##  \n   ##     ##  ##     ##  ##   ##   ##    ##  ##    ##       ##   ##   ##   ##    ##  ##    ## ##   \n ## ##       ##      ##       ##   ##    ##        ##       ##        ##         ##  ##   # ### #  \n ##  ##     ##       ## ##    ##   ##    ## ##     ##       ##  ###   ##  ###    ## ##    ## # ##  \n ## ###    ##        ##       ##   ##    ##        ##       ##   ##   ##   ##    ## ##    ##   ##  \n ##  ##   ##  ##     ##  ##   ##  ##     ##  ##    ##  ##   ##   ##   ##   ##    ##  ##   ##   ##  \n###  ##   # ####    ### ###    ##  ##   ### ###   ### ###    ## ##     ## ##    #### ##   ##   ##  \n                                                                                                   \n\n\nMask_2:\n##  ##    ### ##   \n### ##     ##  ##  \n ###       ##  ##  \n  ###      ## ##   \n   ###     ## ##   \n##  ###    ##  ##  \n##   ##   #### ##  \n                   \n"}
{"sentence": "LFr RYPzkcgo wIq AmSmUH.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nTEZyIFJZUHprY2dvIHdJcSBBbVNtVUgu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nYSe ELCmxptb jVd NzFzHU.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nLFray oRYPzkcgay Iqway AmSmUHyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nLFr RYPzkcg0 w1q 4m5mUH.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;Gt TU[xlvhp eOw S,D,IJ.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2142\u2132\u0279 \u1d1a\u2144\u0500z\u029e\u0254\u0183o \u028dIb \u2200\u026fS\u026f\u2229H.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nrFL ogckzPYR qIw .HUmSmA\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - lfr\n2. quixotic - rypzkcgo\n3. mellifluous - wiq\n4. serendipity - amsmuh\n\nSentence:\nephemeral quixotic mellifluous AmSmUH.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-a2-c4 c4-e5-a4-z-a3-c1-b2-e3 c5-d2-b4 a1-c3-d4-c3-a5-c2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_1] wIq [MASK_0].\n\nMask_0:\n  ##      ##   ##    ## ##    ##   ##   ##  ###   ###  ##  \n   ##      ## ##    ##   ##    ## ##    ##   ##    ##  ##  \n ## ##    # ### #   ####      # ### #   ##   ##    ##  ##  \n ##  ##   ## # ##    #####    ## # ##   ##   ##    ## ###  \n ## ###   ##   ##       ###   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##   ##   ##   ##   ##    ##  ##  \n###  ##   ##   ##    ## ##    ##   ##    ## ##    ###  ##  \n                                                           \n\n\nMask_1:\n### ##    ##  ##    ### ##    ### ##    ##  ###    ## ##     ## ##     ## ##   \n ##  ##   ##  ##     ##  ##   ##  ##    ##  ##    ##   ##   ##   ##   ##   ##  \n ##  ##   ##  ##     ##  ##      ##     ## ##     ##        ##        ##   ##  \n ## ##     ## ##     ##  ##     ##      ## ##     ##        ##  ###   ##   ##  \n ## ##      ##       ## ##     ##       ## ###    ##        ##   ##   ##   ##  \n ##  ##     ##       ##       ##  ##    ##  ##    ##   ##   ##   ##   ##   ##  \n#### ##     ##      ####      # ####    ##  ###    ## ##     ## ##     ## ##   \n                                                                               \n\n\nMask_2:\n####      ### ###   ### ##   \n ##        ##  ##    ##  ##  \n ##        ##        ##  ##  \n ##        ## ##     ## ##   \n ##        ##        ## ##   \n ##  ##    ##        ##  ##  \n### ###   ####      #### ##  \n                             \n"}
{"sentence": "B fuo'n GcUw MIO.", "long": false, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nQiBmdW8nbiBHY1V3IE1JTy4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nO shb'a TpHj ZVB.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nBay uo'nfay UwGcay IOMay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nB fu0'n GcUw M10.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nN gip'm HvIe ,OP.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15fa \u025fno'u \u2141\u0254\u2229\u028d WIO.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nB n'ouf wUcG .OIM\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - b\n2. mellifluous - fuon\n3. serendipity - gcuw\n4. ephemeral - mio\n\nSentence:\nlabyrinthine mellifluous serendipity MIO.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb1 a2-a5-e3-'-d3 b2-c1-a5-c5 c3-d2-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nB fuo'n [MASK_2] [MASK_0].\n\nMask_0:\n##   ##     ####     ## ##   \n ## ##       ##     ##   ##  \n# ### #      ##     ##   ##  \n## # ##      ##     ##   ##  \n##   ##      ##     ##   ##  \n##   ##      ##     ##   ##  \n##   ##     ####     ## ##   \n                             \n\n\nMask_1:\n### ###   ##  ###    ## ##    ###  ##  \n ##  ##   ##   ##   ##   ##     ## ##  \n ##       ##   ##   ##   ##    # ## #  \n ## ##    ##   ##   ##   ##    ## ##   \n ##       ##   ##   ##   ##    ##  ##  \n ##       ##   ##   ##   ##    ##  ##  \n####       ## ##     ## ##    ###  ##  \n                                       \n\n\nMask_2:\n ## ##     ## ##    ##  ###   ##   ##  \n##   ##   ##   ##   ##   ##   ##   ##  \n##        ##        ##   ##   ##   ##  \n##  ###   ##        ##   ##   ## # ##  \n##   ##   ##        ##   ##   # ### #  \n##   ##   ##   ##   ##   ##    ## ##   \n ## ##     ## ##     ## ##    ##   ##  \n                                       \n"}
{"sentence": "I am going to return this sweater because it's too big.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBhbSBnb2luZyB0byByZXR1cm4gdGhpcyBzd2VhdGVyIGJlY2F1c2UgaXQncyB0b28gYmlnLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV nz tbvat gb erghea guvf fjrngre orpnhfr vg'f gbb ovt.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay amyay oinggay otay eturnray isthay eatersway ecausebay it'syay ootay igbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 4m g01ng 70 r37urn 7h15 5w3473r b3c4u53 17'5 700 b1g.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO s, hpomh yp tryitm yjod dersyrt nrvsidr oy'd ypp noh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0250\u026f \u0183o\u1d09u\u0183 \u0287o \u0279\u01dd\u0287n\u0279u \u0287\u0265\u1d09s s\u028d\u01dd\u0250\u0287\u01dd\u0279 q\u01dd\u0254\u0250ns\u01dd \u1d09\u0287's \u0287oo q\u1d09\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI ma gniog ot nruter siht retaews esuaceb s'ti oot .gib\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - this\n2. mellifluous - sweater\n3. labyrinthine - its\n4. quixotic - am\n5. ephemeral - return\n\nSentence:\nI quixotic going to ephemeral serendipity mellifluous because labyrinthine too big.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 a1-c3 b2-e3-d2-d3-b2 e4-e3 c4-e1-e4-a5-c4-d3 e4-c2-d2-d4 d4-c5-e1-a1-e4-e1-c4 b1-e1-c1-a1-a5-d4-e1 d2-e4-'-d4 e4-e3-e3 b1-d2-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nI [MASK_1] going to return [MASK_2] [MASK_0] because it's too big.\n\nMask_0:\n ## ##    ##   ##   ### ###     ##      #### ##   ### ###   ### ##   \n##   ##   ##   ##    ##  ##      ##     # ## ##    ##  ##    ##  ##  \n####      ##   ##    ##        ## ##      ##       ##        ##  ##  \n #####    ## # ##    ## ##     ##  ##     ##       ## ##     ## ##   \n    ###   # ### #    ##        ## ###     ##       ##        ## ##   \n##   ##    ## ##     ##  ##    ##  ##     ##       ##  ##    ##  ##  \n ## ##    ##   ##   ### ###   ###  ##    ####     ### ###   #### ##  \n                                                                     \n\n\nMask_1:\n  ##      ##   ##  \n   ##      ## ##   \n ## ##    # ### #  \n ##  ##   ## # ##  \n ## ###   ##   ##  \n ##  ##   ##   ##  \n###  ##   ##   ##  \n                   \n\n\nMask_2:\n#### ##   ###  ##     ####     ## ##   \n# ## ##    ##  ##      ##     ##   ##  \n  ##       ##  ##      ##     ####     \n  ##       ## ###      ##      #####   \n  ##       ##  ##      ##         ###  \n  ##       ##  ##      ##     ##   ##  \n ####     ###  ##     ####     ## ##   \n                                       \n"}
{"sentence": "It's intriguing that you are so smart at only 8 years old.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXQncyBpbnRyaWd1aW5nIHRoYXQgeW91IGFyZSBzbyBzbWFydCBhdCBvbmx5IDggeWVhcnMgb2xkLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVg'f vagevthvat gung lbh ner fb fzneg ng bayl 8 lrnef byq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIt'syay intriguingyay atthay ouyay areyay osay artsmay atyay onlyyay 8ay earsyay oldyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n17'5 1n7r1gu1ng 7h47 y0u 4r3 50 5m4r7 47 0nly 8 y34r5 0ld.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOy'd omytohiomh yjsy upi str dp d,sty sy pm;u 8 urstd p;f.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u0287's \u1d09u\u0287\u0279\u1d09\u0183n\u1d09u\u0183 \u0287\u0265\u0250\u0287 \u028eon \u0250\u0279\u01dd so s\u026f\u0250\u0279\u0287 \u0250\u0287 oul\u028e 8 \u028e\u01dd\u0250\u0279s olp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tI gniugirtni taht uoy era os trams ta ylno 8 sraey .dlo\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - its\n2. quixotic - that\n3. ephemeral - so\n4. mellifluous - only\n5. labyrinthine - smart\n\nSentence:\nserendipity intriguing quixotic you are ephemeral labyrinthine at mellifluous 8 years old.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-e4-'-d4 d2-d3-e4-c4-d2-b2-a5-d2-d3-b2 e4-c2-a1-e4 e5-e3-a5 a1-c4-e1 d4-e3 d4-c3-a1-c4-e4 a1-e4 e3-d3-b3-e5 8 e5-e1-a1-c4-d4 e3-b3-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIt's [MASK_2] that you are so [MASK_1] [MASK_0] only 8 years old.\n\nMask_0:\n  ##      #### ##  \n   ##     # ## ##  \n ## ##      ##     \n ##  ##     ##     \n ## ###     ##     \n ##  ##     ##     \n###  ##    ####    \n                   \n\n\nMask_1:\n ## ##    ##   ##     ##      ### ##    #### ##  \n##   ##    ## ##       ##      ##  ##   # ## ##  \n####      # ### #    ## ##     ##  ##     ##     \n #####    ## # ##    ##  ##    ## ##      ##     \n    ###   ##   ##    ## ###    ## ##      ##     \n##   ##   ##   ##    ##  ##    ##  ##     ##     \n ## ##    ##   ##   ###  ##   #### ##    ####    \n                                                 \n\n\nMask_2:\n  ####    ###  ##   #### ##   ### ##      ####     ## ##    ##  ###     ####    ###  ##    ## ##   \n   ##       ## ##   # ## ##    ##  ##      ##     ##   ##   ##   ##      ##       ## ##   ##   ##  \n   ##      # ## #     ##       ##  ##      ##     ##        ##   ##      ##      # ## #   ##       \n   ##      ## ##      ##       ## ##       ##     ##  ###   ##   ##      ##      ## ##    ##  ###  \n   ##      ##  ##     ##       ## ##       ##     ##   ##   ##   ##      ##      ##  ##   ##   ##  \n   ##      ##  ##     ##       ##  ##      ##     ##   ##   ##   ##      ##      ##  ##   ##   ##  \n  ####    ###  ##    ####     #### ##     ####     ## ##     ## ##      ####    ###  ##    ## ##   \n                                                                                                   \n"}
{"sentence": "The tape got stuck on my lips so I couldn't talk anymore.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIHRhcGUgZ290IHN0dWNrIG9uIG15IGxpcHMgc28gSSBjb3VsZG4ndCB0YWxrIGFueW1vcmUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur gncr tbg fghpx ba zl yvcf fb V pbhyqa'g gnyx nalzber.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay apetay otgay uckstay onyay myay ipslay osay Iyay ouldn'tcay alktay anymoreyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 74p3 g07 57uck 0n my l1p5 50 1 c0uldn'7 74lk 4nym0r3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr ys[r hpy dyivl pm ,u ;o[d dp O vpi;fm'y ys;l smu,ptr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd \u0287\u0250d\u01dd \u0183o\u0287 s\u0287n\u0254\u029e ou \u026f\u028e l\u1d09ds so I \u0254onlpu'\u0287 \u0287\u0250l\u029e \u0250u\u028e\u026fo\u0279\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT epat tog kcuts no ym spil os I t'ndluoc klat .eromyna\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - got\n2. labyrinthine - my\n3. ephemeral - the\n4. mellifluous - stuck\n5. serendipity - anymore\n\nSentence:\nephemeral tape quixotic mellifluous on labyrinthine lips so I couldn't talk anymore.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 e4-a1-a4-e1 b2-e3-e4 d4-e4-a5-c1-a3 e3-d3 c3-e5 b3-d2-a4-d4 d4-e3 d2 c1-e3-a5-b3-d1-d3-'-e4 e4-a1-b3-a3 a1-d3-e5-c3-e3-c4-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThe tape got stuck [MASK_0] my lips [MASK_1] I couldn't talk anymore.\n\nMask_0:\n ## ##    ###  ##  \n##   ##     ## ##  \n##   ##    # ## #  \n##   ##    ## ##   \n##   ##    ##  ##  \n##   ##    ##  ##  \n ## ##    ###  ##  \n                   \n\n\nMask_1:\n ## ##     ## ##   \n##   ##   ##   ##  \n####      ##   ##  \n #####    ##   ##  \n    ###   ##   ##  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n\n\nMask_2:\n ## ##     ## ##    ##  ###   ####      ### ##    ###  ##   #### ##  \n##   ##   ##   ##   ##   ##    ##        ##  ##     ## ##   # ## ##  \n##        ##   ##   ##   ##    ##        ##  ##    # ## #     ##     \n##        ##   ##   ##   ##    ##        ##  ##    ## ##      ##     \n##        ##   ##   ##   ##    ##        ##  ##    ##  ##     ##     \n##   ##   ##   ##   ##   ##    ##  ##    ##  ##    ##  ##     ##     \n ## ##     ## ##     ## ##    ### ###   ### ##    ###  ##    ####    \n                                                                     \n"}
{"sentence": "The pool was green and covered in gross-looking algae.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIHBvb2wgd2FzIGdyZWVuIGFuZCBjb3ZlcmVkIGluIGdyb3NzLWxvb2tpbmcgYWxnYWUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur cbby jnf terra naq pbirerq va tebff-ybbxvat nytnr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay oolpay asway eengray andyay overedcay inyay oss-lookinggray algaeyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 p00l w45 gr33n 4nd c0v3r3d 1n gr055-l00k1ng 4lg43.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr [pp; esd htrrm smf vpbrtrf om htpdd-;pplomh s;hsr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd dool \u028d\u0250s \u0183\u0279\u01dd\u01ddu \u0250up \u0254o\u028c\u01dd\u0279\u01ddp \u1d09u \u0183\u0279oss-loo\u029e\u1d09u\u0183 \u0250l\u0183\u0250\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT loop saw neerg dna derevoc ni gnikool-ssorg .eagla\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - was\n2. serendipity - algae\n3. quixotic - the\n4. mellifluous - grosslooking\n5. labyrinthine - in\n\nSentence:\nquixotic pool ephemeral green and covered labyrinthine mellifluous algae.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 a4-e3-e3-b3 c5-a1-d4 b2-c4-e1-e1-d3 a1-d3-d1 c1-e3-b5-e1-c4-e1-d1 d2-d3 b2-c4-e3-d4-d4-b3-e3-e3-a3-d2-d3-b2 a1-b3-b2-a1-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThe [MASK_0] [MASK_2] [MASK_1] and covered in gross-looking algae.\n\nMask_0:\n### ##     ## ##     ## ##    ####     \n ##  ##   ##   ##   ##   ##    ##      \n ##  ##   ##   ##   ##   ##    ##      \n ##  ##   ##   ##   ##   ##    ##      \n ## ##    ##   ##   ##   ##    ##      \n ##       ##   ##   ##   ##    ##  ##  \n####       ## ##     ## ##    ### ###  \n                                       \n\n\nMask_1:\n ## ##    ### ##    ### ###   ### ###   ###  ##  \n##   ##    ##  ##    ##  ##    ##  ##     ## ##  \n##         ##  ##    ##        ##        # ## #  \n##  ###    ## ##     ## ##     ## ##     ## ##   \n##   ##    ## ##     ##        ##        ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##    #### ##   ### ###   ### ###   ###  ##  \n                                                 \n\n\nMask_2:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n"}
{"sentence": "He needed a new helmet because his got smashed when he was riding his bike.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGUgbmVlZGVkIGEgbmV3IGhlbG1ldCBiZWNhdXNlIGhpcyBnb3Qgc21hc2hlZCB3aGVuIGhlIHdhcyByaWRpbmcgaGlzIGJpa2Uu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUr arrqrq n arj uryzrg orpnhfr uvf tbg fznfurq jura ur jnf evqvat uvf ovxr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neHay eedednay ayay ewnay elmethay ecausebay ishay otgay ashedsmay enwhay ehay asway idingray ishay ikebay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3 n33d3d 4 n3w h3lm37 b3c4u53 h15 g07 5m45h3d wh3n h3 w45 r1d1ng h15 b1k3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJr mrrfrf s mre jr;,ry nrvsidr jod hpy d,sdjrf ejrm jr esd tofomh jod nolr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd u\u01dd\u01ddp\u01ddp \u0250 u\u01dd\u028d \u0265\u01ddl\u026f\u01dd\u0287 q\u01dd\u0254\u0250ns\u01dd \u0265\u1d09s \u0183o\u0287 s\u026f\u0250s\u0265\u01ddp \u028d\u0265\u01ddu \u0265\u01dd \u028d\u0250s \u0279\u1d09p\u1d09u\u0183 \u0265\u1d09s q\u1d09\u029e\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neH dedeen a wen temleh esuaceb sih tog dehsams nehw eh saw gnidir sih .ekib\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - new\n2. ephemeral - when\n3. labyrinthine - smashed\n4. serendipity - got\n5. mellifluous - because\n\nSentence:\nHe needed a quixotic helmet mellifluous his serendipity labyrinthine ephemeral he was riding his bike.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1 d3-e1-e1-d1-e1-d1 a1 d3-e1-c5 c2-e1-b3-c3-e1-e4 b1-e1-c1-a1-a5-d4-e1 c2-d2-d4 b2-e3-e4 d4-c3-a1-d4-c2-e1-d1 c5-c2-e1-d3 c2-e1 c5-a1-d4 c4-d2-d1-d2-d3-b2 c2-d2-d4 b1-d2-a3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHe needed [MASK_0] new helmet because [MASK_1] got smashed when he was [MASK_2] [MASK_1] bike.\n\nMask_0:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_1:\n###  ##     ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ####     \n ## ###      ##      #####   \n ##  ##      ##         ###  \n ##  ##      ##     ##   ##  \n###  ##     ####     ## ##   \n                             \n\n\nMask_2:\n### ##      ####    ### ##      ####    ###  ##    ## ##   \n ##  ##      ##      ##  ##      ##       ## ##   ##   ##  \n ##  ##      ##      ##  ##      ##      # ## #   ##       \n ## ##       ##      ##  ##      ##      ## ##    ##  ###  \n ## ##       ##      ##  ##      ##      ##  ##   ##   ##  \n ##  ##      ##      ##  ##      ##      ##  ##   ##   ##  \n#### ##     ####    ### ##      ####    ###  ##    ## ##   \n                                                           \n"}
{"sentence": "In Australia, there is a store called PieFace which sells meat pies with smiley faces on them.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSW4gQXVzdHJhbGlhLCB0aGVyZSBpcyBhIHN0b3JlIGNhbGxlZCBQaWVGYWNlIHdoaWNoIHNlbGxzIG1lYXQgcGllcyB3aXRoIHNtaWxleSBmYWNlcyBvbiB0aGVtLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVa Nhfgenyvn, gurer vf n fgber pnyyrq CvrSnpr juvpu fryyf zrng cvrf jvgu fzvyrl snprf ba gurz.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nInyay Australiayay, erethay isyay ayay orestay alledcay ieFacePay ichwhay ellssay eatmay iespay ithway ileysmay acesfay onyay emthay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1n 4u57r4l14, 7h3r3 15 4 570r3 c4ll3d P13F4c3 wh1ch 53ll5 m347 p135 w17h 5m1l3y f4c35 0n 7h3m.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOm Sidyts;os, yjrtr od s dyptr vs;;rf [orGsvr ejovj dr;;d ,rsy [ord eoyj d,o;ru gsvrd pm yjr,.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIu \u2200ns\u0287\u0279\u0250l\u1d09\u0250, \u0287\u0265\u01dd\u0279\u01dd \u1d09s \u0250 s\u0287o\u0279\u01dd \u0254\u0250ll\u01ddp \u0500\u1d09\u01dd\u2132\u0250\u0254\u01dd \u028d\u0265\u1d09\u0254\u0265 s\u01ddlls \u026f\u01dd\u0250\u0287 d\u1d09\u01dds \u028d\u1d09\u0287\u0265 s\u026f\u1d09l\u01dd\u028e \u025f\u0250\u0254\u01dds ou \u0287\u0265\u01dd\u026f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnI ,ailartsuA ereht si a erots dellac ecaFeiP hcihw slles taem seip htiw yelims secaf no .meht\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - a\n2. labyrinthine - smiley\n3. serendipity - sells\n4. quixotic - called\n5. ephemeral - in\n\nSentence:\nephemeral Australia, there is mellifluous store quixotic PieFace which serendipity meat pies with labyrinthine faces on them.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d3 a1-a5-d4-e4-c4-a1-b3-d2-a1-, e4-c2-e1-c4-e1 d2-d4 a1 d4-e4-e3-c4-e1 c1-a1-b3-b3-e1-d1 a4-d2-e1-a2-a1-c1-e1 c5-c2-d2-c1-c2 d4-e1-b3-b3-d4 c3-e1-a1-e4 a4-d2-e1-d4 c5-d2-e4-c2 d4-c3-d2-b3-e1-e5 a2-a1-c1-e1-d4 e3-d3 e4-c2-e1-c3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIn Australia, there is a [MASK_1] called PieFace which sells meat pies with [MASK_2] [MASK_0] on them.\n\nMask_0:\n### ###     ##       ## ##    ### ###    ## ##   \n ##  ##      ##     ##   ##    ##  ##   ##   ##  \n ##        ## ##    ##         ##       ####     \n ## ##     ##  ##   ##         ## ##     #####   \n ##        ## ###   ##         ##           ###  \n ##        ##  ##   ##   ##    ##  ##   ##   ##  \n####      ###  ##    ## ##    ### ###    ## ##   \n                                                 \n\n\nMask_1:\n ## ##    #### ##    ## ##    ### ##    ### ###  \n##   ##   # ## ##   ##   ##    ##  ##    ##  ##  \n####        ##      ##   ##    ##  ##    ##      \n #####      ##      ##   ##    ## ##     ## ##   \n    ###     ##      ##   ##    ## ##     ##      \n##   ##     ##      ##   ##    ##  ##    ##  ##  \n ## ##     ####      ## ##    #### ##   ### ###  \n                                                 \n\n\nMask_2:\n ## ##    ##   ##     ####    ####      ### ###   ##  ##   \n##   ##    ## ##       ##      ##        ##  ##   ##  ##   \n####      # ### #      ##      ##        ##       ##  ##   \n #####    ## # ##      ##      ##        ## ##     ## ##   \n    ###   ##   ##      ##      ##        ##         ##     \n##   ##   ##   ##      ##      ##  ##    ##  ##     ##     \n ## ##    ##   ##     ####    ### ###   ### ###     ##     \n                                                           \n"}
{"sentence": "My dad told me that I was his favorite person in the whole wide world.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nTXkgZGFkIHRvbGQgbWUgdGhhdCBJIHdhcyBoaXMgZmF2b3JpdGUgcGVyc29uIGluIHRoZSB3aG9sZSB3aWRlIHdvcmxkLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nZl qnq gbyq zr gung V jnf uvf snibevgr crefba va gur jubyr jvqr jbeyq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nMyay adday oldtay emay atthay Iyay asway ishay avoritefay ersonpay inyay ethay olewhay ideway orldway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nMy d4d 70ld m3 7h47 1 w45 h15 f4v0r173 p3r50n 1n 7h3 wh0l3 w1d3 w0rld.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n,u fsf yp;f ,r yjsy O esd jod gsbptoyr [rtdpm om yjr ejp;r eofr ept;f.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nW\u028e p\u0250p \u0287olp \u026f\u01dd \u0287\u0265\u0250\u0287 I \u028d\u0250s \u0265\u1d09s \u025f\u0250\u028co\u0279\u1d09\u0287\u01dd d\u01dd\u0279sou \u1d09u \u0287\u0265\u01dd \u028d\u0265ol\u01dd \u028d\u1d09p\u01dd \u028do\u0279lp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyM dad dlot em taht I saw sih etirovaf nosrep ni eht elohw ediw .dlrow\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - in\n2. mellifluous - whole\n3. labyrinthine - me\n4. quixotic - dad\n5. serendipity - his\n\nSentence:\nMy quixotic told labyrinthine that I was serendipity favorite person ephemeral the mellifluous wide world.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc3-e5 d1-a1-d1 e4-e3-b3-d1 c3-e1 e4-c2-a1-e4 d2 c5-a1-d4 c2-d2-d4 a2-a1-b5-e3-c4-d2-e4-e1 a4-e1-c4-d4-e3-d3 d2-d3 e4-c2-e1 c5-c2-e3-b3-e1 c5-d2-d1-e1 c5-e3-c4-b3-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nMy dad told me that I was his favorite [MASK_1] in the [MASK_2] wide [MASK_0].\n\nMask_0:\n##   ##    ## ##    ### ##    ####      ### ##   \n##   ##   ##   ##    ##  ##    ##        ##  ##  \n##   ##   ##   ##    ##  ##    ##        ##  ##  \n## # ##   ##   ##    ## ##     ##        ##  ##  \n# ### #   ##   ##    ## ##     ##        ##  ##  \n ## ##    ##   ##    ##  ##    ##  ##    ##  ##  \n##   ##    ## ##    #### ##   ### ###   ### ##   \n                                                 \n\n\nMask_1:\n### ##    ### ###   ### ##     ## ##     ## ##    ###  ##  \n ##  ##    ##  ##    ##  ##   ##   ##   ##   ##     ## ##  \n ##  ##    ##        ##  ##   ####      ##   ##    # ## #  \n ##  ##    ## ##     ## ##     #####    ##   ##    ## ##   \n ## ##     ##        ## ##        ###   ##   ##    ##  ##  \n ##        ##  ##    ##  ##   ##   ##   ##   ##    ##  ##  \n####      ### ###   #### ##    ## ##     ## ##    ###  ##  \n                                                           \n\n\nMask_2:\n##   ##   ###  ##    ## ##    ####      ### ###  \n##   ##    ##  ##   ##   ##    ##        ##  ##  \n##   ##    ##  ##   ##   ##    ##        ##      \n## # ##    ## ###   ##   ##    ##        ## ##   \n# ### #    ##  ##   ##   ##    ##        ##      \n ## ##     ##  ##   ##   ##    ##  ##    ##  ##  \n##   ##   ###  ##    ## ##    ### ###   ### ###  \n                                                 \n"}
{"sentence": "She found an old piece of paper under the fridge that had writing all over it.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIGZvdW5kIGFuIG9sZCBwaWVjZSBvZiBwYXBlciB1bmRlciB0aGUgZnJpZGdlIHRoYXQgaGFkIHdyaXRpbmcgYWxsIG92ZXIgaXQu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur sbhaq na byq cvrpr bs cncre haqre gur sevqtr gung unq jevgvat nyy bire vg.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay oundfay anyay oldyay iecepay ofyay aperpay underyay ethay idgefray atthay adhay itingwray allyay overyay ityay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 f0und 4n 0ld p13c3 0f p4p3r und3r 7h3 fr1dg3 7h47 h4d wr171ng 4ll 0v3r 17.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr gpimf sm p;f [orvr pg [s[rt imfrt yjr gtofhr yjsy jsf etoyomh s;; pbrt oy.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd \u025fonup \u0250u olp d\u1d09\u01dd\u0254\u01dd o\u025f d\u0250d\u01dd\u0279 nup\u01dd\u0279 \u0287\u0265\u01dd \u025f\u0279\u1d09p\u0183\u01dd \u0287\u0265\u0250\u0287 \u0265\u0250p \u028d\u0279\u1d09\u0287\u1d09u\u0183 \u0250ll o\u028c\u01dd\u0279 \u1d09\u0287.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS dnuof na dlo eceip fo repap rednu eht egdirf taht dah gnitirw lla revo .ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - fridge\n2. serendipity - it\n3. ephemeral - found\n4. mellifluous - piece\n5. labyrinthine - old\n\nSentence:\nShe ephemeral an labyrinthine mellifluous of paper under the quixotic that had writing all over it.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 a2-e3-a5-d3-d1 a1-d3 e3-b3-d1 a4-d2-e1-c1-e1 e3-a2 a4-a1-a4-e1-c4 a5-d3-d1-e1-c4 e4-c2-e1 a2-c4-d2-d1-b2-e1 e4-c2-a1-e4 c2-a1-d1 c5-c4-d2-e4-d2-d3-b2 a1-b3-b3 e3-b5-e1-c4 d2-e4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] found an old piece of paper [MASK_2] the fridge [MASK_0] had writing all over it.\n\nMask_0:\n#### ##   ###  ##     ##      #### ##  \n# ## ##    ##  ##      ##     # ## ##  \n  ##       ##  ##    ## ##      ##     \n  ##       ## ###    ##  ##     ##     \n  ##       ##  ##    ## ###     ##     \n  ##       ##  ##    ##  ##     ##     \n ####     ###  ##   ###  ##    ####    \n                                       \n\n\nMask_1:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n\n\nMask_2:\n##  ###   ###  ##   ### ##    ### ###   ### ##   \n##   ##     ## ##    ##  ##    ##  ##    ##  ##  \n##   ##    # ## #    ##  ##    ##        ##  ##  \n##   ##    ## ##     ##  ##    ## ##     ## ##   \n##   ##    ##  ##    ##  ##    ##        ## ##   \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ##    ### ###   #### ##  \n                                                 \n"}
{"sentence": "In South Africa, there are more than three times as many lions in captivity as there are in the wild.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSW4gU291dGggQWZyaWNhLCB0aGVyZSBhcmUgbW9yZSB0aGFuIHRocmVlIHRpbWVzIGFzIG1hbnkgbGlvbnMgaW4gY2FwdGl2aXR5IGFzIHRoZXJlIGFyZSBpbiB0aGUgd2lsZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVa Fbhgu Nsevpn, gurer ner zber guna guerr gvzrf nf znal yvbaf va pncgvivgl nf gurer ner va gur jvyq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nInyay outhSay Africayay, erethay areyay oremay anthay eethray imestay asyay anymay ionslay inyay aptivitycay asyay erethay areyay inyay ethay ildway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1n 50u7h 4fr1c4, 7h3r3 4r3 m0r3 7h4n 7hr33 71m35 45 m4ny l10n5 1n c4p71v17y 45 7h3r3 4r3 1n 7h3 w1ld.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOm Dpiyj Sgtovs, yjrtr str ,ptr yjsm yjtrr yo,rd sd ,smu ;opmd om vs[yoboyu sd yjrtr str om yjr eo;f.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIu Son\u0287\u0265 \u2200\u025f\u0279\u1d09\u0254\u0250, \u0287\u0265\u01dd\u0279\u01dd \u0250\u0279\u01dd \u026fo\u0279\u01dd \u0287\u0265\u0250u \u0287\u0265\u0279\u01dd\u01dd \u0287\u1d09\u026f\u01dds \u0250s \u026f\u0250u\u028e l\u1d09ous \u1d09u \u0254\u0250d\u0287\u1d09\u028c\u1d09\u0287\u028e \u0250s \u0287\u0265\u01dd\u0279\u01dd \u0250\u0279\u01dd \u1d09u \u0287\u0265\u01dd \u028d\u1d09lp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnI htuoS ,acirfA ereht era erom naht eerht semit sa ynam snoil ni ytivitpac sa ereht era ni eht .dliw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - there\n2. mellifluous - in\n3. ephemeral - many\n4. labyrinthine - are\n5. serendipity - wild\n\nSentence:\nIn South Africa, quixotic labyrinthine more than three times as ephemeral lions mellifluous captivity as quixotic labyrinthine mellifluous the wild.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d3 d4-e3-a5-e4-c2 a1-a2-c4-d2-c1-a1-, e4-c2-e1-c4-e1 a1-c4-e1 c3-e3-c4-e1 e4-c2-a1-d3 e4-c2-c4-e1-e1 e4-d2-c3-e1-d4 a1-d4 c3-a1-d3-e5 b3-d2-e3-d3-d4 d2-d3 c1-a1-a4-e4-d2-b5-d2-e4-e5 a1-d4 e4-c2-e1-c4-e1 a1-c4-e1 d2-d3 e4-c2-e1 c5-d2-b3-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIn South Africa, there [MASK_2] more than three times [MASK_1] many [MASK_0] in captivity [MASK_1] there [MASK_2] in the wild.\n\nMask_0:\n####        ####     ## ##    ###  ##    ## ##   \n ##          ##     ##   ##     ## ##   ##   ##  \n ##          ##     ##   ##    # ## #   ####     \n ##          ##     ##   ##    ## ##     #####   \n ##          ##     ##   ##    ##  ##       ###  \n ##  ##      ##     ##   ##    ##  ##   ##   ##  \n### ###     ####     ## ##    ###  ##    ## ##   \n                                                 \n\n\nMask_1:\n  ##       ## ##   \n   ##     ##   ##  \n ## ##    ####     \n ##  ##    #####   \n ## ###       ###  \n ##  ##   ##   ##  \n###  ##    ## ##   \n                   \n\n\nMask_2:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n"}
{"sentence": "She desperately wanted an order of Kung Pao chicken.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIGRlc3BlcmF0ZWx5IHdhbnRlZCBhbiBvcmRlciBvZiBLdW5nIFBhbyBjaGlja2VuLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur qrfcrengryl jnagrq na beqre bs Xhat Cnb puvpxra.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay esperatelyday antedway anyay orderyay ofyay ungKay aoPay ickenchay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 d35p3r473ly w4n73d 4n 0rd3r 0f Kung P40 ch1ck3n.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr frd[rtsyr;u esmyrf sm ptfrt pg Limh [sp vjovlrm.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd p\u01ddsd\u01dd\u0279\u0250\u0287\u01ddl\u028e \u028d\u0250u\u0287\u01ddp \u0250u o\u0279p\u01dd\u0279 o\u025f \ua4d8nu\u0183 \u0500\u0250o \u0254\u0265\u1d09\u0254\u029e\u01ddu.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS yletarepsed detnaw na redro fo gnuK oaP .nekcihc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - kung\n2. ephemeral - she\n3. serendipity - chicken\n4. quixotic - desperately\n5. mellifluous - order\n\nSentence:\nephemeral quixotic wanted an mellifluous of labyrinthine Pao chicken.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 d1-e1-d4-a4-e1-c4-a1-e4-e1-b3-e5 c5-a1-d3-e4-e1-d1 a1-d3 e3-c4-d1-e1-c4 e3-a2 a3-a5-d3-b2 a4-a1-e3 c1-c2-d2-c1-a3-e1-d3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nShe [MASK_2] wanted [MASK_1] [MASK_0] of Kung Pao chicken.\n\nMask_0:\n ## ##    ### ##    ### ##    ### ###   ### ##   \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n##   ##    ##  ##    ##  ##    ##        ##  ##  \n##   ##    ## ##     ##  ##    ## ##     ## ##   \n##   ##    ## ##     ##  ##    ##        ## ##   \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##    #### ##   ### ##    ### ###   #### ##  \n                                                 \n\n\nMask_1:\n  ##      ###  ##  \n   ##       ## ##  \n ## ##     # ## #  \n ##  ##    ## ##   \n ## ###    ##  ##  \n ##  ##    ##  ##  \n###  ##   ###  ##  \n                   \n\n\nMask_2:\n### ##    ### ###    ## ##    ### ##    ### ###   ### ##      ##      #### ##   ### ###   ####      ##  ##   \n ##  ##    ##  ##   ##   ##    ##  ##    ##  ##    ##  ##      ##     # ## ##    ##  ##    ##       ##  ##   \n ##  ##    ##       ####       ##  ##    ##        ##  ##    ## ##      ##       ##        ##       ##  ##   \n ##  ##    ## ##     #####     ##  ##    ## ##     ## ##     ##  ##     ##       ## ##     ##        ## ##   \n ##  ##    ##           ###    ## ##     ##        ## ##     ## ###     ##       ##        ##         ##     \n ##  ##    ##  ##   ##   ##    ##        ##  ##    ##  ##    ##  ##     ##       ##  ##    ##  ##     ##     \n### ##    ### ###    ## ##    ####      ### ###   #### ##   ###  ##    ####     ### ###   ### ###     ##     \n                                                                                                             \n"}
{"sentence": "She would have sold her soul for a bowl of spaghetti bolognese.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIHdvdWxkIGhhdmUgc29sZCBoZXIgc291bCBmb3IgYSBib3dsIG9mIHNwYWdoZXR0aSBib2xvZ25lc2Uu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur jbhyq unir fbyq ure fbhy sbe n objy bs fcnturggv obybtarfr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay ouldway avehay oldsay erhay oulsay orfay ayay owlbay ofyay aghettispay olognesebay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 w0uld h4v3 50ld h3r 50ul f0r 4 b0wl 0f 5p4gh3771 b0l0gn353.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr epi;f jsbr dp;f jrt dpi; gpt s npe; pg d[shjryyo np;phmrdr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd \u028donlp \u0265\u0250\u028c\u01dd solp \u0265\u01dd\u0279 sonl \u025fo\u0279 \u0250 qo\u028dl o\u025f sd\u0250\u0183\u0265\u01dd\u0287\u0287\u1d09 qolo\u0183u\u01dds\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS dluow evah dlos reh luos rof a lwob fo ittehgaps .esengolob\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - sold\n2. ephemeral - have\n3. mellifluous - spaghetti\n4. labyrinthine - her\n5. serendipity - soul\n\nSentence:\nShe would ephemeral quixotic labyrinthine serendipity for a bowl of mellifluous bolognese.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 c5-e3-a5-b3-d1 c2-a1-b5-e1 d4-e3-b3-d1 c2-e1-c4 d4-e3-a5-b3 a2-e3-c4 a1 b1-e3-c5-b3 e3-a2 d4-a4-a1-b2-c2-e1-e4-e4-d2 b1-e3-b3-e3-b2-d3-e1-d4-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nShe [MASK_1] have [MASK_2] her soul for a [MASK_0] of spaghetti bolognese.\n\nMask_0:\n### ##     ## ##    ##   ##   ####     \n ##  ##   ##   ##   ##   ##    ##      \n ##  ##   ##   ##   ##   ##    ##      \n ## ##    ##   ##   ## # ##    ##      \n ##  ##   ##   ##   # ### #    ##      \n ##  ##   ##   ##    ## ##     ##  ##  \n### ##     ## ##    ##   ##   ### ###  \n                                       \n\n\nMask_1:\n##   ##    ## ##    ##  ###   ####      ### ##   \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n## # ##   ##   ##   ##   ##    ##        ##  ##  \n# ### #   ##   ##   ##   ##    ##        ##  ##  \n ## ##    ##   ##   ##   ##    ##  ##    ##  ##  \n##   ##    ## ##     ## ##    ### ###   ### ##   \n                                                 \n\n\nMask_2:\n ## ##     ## ##    ####      ### ##   \n##   ##   ##   ##    ##        ##  ##  \n####      ##   ##    ##        ##  ##  \n #####    ##   ##    ##        ##  ##  \n    ###   ##   ##    ##        ##  ##  \n##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##    ### ###   ### ##   \n                                       \n"}
{"sentence": "A double date is fun if you want to hangout with everyone.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQSBkb3VibGUgZGF0ZSBpcyBmdW4gaWYgeW91IHdhbnQgdG8gaGFuZ291dCB3aXRoIGV2ZXJ5b25lLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nN qbhoyr qngr vf sha vs lbh jnag gb unatbhg jvgu rirelbar.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAyay oubleday ateday isyay unfay ifyay ouyay antway otay angouthay ithway everyoneyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4 d0ubl3 d473 15 fun 1f y0u w4n7 70 h4ng0u7 w17h 3v3ry0n3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nS fpin;r fsyr od gim og upi esmy yp jsmhpiy eoyj rbrtupmr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200 ponql\u01dd p\u0250\u0287\u01dd \u1d09s \u025fnu \u1d09\u025f \u028eon \u028d\u0250u\u0287 \u0287o \u0265\u0250u\u0183on\u0287 \u028d\u1d09\u0287\u0265 \u01dd\u028c\u01dd\u0279\u028eou\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nA elbuod etad si nuf fi uoy tnaw ot tuognah htiw .enoyreve\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - you\n2. quixotic - hangout\n3. ephemeral - double\n4. labyrinthine - want\n5. serendipity - with\n\nSentence:\nA ephemeral date is fun if mellifluous labyrinthine to quixotic serendipity everyone.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1 d1-e3-a5-b1-b3-e1 d1-a1-e4-e1 d2-d4 a2-a5-d3 d2-a2 e5-e3-a5 c5-a1-d3-e4 e4-e3 c2-a1-d3-b2-e3-a5-e4 c5-d2-e4-c2 e1-b5-e1-c4-e5-e3-d3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nA double date is fun if you want [MASK_0] [MASK_1] [MASK_2] everyone.\n\nMask_0:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_1:\n###  ##     ##      ###  ##    ## ##     ## ##    ##  ###   #### ##  \n ##  ##      ##       ## ##   ##   ##   ##   ##   ##   ##   # ## ##  \n ##  ##    ## ##     # ## #   ##        ##   ##   ##   ##     ##     \n ## ###    ##  ##    ## ##    ##  ###   ##   ##   ##   ##     ##     \n ##  ##    ## ###    ##  ##   ##   ##   ##   ##   ##   ##     ##     \n ##  ##    ##  ##    ##  ##   ##   ##   ##   ##   ##   ##     ##     \n###  ##   ###  ##   ###  ##    ## ##     ## ##     ## ##     ####    \n                                                                     \n\n\nMask_2:\n##   ##     ####    #### ##   ###  ##  \n##   ##      ##     # ## ##    ##  ##  \n##   ##      ##       ##       ##  ##  \n## # ##      ##       ##       ## ###  \n# ### #      ##       ##       ##  ##  \n ## ##       ##       ##       ##  ##  \n##   ##     ####     ####     ###  ##  \n                                       \n"}
{"sentence": "She liked the wallpaper in her room, but her mom insisted they remove it and put up paint instead.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIGxpa2VkIHRoZSB3YWxscGFwZXIgaW4gaGVyIHJvb20sIGJ1dCBoZXIgbW9tIGluc2lzdGVkIHRoZXkgcmVtb3ZlIGl0IGFuZCBwdXQgdXAgcGFpbnQgaW5zdGVhZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur yvxrq gur jnyycncre va ure ebbz, ohg ure zbz vafvfgrq gurl erzbir vg naq chg hc cnvag vafgrnq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay ikedlay ethay allpaperway inyay erhay oomray, utbay erhay ommay insistedyay eythay emoveray ityay andyay utpay upyay aintpay insteadyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 l1k3d 7h3 w4llp4p3r 1n h3r r00m, bu7 h3r m0m 1n51573d 7h3y r3m0v3 17 4nd pu7 up p41n7 1n5734d.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr ;olrf yjr es;;[s[rt om jrt tpp,, niy jrt ,p, omdodyrf yjru tr,pbr oy smf [iy i[ [somy omdyrsf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd l\u1d09\u029e\u01ddp \u0287\u0265\u01dd \u028d\u0250lld\u0250d\u01dd\u0279 \u1d09u \u0265\u01dd\u0279 \u0279oo\u026f, qn\u0287 \u0265\u01dd\u0279 \u026fo\u026f \u1d09us\u1d09s\u0287\u01ddp \u0287\u0265\u01dd\u028e \u0279\u01dd\u026fo\u028c\u01dd \u1d09\u0287 \u0250up dn\u0287 nd d\u0250\u1d09u\u0287 \u1d09us\u0287\u01dd\u0250p.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS dekil eht repapllaw ni reh ,moor tub reh mom detsisni yeht evomer ti dna tup pu tniap .daetsni\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - put\n2. serendipity - her\n3. quixotic - wallpaper\n4. ephemeral - they\n5. mellifluous - she\n\nSentence:\nmellifluous liked the quixotic in serendipity room, but serendipity mom insisted ephemeral remove it and labyrinthine up paint instead.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 b3-d2-a3-e1-d1 e4-c2-e1 c5-a1-b3-b3-a4-a1-a4-e1-c4 d2-d3 c2-e1-c4 c4-e3-e3-c3-, b1-a5-e4 c2-e1-c4 c3-e3-c3 d2-d3-d4-d2-d4-e4-e1-d1 e4-c2-e1-e5 c4-e1-c3-e3-b5-e1 d2-e4 a1-d3-d1 a4-a5-e4 a5-a4 a4-a1-d2-d3-e4 d2-d3-d4-e4-e1-a1-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] liked the wallpaper in [MASK_1] room, but [MASK_1] [MASK_2] insisted they remove it and put up paint instead.\n\nMask_0:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n\n\nMask_1:\n###  ##   ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##        ##  ##  \n ## ###    ## ##     ## ##   \n ##  ##    ##        ## ##   \n ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   #### ##  \n                             \n\n\nMask_2:\n##   ##    ## ##    ##   ##  \n ## ##    ##   ##    ## ##   \n# ### #   ##   ##   # ### #  \n## # ##   ##   ##   ## # ##  \n##   ##   ##   ##   ##   ##  \n##   ##   ##   ##   ##   ##  \n##   ##    ## ##    ##   ##  \n                             \n"}
{"sentence": "People always have justifications for hurting others, but they are rarely good justifications.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nUGVvcGxlIGFsd2F5cyBoYXZlIGp1c3RpZmljYXRpb25zIGZvciBodXJ0aW5nIG90aGVycywgYnV0IHRoZXkgYXJlIHJhcmVseSBnb29kIGp1c3RpZmljYXRpb25zLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nCrbcyr nyjnlf unir whfgvsvpngvbaf sbe uhegvat bguref, ohg gurl ner eneryl tbbq whfgvsvpngvbaf.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neoplePay alwaysyay avehay ustificationsjay orfay urtinghay othersyay, utbay eythay areyay arelyray oodgay ustificationsjay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nP30pl3 4lw4y5 h4v3 ju571f1c4710n5 f0r hur71ng 07h3r5, bu7 7h3y 4r3 r4r3ly g00d ju571f1c4710n5.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n[rp[;r s;esud jsbr kidyogovsyopmd gpt jityomh pyjrtd, niy yjru str tstr;u hppf kidyogovsyopmd.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0500\u01ddodl\u01dd \u0250l\u028d\u0250\u028es \u0265\u0250\u028c\u01dd \u027ens\u0287\u1d09\u025f\u1d09\u0254\u0250\u0287\u1d09ous \u025fo\u0279 \u0265n\u0279\u0287\u1d09u\u0183 o\u0287\u0265\u01dd\u0279s, qn\u0287 \u0287\u0265\u01dd\u028e \u0250\u0279\u01dd \u0279\u0250\u0279\u01ddl\u028e \u0183oop \u027ens\u0287\u1d09\u025f\u1d09\u0254\u0250\u0287\u1d09ous.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nelpoeP syawla evah snoitacifitsuj rof gnitruh ,srehto tub yeht era ylerar doog .snoitacifitsuj\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - good\n2. labyrinthine - for\n3. mellifluous - justifications\n4. ephemeral - hurting\n5. serendipity - they\n\nSentence:\nPeople always have justifications labyrinthine ephemeral others, but serendipity are rarely quixotic justifications.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na4-e1-e3-a4-b3-e1 a1-b3-c5-a1-e5-d4 c2-a1-b5-e1 e2-a5-d4-e4-d2-a2-d2-c1-a1-e4-d2-e3-d3-d4 a2-e3-c4 c2-a5-c4-e4-d2-d3-b2 e3-e4-c2-e1-c4-d4-, b1-a5-e4 e4-c2-e1-e5 a1-c4-e1 c4-a1-c4-e1-b3-e5 b2-e3-e3-d1 e2-a5-d4-e4-d2-a2-d2-c1-a1-e4-d2-e3-d3-d4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nPeople always have justifications for hurting [MASK_1], but [MASK_2] are [MASK_0] good justifications.\n\nMask_0:\n### ##      ##      ### ##    ### ###   ####      ##  ##   \n ##  ##      ##      ##  ##    ##  ##    ##       ##  ##   \n ##  ##    ## ##     ##  ##    ##        ##       ##  ##   \n ## ##     ##  ##    ## ##     ## ##     ##        ## ##   \n ## ##     ## ###    ## ##     ##        ##         ##     \n ##  ##    ##  ##    ##  ##    ##  ##    ##  ##     ##     \n#### ##   ###  ##   #### ##   ### ###   ### ###     ##     \n                                                           \n\n\nMask_1:\n ## ##    #### ##   ###  ##   ### ###   ### ##     ## ##   \n##   ##   # ## ##    ##  ##    ##  ##    ##  ##   ##   ##  \n##   ##     ##       ##  ##    ##        ##  ##   ####     \n##   ##     ##       ## ###    ## ##     ## ##     #####   \n##   ##     ##       ##  ##    ##        ## ##        ###  \n##   ##     ##       ##  ##    ##  ##    ##  ##   ##   ##  \n ## ##     ####     ###  ##   ### ###   #### ##    ## ##   \n                                                           \n\n\nMask_2:\n#### ##   ###  ##   ### ###   ##  ##   \n# ## ##    ##  ##    ##  ##   ##  ##   \n  ##       ##  ##    ##       ##  ##   \n  ##       ## ###    ## ##     ## ##   \n  ##       ##  ##    ##         ##     \n  ##       ##  ##    ##  ##     ##     \n ####     ###  ##   ### ###     ##     \n                                       \n"}
{"sentence": "When we started out in 2008, we wrote down a list of people that we wanted to hire, then went out and hired them.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hlbiB3ZSBzdGFydGVkIG91dCBpbiAyMDA4LCB3ZSB3cm90ZSBkb3duIGEgbGlzdCBvZiBwZW9wbGUgdGhhdCB3ZSB3YW50ZWQgdG8gaGlyZSwgdGhlbiB3ZW50IG91dCBhbmQgaGlyZWQgdGhlbS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJura jr fgnegrq bhg va 2008, jr jebgr qbja n yvfg bs crbcyr gung jr jnagrq gb uver, gura jrag bhg naq uverq gurz.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nenWhay eway artedstay outyay inyay 2008ay, eway otewray ownday ayay istlay ofyay eoplepay atthay eway antedway otay irehay, enthay entway outyay andyay iredhay emthay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh3n w3 574r73d 0u7 1n 2008, w3 wr073 d0wn 4 l157 0f p30pl3 7h47 w3 w4n73d 70 h1r3, 7h3n w3n7 0u7 4nd h1r3d 7h3m.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjrm er dystyrf piy om 2008, er etpyr fpem s ;ody pg [rp[;r yjsy er esmyrf yp jotr, yjrm ermy piy smf jotrf yjr,.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u01ddu \u028d\u01dd s\u0287\u0250\u0279\u0287\u01ddp on\u0287 \u1d09u 2008, \u028d\u01dd \u028d\u0279o\u0287\u01dd po\u028du \u0250 l\u1d09s\u0287 o\u025f d\u01ddodl\u01dd \u0287\u0265\u0250\u0287 \u028d\u01dd \u028d\u0250u\u0287\u01ddp \u0287o \u0265\u1d09\u0279\u01dd, \u0287\u0265\u01ddu \u028d\u01ddu\u0287 on\u0287 \u0250up \u0265\u1d09\u0279\u01ddp \u0287\u0265\u01dd\u026f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnehW ew detrats tuo ni ,8002 ew etorw nwod a tsil fo elpoep taht ew detnaw ot ,erih neht tnew tuo dna derih .meht\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - when\n2. mellifluous - of\n3. serendipity - went\n4. quixotic - hired\n5. labyrinthine - that\n\nSentence:\nephemeral we started out in 2008, we wrote down a list mellifluous people labyrinthine we wanted to hire, then serendipity out and quixotic them.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e1-d3 c5-e1 d4-e4-a1-c4-e4-e1-d1 e3-a5-e4 d2-d3 2-0-0-8-, c5-e1 c5-c4-e3-e4-e1 d1-e3-c5-d3 a1 b3-d2-d4-e4 e3-a2 a4-e1-e3-a4-b3-e1 e4-c2-a1-e4 c5-e1 c5-a1-d3-e4-e1-d1 e4-e3 c2-d2-c4-e1-, e4-c2-e1-d3 c5-e1-d3-e4 e3-a5-e4 a1-d3-d1 c2-d2-c4-e1-d1 e4-c2-e1-c3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhen [MASK_1] started out in 2008, [MASK_1] wrote down a [MASK_0] of people that [MASK_1] wanted [MASK_2] hire, then went out and hired them.\n\nMask_0:\n####        ####     ## ##    #### ##  \n ##          ##     ##   ##   # ## ##  \n ##          ##     ####        ##     \n ##          ##      #####      ##     \n ##          ##         ###     ##     \n ##  ##      ##     ##   ##     ##     \n### ###     ####     ## ##     ####    \n                                       \n\n\nMask_1:\n##   ##   ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n## # ##    ## ##   \n# ### #    ##      \n ## ##     ##  ##  \n##   ##   ### ###  \n                   \n\n\nMask_2:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n"}
{"sentence": "He thought pickles were a special type of vegetable, and was shocked to realize they were just pickled cucumbers.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGUgdGhvdWdodCBwaWNrbGVzIHdlcmUgYSBzcGVjaWFsIHR5cGUgb2YgdmVnZXRhYmxlLCBhbmQgd2FzIHNob2NrZWQgdG8gcmVhbGl6ZSB0aGV5IHdlcmUganVzdCBwaWNrbGVkIGN1Y3VtYmVycy4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUr gubhtug cvpxyrf jrer n fcrpvny glcr bs irtrgnoyr, naq jnf fubpxrq gb ernyvmr gurl jrer whfg cvpxyrq phphzoref.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neHay oughtthay icklespay ereway ayay ecialspay etypay ofyay egetablevay, andyay asway ockedshay otay ealizeray eythay ereway ustjay ickledpay ucumberscay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3 7h0ugh7 p1ckl35 w3r3 4 5p3c14l 7yp3 0f v3g374bl3, 4nd w45 5h0ck3d 70 r34l1z3 7h3y w3r3 ju57 p1ckl3d cucumb3r5.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJr yjpihjy [ovl;rd ertr s d[rvos; yu[r pg brhrysn;r, smf esd djpvlrf yp trs;oxr yjru ertr kidy [ovl;rf vivi,nrtd.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd \u0287\u0265on\u0183\u0265\u0287 d\u1d09\u0254\u029el\u01dds \u028d\u01dd\u0279\u01dd \u0250 sd\u01dd\u0254\u1d09\u0250l \u0287\u028ed\u01dd o\u025f \u028c\u01dd\u0183\u01dd\u0287\u0250ql\u01dd, \u0250up \u028d\u0250s s\u0265o\u0254\u029e\u01ddp \u0287o \u0279\u01dd\u0250l\u1d09z\u01dd \u0287\u0265\u01dd\u028e \u028d\u01dd\u0279\u01dd \u027ens\u0287 d\u1d09\u0254\u029el\u01ddp \u0254n\u0254n\u026fq\u01dd\u0279s.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\neH thguoht selkcip erew a laiceps epyt fo ,elbategev dna saw dekcohs ot ezilaer yeht erew tsuj delkcip .srebmucuc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - they\n2. labyrinthine - cucumbers\n3. ephemeral - and\n4. mellifluous - to\n5. quixotic - were\n\nSentence:\nHe thought pickles quixotic a special type of vegetable, ephemeral was shocked mellifluous realize serendipity quixotic just pickled cucumbers.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1 e4-c2-e3-a5-b2-c2-e4 a4-d2-c1-a3-b3-e1-d4 c5-e1-c4-e1 a1 d4-a4-e1-c1-d2-a1-b3 e4-e5-a4-e1 e3-a2 b5-e1-b2-e1-e4-a1-b1-b3-e1-, a1-d3-d1 c5-a1-d4 d4-c2-e3-c1-a3-e1-d1 e4-e3 c4-e1-a1-b3-d2-z-e1 e4-c2-e1-e5 c5-e1-c4-e1 e2-a5-d4-e4 a4-d2-c1-a3-b3-e1-d1 c1-a5-c1-a5-c3-b1-e1-c4-d4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHe [MASK_2] [MASK_1] were [MASK_0] special type of vegetable, and was shocked to realize they were just pickled cucumbers.\n\nMask_0:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_1:\n### ##      ####     ## ##    ##  ###   ####      ### ###    ## ##   \n ##  ##      ##     ##   ##   ##  ##     ##        ##  ##   ##   ##  \n ##  ##      ##     ##        ## ##      ##        ##       ####     \n ##  ##      ##     ##        ## ##      ##        ## ##     #####   \n ## ##       ##     ##        ## ###     ##        ##           ###  \n ##          ##     ##   ##   ##  ##     ##  ##    ##  ##   ##   ##  \n####        ####     ## ##    ##  ###   ### ###   ### ###    ## ##   \n                                                                     \n\n\nMask_2:\n#### ##   ###  ##    ## ##    ##  ###    ## ##    ###  ##   #### ##  \n# ## ##    ##  ##   ##   ##   ##   ##   ##   ##    ##  ##   # ## ##  \n  ##       ##  ##   ##   ##   ##   ##   ##         ##  ##     ##     \n  ##       ## ###   ##   ##   ##   ##   ##  ###    ## ###     ##     \n  ##       ##  ##   ##   ##   ##   ##   ##   ##    ##  ##     ##     \n  ##       ##  ##   ##   ##   ##   ##   ##   ##    ##  ##     ##     \n ####     ###  ##    ## ##     ## ##     ## ##    ###  ##    ####    \n                                                                     \n"}
{"sentence": "Yes, philosophically speaking, all tweets are bad, but to be fully human is to rebel against this fact. To send our terrible tweets out into the universe anyway.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nWWVzLCBwaGlsb3NvcGhpY2FsbHkgc3BlYWtpbmcsIGFsbCB0d2VldHMgYXJlIGJhZCwgYnV0IHRvIGJlIGZ1bGx5IGh1bWFuIGlzIHRvIHJlYmVsIGFnYWluc3QgdGhpcyBmYWN0LiBUbyBzZW5kIG91ciB0ZXJyaWJsZSB0d2VldHMgb3V0IGludG8gdGhlIHVuaXZlcnNlIGFueXdheS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLrf, cuvybfbcuvpnyyl fcrnxvat, nyy gjrrgf ner onq, ohg gb or shyyl uhzna vf gb erory ntnvafg guvf snpg. Gb fraq bhe greevoyr gjrrgf bhg vagb gur havirefr naljnl.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nesYay, ilosophicallyphay eakingspay, allyay eetstway areyay adbay, utbay otay ebay ullyfay umanhay isyay otay ebelray againstyay isthay actfay. oTay endsay ouryay erribletay eetstway outyay intoyay ethay universeyay anywayyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY35, ph1l050ph1c4lly 5p34k1ng, 4ll 7w3375 4r3 b4d, bu7 70 b3 fully hum4n 15 70 r3b3l 4g41n57 7h15 f4c7. 70 53nd 0ur 73rr1bl3 7w3375 0u7 1n70 7h3 un1v3r53 4nyw4y.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUrd, [jo;pdp[jovs;;u d[rslomh, s;; yerryd str nsf, niy yp nr gi;;u ji,sm od yp trnr; shsomdy yjod gsvy. Yp drmf pit yrtton;r yerryd piy omyp yjr imobrtdr smuesu.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144\u01dds, d\u0265\u1d09losod\u0265\u1d09\u0254\u0250ll\u028e sd\u01dd\u0250\u029e\u1d09u\u0183, \u0250ll \u0287\u028d\u01dd\u01dd\u0287s \u0250\u0279\u01dd q\u0250p, qn\u0287 \u0287o q\u01dd \u025fnll\u028e \u0265n\u026f\u0250u \u1d09s \u0287o \u0279\u01ddq\u01ddl \u0250\u0183\u0250\u1d09us\u0287 \u0287\u0265\u1d09s \u025f\u0250\u0254\u0287. \u22a5o s\u01ddup on\u0279 \u0287\u01dd\u0279\u0279\u1d09ql\u01dd \u0287\u028d\u01dd\u01dd\u0287s on\u0287 \u1d09u\u0287o \u0287\u0265\u01dd nu\u1d09\u028c\u01dd\u0279s\u01dd \u0250u\u028e\u028d\u0250\u028e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\n,seY yllacihposolihp ,gnikaeps lla steewt era ,dab tub ot eb ylluf namuh si ot leber tsniaga siht .tcaf oT dnes ruo elbirret steewt tuo otni eht esrevinu .yawyna\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - against\n2. ephemeral - tweets\n3. quixotic - rebel\n4. labyrinthine - our\n5. serendipity - to\n\nSentence:\nYes, philosophically speaking, all ephemeral are bad, but to be fully human is to quixotic mellifluous this fact. serendipity send labyrinthine terrible ephemeral out into the universe anyway.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e1-d4-, a4-c2-d2-b3-e3-d4-e3-a4-c2-d2-c1-a1-b3-b3-e5 d4-a4-e1-a1-a3-d2-d3-b2-, a1-b3-b3 e4-c5-e1-e1-e4-d4 a1-c4-e1 b1-a1-d1-, b1-a5-e4 e4-e3 b1-e1 a2-a5-b3-b3-e5 c2-a5-c3-a1-d3 d2-d4 e4-e3 c4-e1-b1-e1-b3 a1-b2-a1-d2-d3-d4-e4 e4-c2-d2-d4 a2-a1-c1-e4-. e4-e3 d4-e1-d3-d1 e3-a5-c4 e4-e1-c4-c4-d2-b1-b3-e1 e4-c5-e1-e1-e4-d4 e3-a5-e4 d2-d3-e4-e3 e4-c2-e1 a5-d3-d2-b5-e1-c4-d4-e1 a1-d3-e5-c5-a1-e5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYes, philosophically speaking, all tweets [MASK_2] bad, but to be fully human is to rebel against this fact. To send our [MASK_0] tweets out into the [MASK_1] anyway.\n\nMask_0:\n#### ##   ### ###   ### ##    ### ##      ####    ### ##    ####      ### ###  \n# ## ##    ##  ##    ##  ##    ##  ##      ##      ##  ##    ##        ##  ##  \n  ##       ##        ##  ##    ##  ##      ##      ##  ##    ##        ##      \n  ##       ## ##     ## ##     ## ##       ##      ## ##     ##        ## ##   \n  ##       ##        ## ##     ## ##       ##      ##  ##    ##        ##      \n  ##       ##  ##    ##  ##    ##  ##      ##      ##  ##    ##  ##    ##  ##  \n ####     ### ###   #### ##   #### ##     ####    ### ##    ### ###   ### ###  \n                                                                               \n\n\nMask_1:\n##  ###   ###  ##     ####    ### ###   ### ###   ### ##     ## ##    ### ###  \n##   ##     ## ##      ##      ##  ##    ##  ##    ##  ##   ##   ##    ##  ##  \n##   ##    # ## #      ##      ##  ##    ##        ##  ##   ####       ##      \n##   ##    ## ##       ##      ##  ##    ## ##     ## ##     #####     ## ##   \n##   ##    ##  ##      ##      ### ##    ##        ## ##        ###    ##      \n##   ##    ##  ##      ##       ###      ##  ##    ##  ##   ##   ##    ##  ##  \n ## ##    ###  ##     ####       ##     ### ###   #### ##    ## ##    ### ###  \n                                                                               \n\n\nMask_2:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n"}
{"sentence": "She thought she was very special, and not like other girls.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIHRob3VnaHQgc2hlIHdhcyB2ZXJ5IHNwZWNpYWwsIGFuZCBub3QgbGlrZSBvdGhlciBnaXJscy4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur gubhtug fur jnf irel fcrpvny, naq abg yvxr bgure tveyf.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay oughtthay eshay asway eryvay ecialspay, andyay otnay ikelay otheryay irlsgay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 7h0ugh7 5h3 w45 v3ry 5p3c14l, 4nd n07 l1k3 07h3r g1rl5.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr yjpihjy djr esd brtu d[rvos;, smf mpy ;olr pyjrt hot;d.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd \u0287\u0265on\u0183\u0265\u0287 s\u0265\u01dd \u028d\u0250s \u028c\u01dd\u0279\u028e sd\u01dd\u0254\u1d09\u0250l, \u0250up uo\u0287 l\u1d09\u029e\u01dd o\u0287\u0265\u01dd\u0279 \u0183\u1d09\u0279ls.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS thguoht ehs saw yrev ,laiceps dna ton ekil rehto .slrig\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - she\n2. serendipity - other\n3. mellifluous - thought\n4. ephemeral - was\n5. quixotic - very\n\nSentence:\nShe mellifluous labyrinthine ephemeral quixotic special, and not like serendipity girls.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 e4-c2-e3-a5-b2-c2-e4 d4-c2-e1 c5-a1-d4 b5-e1-c4-e5 d4-a4-e1-c1-d2-a1-b3-, a1-d3-d1 d3-e3-e4 b3-d2-a3-e1 e3-e4-c2-e1-c4 b2-d2-c4-b3-d4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nShe thought she [MASK_1] very [MASK_0], and not like [MASK_2] girls.\n\nMask_0:\n ## ##    ### ##    ### ###    ## ##      ####      ##      ####     \n##   ##    ##  ##    ##  ##   ##   ##      ##        ##      ##      \n####       ##  ##    ##       ##           ##      ## ##     ##      \n #####     ##  ##    ## ##    ##           ##      ##  ##    ##      \n    ###    ## ##     ##       ##           ##      ## ###    ##      \n##   ##    ##        ##  ##   ##   ##      ##      ##  ##    ##  ##  \n ## ##    ####      ### ###    ## ##      ####    ###  ##   ### ###  \n                                                                     \n\n\nMask_1:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n\n\nMask_2:\n ## ##    #### ##   ###  ##   ### ###   ### ##   \n##   ##   # ## ##    ##  ##    ##  ##    ##  ##  \n##   ##     ##       ##  ##    ##        ##  ##  \n##   ##     ##       ## ###    ## ##     ## ##   \n##   ##     ##       ##  ##    ##        ## ##   \n##   ##     ##       ##  ##    ##  ##    ##  ##  \n ## ##     ####     ###  ##   ### ###   #### ##  \n                                                 \n"}
{"sentence": "I appreciate the opportunity I've had here, and I hope you guys have a great summer.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBhcHByZWNpYXRlIHRoZSBvcHBvcnR1bml0eSBJJ3ZlIGhhZCBoZXJlLCBhbmQgSSBob3BlIHlvdSBndXlzIGhhdmUgYSBncmVhdCBzdW1tZXIu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV nccerpvngr gur bccbeghavgl V'ir unq urer, naq V ubcr lbh thlf unir n terng fhzzre.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay appreciateyay ethay opportunityyay I'veyay adhay erehay, andyay Iyay opehay ouyay uysgay avehay ayay eatgray ummersay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 4ppr3c1473 7h3 0pp0r7un17y 1'v3 h4d h3r3, 4nd 1 h0p3 y0u guy5 h4v3 4 gr347 5umm3r.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO s[[trvosyr yjr p[[ptyimoyu O'br jsf jrtr, smf O jp[r upi hiud jsbr s htrsy di,,rt.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI \u0250dd\u0279\u01dd\u0254\u1d09\u0250\u0287\u01dd \u0287\u0265\u01dd oddo\u0279\u0287nu\u1d09\u0287\u028e I'\u028c\u01dd \u0265\u0250p \u0265\u01dd\u0279\u01dd, \u0250up I \u0265od\u01dd \u028eon \u0183n\u028es \u0265\u0250\u028c\u01dd \u0250 \u0183\u0279\u01dd\u0250\u0287 sn\u026f\u026f\u01dd\u0279.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI etaicerppa eht ytinutroppo ev'I dah ,ereh dna I epoh uoy syug evah a taerg .remmus\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - the\n2. ephemeral - i\n3. labyrinthine - guys\n4. serendipity - appreciate\n5. mellifluous - here\n\nSentence:\nephemeral serendipity quixotic opportunity ephemeral've had here, and ephemeral hope you labyrinthine have a great summer.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 a1-a4-a4-c4-e1-c1-d2-a1-e4-e1 e4-c2-e1 e3-a4-a4-e3-c4-e4-a5-d3-d2-e4-e5 d2-'-b5-e1 c2-a1-d1 c2-e1-c4-e1-, a1-d3-d1 d2 c2-e3-a4-e1 e5-e3-a5 b2-a5-e5-d4 c2-a1-b5-e1 a1 b2-c4-e1-a1-e4 d4-a5-c3-c3-e1-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] appreciate the opportunity [MASK_1]'ve had here, and [MASK_1] hope [MASK_0] guys have a great [MASK_2].\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n\n\nMask_2:\n ## ##    ##  ###   ##   ##   ##   ##   ### ###   ### ##   \n##   ##   ##   ##    ## ##     ## ##     ##  ##    ##  ##  \n####      ##   ##   # ### #   # ### #    ##        ##  ##  \n #####    ##   ##   ## # ##   ## # ##    ## ##     ## ##   \n    ###   ##   ##   ##   ##   ##   ##    ##        ## ##   \n##   ##   ##   ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##    ##   ##   ##   ##   ### ###   #### ##  \n                                                           \n"}
{"sentence": "She told them what she wanted to do with her life, and they laughed.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIHRvbGQgdGhlbSB3aGF0IHNoZSB3YW50ZWQgdG8gZG8gd2l0aCBoZXIgbGlmZSwgYW5kIHRoZXkgbGF1Z2hlZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur gbyq gurz jung fur jnagrq gb qb jvgu ure yvsr, naq gurl ynhturq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay oldtay emthay atwhay eshay antedway otay oday ithway erhay ifelay, andyay eythay aughedlay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 70ld 7h3m wh47 5h3 w4n73d 70 d0 w17h h3r l1f3, 4nd 7h3y l4ugh3d.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr yp;f yjr, ejsy djr esmyrf yp fp eoyj jrt ;ogr, smf yjru ;sihjrf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd \u0287olp \u0287\u0265\u01dd\u026f \u028d\u0265\u0250\u0287 s\u0265\u01dd \u028d\u0250u\u0287\u01ddp \u0287o po \u028d\u1d09\u0287\u0265 \u0265\u01dd\u0279 l\u1d09\u025f\u01dd, \u0250up \u0287\u0265\u01dd\u028e l\u0250n\u0183\u0265\u01ddp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS dlot meht tahw ehs detnaw ot od htiw reh ,efil dna yeht .dehgual\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - to\n2. ephemeral - they\n3. quixotic - them\n4. labyrinthine - and\n5. mellifluous - with\n\nSentence:\nShe told quixotic what she wanted serendipity do mellifluous her life, labyrinthine ephemeral laughed.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 e4-e3-b3-d1 e4-c2-e1-c3 c5-c2-a1-e4 d4-c2-e1 c5-a1-d3-e4-e1-d1 e4-e3 d1-e3 c5-d2-e4-c2 c2-e1-c4 b3-d2-a2-e1-, a1-d3-d1 e4-c2-e1-e5 b3-a1-a5-b2-c2-e1-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nShe [MASK_2] [MASK_1] what she wanted to do [MASK_0] her life, and they laughed.\n\nMask_0:\n##   ##     ####    #### ##   ###  ##  \n##   ##      ##     # ## ##    ##  ##  \n##   ##      ##       ##       ##  ##  \n## # ##      ##       ##       ## ###  \n# ### #      ##       ##       ##  ##  \n ## ##       ##       ##       ##  ##  \n##   ##     ####     ####     ###  ##  \n                                       \n\n\nMask_1:\n#### ##   ###  ##   ### ###   ##   ##  \n# ## ##    ##  ##    ##  ##    ## ##   \n  ##       ##  ##    ##       # ### #  \n  ##       ## ###    ## ##    ## # ##  \n  ##       ##  ##    ##       ##   ##  \n  ##       ##  ##    ##  ##   ##   ##  \n ####     ###  ##   ### ###   ##   ##  \n                                       \n\n\nMask_2:\n#### ##    ## ##    ####      ### ##   \n# ## ##   ##   ##    ##        ##  ##  \n  ##      ##   ##    ##        ##  ##  \n  ##      ##   ##    ##        ##  ##  \n  ##      ##   ##    ##        ##  ##  \n  ##      ##   ##    ##  ##    ##  ##  \n ####      ## ##    ### ###   ### ##   \n                                       \n"}
{"sentence": "A ninety-year-old man finished the Athens marathon last year.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQSBuaW5ldHkteWVhci1vbGQgbWFuIGZpbmlzaGVkIHRoZSBBdGhlbnMgbWFyYXRob24gbGFzdCB5ZWFyLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nN avargl-lrne-byq zna svavfurq gur Nguraf znenguba ynfg lrne.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAyay inety-year-oldnay anmay inishedfay ethay Athensyay arathonmay astlay earyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4 n1n37y-y34r-0ld m4n f1n15h3d 7h3 47h3n5 m4r47h0n l457 y34r.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nS momryu-urst-p;f ,sm gomodjrf yjr Syjrmd ,stsyjpm ;sdy urst.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200 u\u1d09u\u01dd\u0287\u028e-\u028e\u01dd\u0250\u0279-olp \u026f\u0250u \u025f\u1d09u\u1d09s\u0265\u01ddp \u0287\u0265\u01dd \u2200\u0287\u0265\u01ddus \u026f\u0250\u0279\u0250\u0287\u0265ou l\u0250s\u0287 \u028e\u01dd\u0250\u0279.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nA dlo-raey-ytenin nam dehsinif eht snehtA nohtaram tsal .raey\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - ninetyyearold\n2. ephemeral - last\n3. serendipity - finished\n4. quixotic - a\n5. mellifluous - athens\n\nSentence:\nquixotic labyrinthine man serendipity the mellifluous marathon ephemeral year.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1 d3-d2-d3-e1-e4-e5-e5-e1-a1-c4-e3-b3-d1 c3-a1-d3 a2-d2-d3-d2-d4-c2-e1-d1 e4-c2-e1 a1-e4-c2-e1-d3-d4 c3-a1-c4-a1-e4-c2-e3-d3 b3-a1-d4-e4 e5-e1-a1-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nA ninety-year-old [MASK_1] finished [MASK_0] Athens [MASK_2] last year.\n\nMask_0:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n\n\nMask_1:\n##   ##     ##      ###  ##  \n ## ##       ##       ## ##  \n# ### #    ## ##     # ## #  \n## # ##    ##  ##    ## ##   \n##   ##    ## ###    ##  ##  \n##   ##    ##  ##    ##  ##  \n##   ##   ###  ##   ###  ##  \n                             \n\n\nMask_2:\n##   ##     ##      ### ##      ##      #### ##   ###  ##    ## ##    ###  ##  \n ## ##       ##      ##  ##      ##     # ## ##    ##  ##   ##   ##     ## ##  \n# ### #    ## ##     ##  ##    ## ##      ##       ##  ##   ##   ##    # ## #  \n## # ##    ##  ##    ## ##     ##  ##     ##       ## ###   ##   ##    ## ##   \n##   ##    ## ###    ## ##     ## ###     ##       ##  ##   ##   ##    ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##     ##       ##  ##   ##   ##    ##  ##  \n##   ##   ###  ##   #### ##   ###  ##    ####     ###  ##    ## ##    ###  ##  \n                                                                               \n"}
{"sentence": "I don't know why he bought instant coffee when there was a free espresso machine around the corner which was constantly stocked.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSSBkb24ndCBrbm93IHdoeSBoZSBib3VnaHQgaW5zdGFudCBjb2ZmZWUgd2hlbiB0aGVyZSB3YXMgYSBmcmVlIGVzcHJlc3NvIG1hY2hpbmUgYXJvdW5kIHRoZSBjb3JuZXIgd2hpY2ggd2FzIGNvbnN0YW50bHkgc3RvY2tlZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nV qba'g xabj jul ur obhtug vafgnag pbssrr jura gurer jnf n serr rfcerffb znpuvar nebhaq gur pbeare juvpu jnf pbafgnagyl fgbpxrq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIyay on'tday owknay whyay ehay oughtbay instantyay offeecay enwhay erethay asway ayay eefray espressoyay achinemay aroundyay ethay ornercay ichwhay asway onstantlycay ockedstay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1 d0n'7 kn0w why h3 b0ugh7 1n574n7 c0ff33 wh3n 7h3r3 w45 4 fr33 35pr3550 m4ch1n3 4r0und 7h3 c0rn3r wh1ch w45 c0n574n7ly 570ck3d.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nO fpm'y lmpe eju jr npihjy omdysmy vpggrr ejrm yjrtr esd s gtrr rd[trddp ,svjomr stpimf yjr vptmrt ejovj esd vpmdysmy;u dypvlrf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI pou'\u0287 \u029euo\u028d \u028d\u0265\u028e \u0265\u01dd qon\u0183\u0265\u0287 \u1d09us\u0287\u0250u\u0287 \u0254o\u025f\u025f\u01dd\u01dd \u028d\u0265\u01ddu \u0287\u0265\u01dd\u0279\u01dd \u028d\u0250s \u0250 \u025f\u0279\u01dd\u01dd \u01ddsd\u0279\u01ddsso \u026f\u0250\u0254\u0265\u1d09u\u01dd \u0250\u0279onup \u0287\u0265\u01dd \u0254o\u0279u\u01dd\u0279 \u028d\u0265\u1d09\u0254\u0265 \u028d\u0250s \u0254ous\u0287\u0250u\u0287l\u028e s\u0287o\u0254\u029e\u01ddp.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nI t'nod wonk yhw eh thguob tnatsni eeffoc nehw ereht saw a eerf osserpse enihcam dnuora eht renroc hcihw saw yltnatsnoc .dekcots\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - why\n2. labyrinthine - coffee\n3. ephemeral - was\n4. quixotic - he\n5. serendipity - the\n\nSentence:\nI don't know mellifluous quixotic bought instant labyrinthine when there ephemeral a free espresso machine around serendipity corner which ephemeral constantly stocked.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2 d1-e3-d3-'-e4 a3-d3-e3-c5 c5-c2-e5 c2-e1 b1-e3-a5-b2-c2-e4 d2-d3-d4-e4-a1-d3-e4 c1-e3-a2-a2-e1-e1 c5-c2-e1-d3 e4-c2-e1-c4-e1 c5-a1-d4 a1 a2-c4-e1-e1 e1-d4-a4-c4-e1-d4-d4-e3 c3-a1-c1-c2-d2-d3-e1 a1-c4-e3-a5-d3-d1 e4-c2-e1 c1-e3-c4-d3-e1-c4 c5-c2-d2-c1-c2 c5-a1-d4 c1-e3-d3-d4-e4-a1-d3-e4-b3-e5 d4-e4-e3-c1-a3-e1-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] don't [MASK_1] why he bought instant [MASK_0] when there was a free espresso machine around the corner which was constantly stocked.\n\nMask_0:\n ## ##     ## ##    ### ###   ### ###   ### ###   ### ###  \n##   ##   ##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n##        ##   ##    ##        ##        ##        ##      \n##        ##   ##    ## ##     ## ##     ## ##     ## ##   \n##        ##   ##    ##        ##        ##        ##      \n##   ##   ##   ##    ##        ##        ##  ##    ##  ##  \n ## ##     ## ##    ####      ####      ### ###   ### ###  \n                                                           \n\n\nMask_1:\n##  ###   ###  ##    ## ##    ##   ##  \n##  ##      ## ##   ##   ##   ##   ##  \n## ##      # ## #   ##   ##   ##   ##  \n## ##      ## ##    ##   ##   ## # ##  \n## ###     ##  ##   ##   ##   # ### #  \n##  ##     ##  ##   ##   ##    ## ##   \n##  ###   ###  ##    ## ##    ##   ##  \n                                       \n\n\nMask_2:\n  ####   \n   ##    \n   ##    \n   ##    \n   ##    \n   ##    \n  ####   \n         \n"}
{"sentence": "As luck would have it I found a pen at the bottom of my bag.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXMgbHVjayB3b3VsZCBoYXZlIGl0IEkgZm91bmQgYSBwZW4gYXQgdGhlIGJvdHRvbSBvZiBteSBiYWcu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNf yhpx jbhyq unir vg V sbhaq n cra ng gur obggbz bs zl ont.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAsyay ucklay ouldway avehay ityay Iyay oundfay ayay enpay atyay ethay ottombay ofyay myay agbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n45 luck w0uld h4v3 17 1 f0und 4 p3n 47 7h3 b0770m 0f my b4g.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nSd ;ivl epi;f jsbr oy O gpimf s [rm sy yjr npyyp, pg ,u nsh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200s ln\u0254\u029e \u028donlp \u0265\u0250\u028c\u01dd \u1d09\u0287 I \u025fonup \u0250 d\u01ddu \u0250\u0287 \u0287\u0265\u01dd qo\u0287\u0287o\u026f o\u025f \u026f\u028e q\u0250\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsA kcul dluow evah ti I dnuof a nep ta eht mottob fo ym .gab\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - at\n2. ephemeral - of\n3. quixotic - found\n4. serendipity - it\n5. mellifluous - a\n\nSentence:\nAs luck would have serendipity I quixotic mellifluous pen labyrinthine the bottom ephemeral my bag.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-d4 b3-a5-c1-a3 c5-e3-a5-b3-d1 c2-a1-b5-e1 d2-e4 d2 a2-e3-a5-d3-d1 a1 a4-e1-d3 a1-e4 e4-c2-e1 b1-e3-e4-e4-e3-c3 e3-a2 c3-e5 b1-a1-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAs luck would have it I found a pen at [MASK_2] bottom [MASK_1] my [MASK_0].\n\nMask_0:\n### ##      ##       ## ##   \n ##  ##      ##     ##   ##  \n ##  ##    ## ##    ##       \n ## ##     ##  ##   ##  ###  \n ##  ##    ## ###   ##   ##  \n ##  ##    ##  ##   ##   ##  \n### ##    ###  ##    ## ##   \n                             \n\n\nMask_1:\n ## ##    ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n##   ##    ## ##   \n##   ##    ##      \n##   ##    ##      \n ## ##    ####     \n                   \n\n\nMask_2:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n"}
{"sentence": "On top of all that, her parents told her yesterday that they were getting a divorce.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nT24gdG9wIG9mIGFsbCB0aGF0LCBoZXIgcGFyZW50cyB0b2xkIGhlciB5ZXN0ZXJkYXkgdGhhdCB0aGV5IHdlcmUgZ2V0dGluZyBhIGRpdm9yY2Uu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nBa gbc bs nyy gung, ure cneragf gbyq ure lrfgreqnl gung gurl jrer trggvat n qvibepr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nOnyay optay ofyay allyay atthay, erhay arentspay oldtay erhay esterdayyay atthay eythay ereway ettinggay ayay ivorceday.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n0n 70p 0f 4ll 7h47, h3r p4r3n75 70ld h3r y3573rd4y 7h47 7h3y w3r3 g3771ng 4 d1v0rc3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nPm yp[ pg s;; yjsy, jrt [strmyd yp;f jrt urdyrtfsu yjsy yjru ertr hryyomh s fobptvr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nOu \u0287od o\u025f \u0250ll \u0287\u0265\u0250\u0287, \u0265\u01dd\u0279 d\u0250\u0279\u01ddu\u0287s \u0287olp \u0265\u01dd\u0279 \u028e\u01dds\u0287\u01dd\u0279p\u0250\u028e \u0287\u0265\u0250\u0287 \u0287\u0265\u01dd\u028e \u028d\u01dd\u0279\u01dd \u0183\u01dd\u0287\u0287\u1d09u\u0183 \u0250 p\u1d09\u028co\u0279\u0254\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnO pot fo lla ,taht reh stnerap dlot reh yadretsey taht yeht erew gnitteg a .ecrovid\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - that\n2. ephemeral - that\n3. serendipity - yesterday\n4. mellifluous - told\n5. quixotic - her\n\nSentence:\nOn top of all labyrinthine, quixotic parents mellifluous quixotic serendipity labyrinthine they were getting a divorce.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne3-d3 e4-e3-a4 e3-a2 a1-b3-b3 e4-c2-a1-e4-, c2-e1-c4 a4-a1-c4-e1-d3-e4-d4 e4-e3-b3-d1 c2-e1-c4 e5-e1-d4-e4-e1-c4-d1-a1-e5 e4-c2-a1-e4 e4-c2-e1-e5 c5-e1-c4-e1 b2-e1-e4-e4-d2-d3-b2 a1 d1-d2-b5-e3-c4-c1-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nOn [MASK_2] of all [MASK_0], [MASK_1] parents told [MASK_1] yesterday [MASK_0] they were getting a divorce.\n\nMask_0:\n#### ##   ###  ##     ##      #### ##  \n# ## ##    ##  ##      ##     # ## ##  \n  ##       ##  ##    ## ##      ##     \n  ##       ## ###    ##  ##     ##     \n  ##       ##  ##    ## ###     ##     \n  ##       ##  ##    ##  ##     ##     \n ####     ###  ##   ###  ##    ####    \n                                       \n\n\nMask_1:\n###  ##   ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##        ##  ##  \n ## ###    ## ##     ## ##   \n ##  ##    ##        ## ##   \n ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   #### ##  \n                             \n\n\nMask_2:\n#### ##    ## ##    ### ##   \n# ## ##   ##   ##    ##  ##  \n  ##      ##   ##    ##  ##  \n  ##      ##   ##    ##  ##  \n  ##      ##   ##    ## ##   \n  ##      ##   ##    ##      \n ####      ## ##    ####     \n                             \n"}
{"sentence": "When she heard the sirens, she knew something was seriously wrong.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hlbiBzaGUgaGVhcmQgdGhlIHNpcmVucywgc2hlIGtuZXcgc29tZXRoaW5nIHdhcyBzZXJpb3VzbHkgd3Jvbmcu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJura fur urneq gur fveraf, fur xarj fbzrguvat jnf frevbhfyl jebat.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nenWhay eshay eardhay ethay irenssay, eshay ewknay omethingsay asway eriouslysay ongwray.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh3n 5h3 h34rd 7h3 51r3n5, 5h3 kn3w 50m37h1ng w45 53r10u5ly wr0ng.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjrm djr jrstf yjr dotrmd, djr lmre dp,ryjomh esd drtopid;u etpmh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u01ddu s\u0265\u01dd \u0265\u01dd\u0250\u0279p \u0287\u0265\u01dd s\u1d09\u0279\u01ddus, s\u0265\u01dd \u029eu\u01dd\u028d so\u026f\u01dd\u0287\u0265\u1d09u\u0183 \u028d\u0250s s\u01dd\u0279\u1d09onsl\u028e \u028d\u0279ou\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnehW ehs draeh eht ,sneris ehs wenk gnihtemos saw ylsuoires .gnorw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - she\n2. serendipity - sirens\n3. ephemeral - heard\n4. quixotic - knew\n5. mellifluous - was\n\nSentence:\nWhen labyrinthine ephemeral the sirens, labyrinthine quixotic something mellifluous seriously wrong.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e1-d3 d4-c2-e1 c2-e1-a1-c4-d1 e4-c2-e1 d4-d2-c4-e1-d3-d4-, d4-c2-e1 a3-d3-e1-c5 d4-e3-c3-e1-e4-c2-d2-d3-b2 c5-a1-d4 d4-e1-c4-d2-e3-a5-d4-b3-e5 c5-c4-e3-d3-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhen she heard the [MASK_1], she knew [MASK_2] was seriously [MASK_0].\n\nMask_0:\n##   ##   ### ##     ## ##    ###  ##    ## ##   \n##   ##    ##  ##   ##   ##     ## ##   ##   ##  \n##   ##    ##  ##   ##   ##    # ## #   ##       \n## # ##    ## ##    ##   ##    ## ##    ##  ###  \n# ### #    ## ##    ##   ##    ##  ##   ##   ##  \n ## ##     ##  ##   ##   ##    ##  ##   ##   ##  \n##   ##   #### ##    ## ##    ###  ##    ## ##   \n                                                 \n\n\nMask_1:\n ## ##      ####    ### ##    ### ###   ###  ##    ## ##   \n##   ##      ##      ##  ##    ##  ##     ## ##   ##   ##  \n####         ##      ##  ##    ##        # ## #   ####     \n #####       ##      ## ##     ## ##     ## ##     #####   \n    ###      ##      ## ##     ##        ##  ##       ###  \n##   ##      ##      ##  ##    ##  ##    ##  ##   ##   ##  \n ## ##      ####    #### ##   ### ###   ###  ##    ## ##   \n                                                           \n\n\nMask_2:\n ## ##     ## ##    ##   ##   ### ###   #### ##   ###  ##     ####    ###  ##    ## ##   \n##   ##   ##   ##    ## ##     ##  ##   # ## ##    ##  ##      ##       ## ##   ##   ##  \n####      ##   ##   # ### #    ##         ##       ##  ##      ##      # ## #   ##       \n #####    ##   ##   ## # ##    ## ##      ##       ## ###      ##      ## ##    ##  ###  \n    ###   ##   ##   ##   ##    ##         ##       ##  ##      ##      ##  ##   ##   ##  \n##   ##   ##   ##   ##   ##    ##  ##     ##       ##  ##      ##      ##  ##   ##   ##  \n ## ##     ## ##    ##   ##   ### ###    ####     ###  ##     ####    ###  ##    ## ##   \n                                                                                         \n"}
{"sentence": "She had a big scar on her knee from falling off her bike as a kid.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIGhhZCBhIGJpZyBzY2FyIG9uIGhlciBrbmVlIGZyb20gZmFsbGluZyBvZmYgaGVyIGJpa2UgYXMgYSBraWQu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur unq n ovt fpne ba ure xarr sebz snyyvat bss ure ovxr nf n xvq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay adhay ayay igbay arscay onyay erhay eeknay omfray allingfay offyay erhay ikebay asyay ayay idkay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 h4d 4 b1g 5c4r 0n h3r kn33 fr0m f4ll1ng 0ff h3r b1k3 45 4 k1d.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr jsf s noh dvst pm jrt lmrr gtp, gs;;omh pgg jrt nolr sd s lof.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd \u0265\u0250p \u0250 q\u1d09\u0183 s\u0254\u0250\u0279 ou \u0265\u01dd\u0279 \u029eu\u01dd\u01dd \u025f\u0279o\u026f \u025f\u0250ll\u1d09u\u0183 o\u025f\u025f \u0265\u01dd\u0279 q\u1d09\u029e\u01dd \u0250s \u0250 \u029e\u1d09p.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS dah a gib racs no reh eenk morf gnillaf ffo reh ekib sa a .dik\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - a\n2. quixotic - on\n3. labyrinthine - falling\n4. mellifluous - bike\n5. ephemeral - as\n\nSentence:\nShe had serendipity big scar quixotic her knee from labyrinthine off her mellifluous ephemeral serendipity kid.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 c2-a1-d1 a1 b1-d2-b2 d4-c1-a1-c4 e3-d3 c2-e1-c4 a3-d3-e1-e1 a2-c4-e3-c3 a2-a1-b3-b3-d2-d3-b2 e3-a2-a2 c2-e1-c4 b1-d2-a3-e1 a1-d4 a1 a3-d2-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] had a big scar on [MASK_1] knee from falling off [MASK_1] bike as a kid.\n\nMask_0:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n\n\nMask_1:\n###  ##   ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##        ##  ##  \n ## ###    ## ##     ## ##   \n ##  ##    ##        ## ##   \n ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   #### ##  \n                             \n\n\nMask_2:\n###  ##   ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##        ##  ##  \n ## ###    ## ##     ## ##   \n ##  ##    ##        ## ##   \n ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   #### ##  \n                             \n"}
{"sentence": "The door slammed down on my hand, and I screamed like a little baby.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhlIGRvb3Igc2xhbW1lZCBkb3duIG9uIG15IGhhbmQsIGFuZCBJIHNjcmVhbWVkIGxpa2UgYSBsaXR0bGUgYmFieS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGur qbbe fynzzrq qbja ba zl unaq, naq V fpernzrq yvxr n yvggyr onol.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neThay oorday ammedslay ownday onyay myay andhay, andyay Iyay eamedscray ikelay ayay ittlelay abybay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h3 d00r 5l4mm3d d0wn 0n my h4nd, 4nd 1 5cr34m3d l1k3 4 l177l3 b4by.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjr fppt d;s,,rf fpem pm ,u jsmf, smf O dvtrs,rf ;olr s ;oyy;r nsnu.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u01dd poo\u0279 sl\u0250\u026f\u026f\u01ddp po\u028du ou \u026f\u028e \u0265\u0250up, \u0250up I s\u0254\u0279\u01dd\u0250\u026f\u01ddp l\u1d09\u029e\u01dd \u0250 l\u1d09\u0287\u0287l\u01dd q\u0250q\u028e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehT rood demmals nwod no ym ,dnah dna I demaercs ekil a elttil .ybab\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - slammed\n2. ephemeral - door\n3. mellifluous - like\n4. quixotic - and\n5. serendipity - my\n\nSentence:\nThe ephemeral labyrinthine down on serendipity hand, quixotic I screamed mellifluous a little baby.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-e1 d1-e3-e3-c4 d4-b3-a1-c3-c3-e1-d1 d1-e3-c5-d3 e3-d3 c3-e5 c2-a1-d3-d1-, a1-d3-d1 d2 d4-c1-c4-e1-a1-c3-e1-d1 b3-d2-a3-e1 a1 b3-d2-e4-e4-b3-e1 b1-a1-b1-e5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] slammed down on my hand, [MASK_0] I screamed like a little baby.\n\nMask_0:\n  ##      ###  ##   ### ##   \n   ##       ## ##    ##  ##  \n ## ##     # ## #    ##  ##  \n ##  ##    ## ##     ##  ##  \n ## ###    ##  ##    ##  ##  \n ##  ##    ##  ##    ##  ##  \n###  ##   ###  ##   ### ##   \n                             \n\n\nMask_1:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n\n\nMask_2:\n### ##     ## ##     ## ##    ### ##   \n ##  ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ##  ##  \n### ##     ## ##     ## ##    #### ##  \n                                       \n"}
{"sentence": "She lied on her resume and said she had experience live-tweeting on Twitter when in fact she had never used social media in her life.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nU2hlIGxpZWQgb24gaGVyIHJlc3VtZSBhbmQgc2FpZCBzaGUgaGFkIGV4cGVyaWVuY2UgbGl2ZS10d2VldGluZyBvbiBUd2l0dGVyIHdoZW4gaW4gZmFjdCBzaGUgaGFkIG5ldmVyIHVzZWQgc29jaWFsIG1lZGlhIGluIGhlciBsaWZlLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFur yvrq ba ure erfhzr naq fnvq fur unq rkcrevrapr yvir-gjrrgvat ba Gjvggre jura va snpg fur unq arire hfrq fbpvny zrqvn va ure yvsr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neShay iedlay onyay erhay esumeray andyay aidsay eshay adhay experienceyay ive-tweetinglay onyay itterTway enwhay inyay actfay eshay adhay evernay usedyay ocialsay ediamay inyay erhay ifelay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5h3 l13d 0n h3r r35um3 4nd 541d 5h3 h4d 3xp3r13nc3 l1v3-7w3371ng 0n 7w1773r wh3n 1n f4c7 5h3 h4d n3v3r u53d 50c14l m3d14 1n h3r l1f3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDjr ;orf pm jrt trdi,r smf dsof djr jsf rc[rtormvr ;obr-yerryomh pm Yeoyyrt ejrm om gsvy djr jsf mrbrt idrf dpvos; ,rfos om jrt ;ogr.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u0265\u01dd l\u1d09\u01ddp ou \u0265\u01dd\u0279 \u0279\u01ddsn\u026f\u01dd \u0250up s\u0250\u1d09p s\u0265\u01dd \u0265\u0250p \u01ddxd\u01dd\u0279\u1d09\u01ddu\u0254\u01dd l\u1d09\u028c\u01dd-\u0287\u028d\u01dd\u01dd\u0287\u1d09u\u0183 ou \u22a5\u028d\u1d09\u0287\u0287\u01dd\u0279 \u028d\u0265\u01ddu \u1d09u \u025f\u0250\u0254\u0287 s\u0265\u01dd \u0265\u0250p u\u01dd\u028c\u01dd\u0279 ns\u01ddp so\u0254\u1d09\u0250l \u026f\u01ddp\u1d09\u0250 \u1d09u \u0265\u01dd\u0279 l\u1d09\u025f\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nehS deil no reh emuser dna dias ehs dah ecneirepxe gniteewt-evil no rettiwT nehw ni tcaf ehs dah reven desu laicos aidem ni reh .efil\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - had\n2. mellifluous - she\n3. labyrinthine - experience\n4. serendipity - on\n5. ephemeral - twitter\n\nSentence:\nShe lied serendipity her resume and said mellifluous quixotic labyrinthine live-tweeting serendipity ephemeral when in fact mellifluous quixotic never used social media in her life.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-c2-e1 b3-d2-e1-d1 e3-d3 c2-e1-c4 c4-e1-d4-a5-c3-e1 a1-d3-d1 d4-a1-d2-d1 d4-c2-e1 c2-a1-d1 e1-d5-a4-e1-c4-d2-e1-d3-c1-e1 b3-d2-b5-e1-e4-c5-e1-e1-e4-d2-d3-b2 e3-d3 e4-c5-d2-e4-e4-e1-c4 c5-c2-e1-d3 d2-d3 a2-a1-c1-e4 d4-c2-e1 c2-a1-d1 d3-e1-b5-e1-c4 a5-d4-e1-d1 d4-e3-c1-d2-a1-b3 c3-e1-d1-d2-a1 d2-d3 c2-e1-c4 b3-d2-a2-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] on her resume [MASK_1] said she had experience live-tweeting on Twitter when in fact she had never used social media in her life.\n\nMask_0:\n####        ####    ### ###   ### ##   \n ##          ##      ##  ##    ##  ##  \n ##          ##      ##        ##  ##  \n ##          ##      ## ##     ##  ##  \n ##          ##      ##        ##  ##  \n ##  ##      ##      ##  ##    ##  ##  \n### ###     ####    ### ###   ### ##   \n                                       \n\n\nMask_1:\n  ##      ###  ##   ### ##   \n   ##       ## ##    ##  ##  \n ## ##     # ## #    ##  ##  \n ##  ##    ## ##     ##  ##  \n ## ###    ##  ##    ##  ##  \n ##  ##    ##  ##    ##  ##  \n###  ##   ###  ##   ### ##   \n                             \n\n\nMask_2:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n"}
{"sentence": "Her mom was a musical theater actress, which got her interested in singing.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGVyIG1vbSB3YXMgYSBtdXNpY2FsIHRoZWF0ZXIgYWN0cmVzcywgd2hpY2ggZ290IGhlciBpbnRlcmVzdGVkIGluIHNpbmdpbmcu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUre zbz jnf n zhfvpny gurngre npgerff, juvpu tbg ure vagrerfgrq va fvatvat.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nerHay ommay asway ayay usicalmay eaterthay actressyay, ichwhay otgay erhay interestedyay inyay ingingsay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH3r m0m w45 4 mu51c4l 7h3473r 4c7r355, wh1ch g07 h3r 1n73r3573d 1n 51ng1ng.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJrt ,p, esd s ,idovs; yjrsyrt svytrdd, ejovj hpy jrt omyrtrdyrf om domhomh.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u01dd\u0279 \u026fo\u026f \u028d\u0250s \u0250 \u026fns\u1d09\u0254\u0250l \u0287\u0265\u01dd\u0250\u0287\u01dd\u0279 \u0250\u0254\u0287\u0279\u01ddss, \u028d\u0265\u1d09\u0254\u0265 \u0183o\u0287 \u0265\u01dd\u0279 \u1d09u\u0287\u01dd\u0279\u01dds\u0287\u01ddp \u1d09u s\u1d09u\u0183\u1d09u\u0183.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nreH mom saw a lacisum retaeht ,ssertca hcihw tog reh detseretni ni .gnignis\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - a\n2. mellifluous - which\n3. quixotic - her\n4. ephemeral - theater\n5. labyrinthine - mom\n\nSentence:\nHer labyrinthine was serendipity musical ephemeral actress, mellifluous got quixotic interested in singing.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e1-c4 c3-e3-c3 c5-a1-d4 a1 c3-a5-d4-d2-c1-a1-b3 e4-c2-e1-a1-e4-e1-c4 a1-c1-e4-c4-e1-d4-d4-, c5-c2-d2-c1-c2 b2-e3-e4 c2-e1-c4 d2-d3-e4-e1-c4-e1-d4-e4-e1-d1 d2-d3 d4-d2-d3-b2-d2-d3-b2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHer mom [MASK_0] a musical theater actress, [MASK_1] got her interested in [MASK_2].\n\nMask_0:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n\n\nMask_1:\n##   ##   ###  ##     ####     ## ##    ###  ##  \n##   ##    ##  ##      ##     ##   ##    ##  ##  \n##   ##    ##  ##      ##     ##         ##  ##  \n## # ##    ## ###      ##     ##         ## ###  \n# ### #    ##  ##      ##     ##         ##  ##  \n ## ##     ##  ##      ##     ##   ##    ##  ##  \n##   ##   ###  ##     ####     ## ##    ###  ##  \n                                                 \n\n\nMask_2:\n ## ##      ####    ###  ##    ## ##      ####    ###  ##    ## ##   \n##   ##      ##       ## ##   ##   ##      ##       ## ##   ##   ##  \n####         ##      # ## #   ##           ##      # ## #   ##       \n #####       ##      ## ##    ##  ###      ##      ## ##    ##  ###  \n    ###      ##      ##  ##   ##   ##      ##      ##  ##   ##   ##  \n##   ##      ##      ##  ##   ##   ##      ##      ##  ##   ##   ##  \n ## ##      ####    ###  ##    ## ##      ####    ###  ##    ## ##   \n                                                                     \n"}
{"sentence": "When she went to the pool, she didn't know what she'd find.", "long": true, "question": false, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hlbiBzaGUgd2VudCB0byB0aGUgcG9vbCwgc2hlIGRpZG4ndCBrbm93IHdoYXQgc2hlJ2QgZmluZC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJura fur jrag gb gur cbby, fur qvqa'g xabj jung fur'q svaq.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nenWhay eshay entway otay ethay oolpay, eshay idn'tday owknay atwhay e'dshay indfay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh3n 5h3 w3n7 70 7h3 p00l, 5h3 d1dn'7 kn0w wh47 5h3'd f1nd.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjrm djr ermy yp yjr [pp;, djr fofm'y lmpe ejsy djr'f gomf.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u01ddu s\u0265\u01dd \u028d\u01ddu\u0287 \u0287o \u0287\u0265\u01dd dool, s\u0265\u01dd p\u1d09pu'\u0287 \u029euo\u028d \u028d\u0265\u0250\u0287 s\u0265\u01dd'p \u025f\u1d09up.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnehW ehs tnew ot eht ,loop ehs t'ndid wonk tahw d'ehs .dnif\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - know\n2. ephemeral - she\n3. labyrinthine - the\n4. quixotic - went\n\nSentence:\nWhen ephemeral quixotic to labyrinthine pool, ephemeral didn't mellifluous what ephemeral'd find.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e1-d3 d4-c2-e1 c5-e1-d3-e4 e4-e3 e4-c2-e1 a4-e3-e3-b3-, d4-c2-e1 d1-d2-d1-d3-'-e4 a3-d3-e3-c5 c5-c2-a1-e4 d4-c2-e1-'-d1 a2-d2-d3-d1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] she went to the pool, she didn't know what she'd find.\n\nMask_0:\n ## ##    ###  ##   ### ###   ### ##   \n##   ##    ##  ##    ##  ##    ##  ##  \n####       ##  ##    ##        ##  ##  \n #####     ## ###    ## ##     ##  ##  \n    ###    ##  ##    ##        ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###   ### ##   \n                                       \n\n\nMask_1:\n##   ##   ###  ##   ### ###   ###  ##  \n##   ##    ##  ##    ##  ##     ## ##  \n##   ##    ##  ##    ##        # ## #  \n## # ##    ## ###    ## ##     ## ##   \n# ### #    ##  ##    ##        ##  ##  \n ## ##     ##  ##    ##  ##    ##  ##  \n##   ##   ###  ##   ### ###   ###  ##  \n                                       \n\n\nMask_2:\n### ##      ####    ### ##    ###  ##   #### ##  \n ##  ##      ##      ##  ##     ## ##   # ## ##  \n ##  ##      ##      ##  ##    # ## #     ##     \n ##  ##      ##      ##  ##    ## ##      ##     \n ##  ##      ##      ##  ##    ##  ##     ##     \n ##  ##      ##      ##  ##    ##  ##     ##     \n### ##      ####    ### ##    ###  ##    ####    \n                                                 \n"}
{"sentence": "k AS AOsEn YE ZGlGHp Yaax LBejYWo oScBVXA NC'c vIF ShP.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nayBBUyBBT3NFbiBZRSBaR2xHSHAgWWFheCBMQmVqWVdvIG9TY0JWWEEgTkMnYyB2SUYgU2hQLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nx NF NBfRa LR MTyTUc Lnnk YOrwLJb bFpOIKN AP'p iVS FuC.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nkay ASyay AOsEnyay EYay ZGlGHpay aaxYay ejYWoLBay oScBVXAyay NC'cay IFvay ShPay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk 45 4053n Y3 ZGlGHp Y44x LB3jYW0 05cBVX4 NC'c v1F 5hP.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nl SD SPdRm UR XH;HJ[ Ussc ;NrkUEp pDvNBCS MV'v bOG Dj[.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e \u2200S \u2200Os\u018eu \u2144\u018e Z\u2141l\u2141Hd \u2144\u0250\u0250x \u2142\u15fa\u01dd\u027e\u2144Mo oS\u0254\u15fa\u039bX\u2200 N\u0186'\u0254 \u028cI\u2132 S\u0265\u0500.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nk SA nEsOA EY pHGlGZ xaaY oWYjeBL AXVBcSo c'CN FIv .PhS\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - k\n2. labyrinthine - aosen\n3. quixotic - ncc\n4. ephemeral - as\n5. mellifluous - vif\n\nSentence:\nserendipity ephemeral labyrinthine YE ZGlGHp Yaax LBejYWo oScBVXA quixotic mellifluous ShP.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3 a1-d4 a1-e3-d4-e1-d3 e5-e1 z-b2-b3-b2-c2-a4 e5-a1-a1-d5 b3-b1-e1-e2-e5-c5-e3 e3-d4-c1-b1-b5-d5-a1 d3-c1-'-c1 b5-d2-a2 d4-c2-a4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nk AS [MASK_1] [MASK_2] ZGlGHp Yaax LBejYWo [MASK_0] NC'c vIF ShP.\n\nMask_0:\n ## ##     ## ##     ## ##    ### ##    ### ###   ##  ##      ##     \n##   ##   ##   ##   ##   ##    ##  ##    ##  ##   ### ##       ##    \n##   ##   ####      ##         ##  ##    ##  ##    ###       ## ##   \n##   ##    #####    ##         ## ##     ##  ##     ###      ##  ##  \n##   ##       ###   ##         ##  ##    ### ##      ###     ## ###  \n##   ##   ##   ##   ##   ##    ##  ##     ###     ##  ###    ##  ##  \n ## ##     ## ##     ## ##    ### ##       ##     ##   ##   ###  ##  \n                                                                     \n\n\nMask_1:\n  ##       ## ##     ## ##    ### ###   ###  ##  \n   ##     ##   ##   ##   ##    ##  ##     ## ##  \n ## ##    ##   ##   ####       ##        # ## #  \n ##  ##   ##   ##    #####     ## ##     ## ##   \n ## ###   ##   ##       ###    ##        ##  ##  \n ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n###  ##    ## ##     ## ##    ### ###   ###  ##  \n                                                 \n\n\nMask_2:\n##  ##    ### ###  \n##  ##     ##  ##  \n##  ##     ##      \n ## ##     ## ##   \n  ##       ##      \n  ##       ##  ##  \n  ##      ### ###  \n                   \n"}
{"sentence": "xb'j VfhZbDkJUv zFjl QcE peX mn RZQWW LU ehJE 8 Jymvj IAs.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neGInaiBWZmhaYkRrSlV2IHpGamwgUWNFIHBlWCBtbiBSWlFXVyBMVSBlaEpFIDggSnltdmogSUFzLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nko'w IsuMoQxWHi mSwy DpR crK za EMDJJ YH ruWR 8 Wlziw VNf.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxb'jay UvVfhZbDkJay zFjlay EQcay eXpay mnay RZQWWay ULay ehJEyay 8ay Jymvjay IAsyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nxb'j VfhZbDkJUv zFjl Qc3 p3X mn RZQWW LU 3hJ3 8 Jymvj 145.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncn'k BgjXnFlKIb xGk; WvR [rC ,m TXWEE ;I rjKR 8 Ku,bk OSd.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nxq'\u027e \u039b\u025f\u0265Zq\u15e1\u029e\u017f\u2229\u028c z\u2132\u027el \u10e2\u0254\u018e d\u01ddX \u026fu \u1d1aZ\u10e2MM \u2142\u2229 \u01dd\u0265\u017f\u018e 8 \u017f\u028e\u026f\u028c\u027e I\u2200s.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nj'bx vUJkDbZhfV ljFz EcQ Xep nm WWQZR UL EJhe 8 jvmyJ .sAI\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - rzqww\n2. ephemeral - 8\n3. quixotic - jymvj\n4. serendipity - qce\n5. mellifluous - mn\n\nSentence:\nxb'j VfhZbDkJUv zFjl serendipity peX mellifluous labyrinthine LU ehJE ephemeral quixotic IAs.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-b1-'-e2 b5-a2-c2-z-b1-d1-a3-e2-a5-b5 z-a2-e2-b3 b4-c1-e1 a4-e1-d5 c3-d3 c4-z-b4-c5-c5 b3-a5 e1-c2-e2-e1 8 e2-e5-c3-b5-e2 d2-a1-d4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxb'j [MASK_0] zFjl QcE peX mn RZQWW LU [MASK_1] 8 Jymvj IAs.\n\nMask_0:\n### ###   ### ###   ###  ##   ### ##    ### ##    ### ##    ##  ###      ####   ##  ###   ### ###  \n ##  ##    ##  ##    ##  ##   ##  ##     ##  ##    ##  ##   ##  ##        ##    ##   ##    ##  ##  \n ##  ##    ##        ##  ##      ##      ##  ##    ##  ##   ## ##         ##    ##   ##    ##  ##  \n ##  ##    ## ##     ## ###     ##       ## ##     ##  ##   ## ##         ##    ##   ##    ##  ##  \n ### ##    ##        ##  ##    ##        ##  ##    ##  ##   ## ###    ##  ##    ##   ##    ### ##  \n  ###      ##        ##  ##   ##  ##     ##  ##    ##  ##   ##  ##    ##  ##    ##   ##     ###    \n   ##     ####      ###  ##   # ####    ### ##    ### ##    ##  ###    ## #      ## ##       ##    \n                                                                                                   \n\n\nMask_1:\n### ###   ###  ##      ####   ### ###  \n ##  ##    ##  ##       ##     ##  ##  \n ##        ##  ##       ##     ##      \n ## ##     ## ###       ##     ## ##   \n ##        ##  ##   ##  ##     ##      \n ##  ##    ##  ##   ##  ##     ##  ##  \n### ###   ###  ##    ## #     ### ###  \n                                       \n\n\nMask_2:\n##  ##    ### ##       ####  \n### ##     ##  ##       ##   \n ###       ##  ##       ##   \n  ###      ## ##        ##   \n   ###     ##  ##   ##  ##   \n##  ###    ##  ##   ##  ##   \n##   ##   ### ##     ## #    \n                             \n"}
{"sentence": "xCG yuFy rbf kTTFa Fe JM VHoK Mu J NhlQkO'w vwWM tpgkelX.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neENHIHl1RnkgcmJmIGtUVEZhIEZlIEpNIFZIb0sgTXUgSiBOaGxRa08ndyB2d1dNIHRwZ2tlbFgu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nkPT lhSl eos xGGSn Sr WZ IUbX Zh W AuyDxB'j ijJZ gctxryK.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxCGay uFyyay rbfay akTTFay eFay JMay oKVHay uMay Jay O'wNhlQkay vwWMay elXtpgkay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nxCG yuFy rbf k77F4 F3 JM VH0K Mu J NhlQk0'w vwWM 7pgk3lX.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncVH uiGu tng lYYGs Gr K, BJpL ,i K Mj;WlP'e beE, y[hlr;C.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nx\u0186\u2141 \u028en\u2132\u028e \u0279q\u025f \u029e\u22a5\u22a5\u2132\u0250 \u2132\u01dd \u017fW \u039bHo\ua4d8 Wn \u017f N\u0265l\u10e2\u029eO'\u028d \u028c\u028dMW \u0287d\u0183\u029e\u01ddlX.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nGCx yFuy fbr aFTTk eF MJ KoHV uM J w'OkQlhN MWwv .Xlekgpt\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - xcg\n2. quixotic - vhok\n3. serendipity - fe\n4. labyrinthine - mu\n5. mellifluous - rbf\n\nSentence:\nephemeral yuFy mellifluous kTTFa serendipity JM quixotic labyrinthine J NhlQkO'w vwWM tpgkelX.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-c1-b2 e5-a5-a2-e5 c4-b1-a2 a3-e4-e4-a2-a1 a2-e1 e2-c3 b5-c2-e3-a3 c3-a5 e2 d3-c2-b3-b4-a3-e3-'-c5 b5-c5-c5-c3 e4-a4-b2-a3-e1-b3-d5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxCG yuFy rbf kTTFa Fe JM VHoK [MASK_2] [MASK_1] NhlQkO'w vwWM [MASK_0].\n\nMask_0:\n#### ##   ### ##     ## ##    ##  ###   ### ###   ####      ##  ##   \n# ## ##    ##  ##   ##   ##   ##  ##     ##  ##    ##       ### ##   \n  ##       ##  ##   ##        ## ##      ##        ##        ###     \n  ##       ##  ##   ##  ###   ## ##      ## ##     ##         ###    \n  ##       ## ##    ##   ##   ## ###     ##        ##          ###   \n  ##       ##       ##   ##   ##  ##     ##  ##    ##  ##   ##  ###  \n ####     ####       ## ##    ##  ###   ### ###   ### ###   ##   ##  \n                                                                     \n\n\nMask_1:\n   ####  \n    ##   \n    ##   \n    ##   \n##  ##   \n##  ##   \n ## #    \n         \n\n\nMask_2:\n##   ##   ##  ###  \n ## ##    ##   ##  \n# ### #   ##   ##  \n## # ##   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n##   ##    ## ##   \n                   \n"}
{"sentence": "Bxk RcRH QpA kVLaw FGy QppkJeC ZA XVEds-dqQscAp kzevP.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nQnhrIFJjUkggUXBBIGtWTGF3IEZHeSBRcHBrSmVDIFpBIFhWRWRzLWRxUXNjQXAga3pldlAu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nOkx EpEU DcN xIYnj STl DccxWrP MN KIRqf-qdDfpNc xmriC.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nBxkay RcRHay AQpay awkVLay FGyay eCQppkJay AZay Eds-dqQscApXVay evPkzay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nBxk RcRH Qp4 kVL4w FGy QppkJ3C Z4 XV3d5-dqQ5c4p kz3vP.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nNcl TvTJ W[S lB;se GHu W[[lKrV XS CBRfd-fwWdvS[ lxrb[.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15fax\u029e \u1d1a\u0254\u1d1aH \u10e2d\u2200 \u029e\u039b\u2142\u0250\u028d \u2132\u2141\u028e \u10e2dd\u029e\u017f\u01dd\u0186 Z\u2200 X\u039b\u018eps-pb\u10e2s\u0254\u2200d \u029ez\u01dd\u028c\u0500.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nkxB HRcR ApQ waLVk yGF CeJkppQ AZ pAcsQqd-sdEVX .Pvezk\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - qpa\n2. quixotic - qppkjec\n3. mellifluous - fgy\n4. ephemeral - kvlaw\n5. labyrinthine - kzevp\n\nSentence:\nBxk RcRH serendipity ephemeral mellifluous quixotic ZA XVEds-dqQscAp kzevP.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb1-d5-a3 c4-c1-c4-c2 b4-a4-a1 a3-b5-b3-a1-c5 a2-b2-e5 b4-a4-a4-a3-e2-e1-c1 z-a1 d5-b5-e1-d1-d4-d1-b4-b4-d4-c1-a1-a4 a3-z-e1-b5-a4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] QpA kVLaw FGy QppkJeC [MASK_2] XVEds-dqQscAp kzevP.\n\nMask_0:\n### ##     ## ##    ### ##    ###  ##  \n ##  ##   ##   ##    ##  ##    ##  ##  \n ##  ##   ##         ##  ##    ##  ##  \n ## ##    ##         ## ##     ## ###  \n ## ##    ##         ## ##     ##  ##  \n ##  ##   ##   ##    ##  ##    ##  ##  \n#### ##    ## ##    #### ##   ###  ##  \n                                       \n\n\nMask_1:\n### ##    ##  ##    ##  ###  \n ##  ##   ### ##    ##  ##   \n ##  ##    ###      ## ##    \n ## ##      ###     ## ##    \n ##  ##      ###    ## ###   \n ##  ##   ##  ###   ##  ##   \n### ##    ##   ##   ##  ###  \n                             \n\n\nMask_2:\n### ##      ##     \n##  ##       ##    \n   ##      ## ##   \n  ##       ##  ##  \n ##        ## ###  \n##  ##     ##  ##  \n# ####    ###  ##  \n                   \n"}
{"sentence": "jj VUEdqi P HUE bnxYjx MXBFLEt iIL riX UayRiTb qLuP pL AqR zWZiij gzg lbPC.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\namogVlVFZHFpIFAgSFVFIGJueFlqeCBNWEJGTEV0IGlJTCByaVggVWF5UmlUYiBxTHVQIHBMIEFxUiB6V1ppaWogZ3pnIGxiUEMu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nww IHRqdv C UHR oakLwk ZKOSYRg vVY evK HnlEvGo dYhC cY NdE mJMvvw tmt yoCP.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\njjay UEdqiVay Pay UEHay bnxYjxay EtMXBFLay iILyay iXray UayRiTbyay uPqLay pLay AqRyay iijzWZay gzgay lbPCay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\njj VU3dq1 P HU3 bnxYjx MXBFL37 11L r1X U4yR17b qLuP pL 4qR zWZ11j gzg lbPC.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nkk BIRfwo [ JIR nmcUkc ,CNG;Ry oO; toC IsuToYn w;i[ [; SwT xEXook hxh ;n[V.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u027e\u027e \u039b\u2229\u018epb\u1d09 \u0500 H\u2229\u018e qux\u2144\u027ex WX\u15fa\u2132\u2142\u018e\u0287 \u1d09I\u2142 \u0279\u1d09X \u2229\u0250\u028e\u1d1a\u1d09\u22a5q b\u2142n\u0500 d\u2142 \u2200b\u1d1a zMZ\u1d09\u1d09\u027e \u0183z\u0183 lq\u0500\u0186.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njj iqdEUV P EUH xjYxnb tELFBXM LIi Xir bTiRyaU PuLq Lp RqA jiiZWz gzg .CPbl\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - vuedqi\n2. quixotic - hue\n3. labyrinthine - bnxyjx\n4. serendipity - lbpc\n5. ephemeral - qlup\n\nSentence:\njj mellifluous P quixotic labyrinthine MXBFLEt iIL riX UayRiTb ephemeral pL AqR zWZiij gzg lbPC.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-e2 b5-a5-e1-d1-b4-d2 a4 c2-a5-e1 b1-d3-d5-e5-e2-d5 c3-d5-b1-a2-b3-e1-e4 d2-d2-b3 c4-d2-d5 a5-a1-e5-c4-d2-e4-b1 b4-b3-a5-a4 a4-b3 a1-b4-c4 z-c5-z-d2-d2-e2 b2-z-b2 b3-b1-a4-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\njj VUEdqi P HUE bnxYjx MXBFLEt [MASK_2] riX UayRiTb qLuP pL AqR [MASK_0] [MASK_1] lbPC.\n\nMask_0:\n### ##    ##   ##   ### ##      ####      ####       ####  \n##  ##    ##   ##   ##  ##       ##        ##         ##   \n   ##     ##   ##      ##        ##        ##         ##   \n  ##      ## # ##     ##         ##        ##         ##   \n ##       # ### #    ##          ##        ##     ##  ##   \n##  ##     ## ##    ##  ##       ##        ##     ##  ##   \n# ####    ##   ##   # ####      ####      ####     ## #    \n                                                           \n\n\nMask_1:\n ## ##    ### ##     ## ##   \n##   ##   ##  ##    ##   ##  \n##           ##     ##       \n##  ###     ##      ##  ###  \n##   ##    ##       ##   ##  \n##   ##   ##  ##    ##   ##  \n ## ##    # ####     ## ##   \n                             \n\n\nMask_2:\n  ####      ####    ####     \n   ##        ##      ##      \n   ##        ##      ##      \n   ##        ##      ##      \n   ##        ##      ##      \n   ##        ##      ##  ##  \n  ####      ####    ### ###  \n                             \n"}
{"sentence": "Yj ehPsitIuz, FoNkl ly m TVJWc MTGVXd YayDezW KlToq SMuVc pyjt UsGZ JFKg IMdGMV uHtsS NH WJme.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWWogZWhQc2l0SXV6LCBGb05rbCBseSBtIFRWSldjIE1UR1ZYZCBZYXlEZXpXIEtsVG9xIFNNdVZjIHB5anQgVXNHWiBKRktnIElNZEdNViB1SHRzUyBOSCBXSm1lLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLw ruCfvgVhm, SbAxy yl z GIWJp ZGTIKq LnlQrmJ XyGbd FZhIp clwg HfTM WSXt VZqTZI hUgfF AU JWzr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nYjay ehPsitIuzyay, oNklFay lyay may TVJWcay MTGVXday ayDezWYay oqKlTay uVcSMay pyjtay UsGZyay JFKgay IMdGMVyay uHtsSyay NHay eWJmay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nYj 3hP5171uz, F0Nkl ly m 7VJWc M7GVXd Y4yD3zW Kl70q 5MuVc pyj7 U5GZ JFKg 1MdGMV uH755 NH WJm3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUk rj[doyOix, GpMl; ;u , YBKEv ,YHBCf UsuFrxE L;Ypw D,iBv [uky IdHX KGLh O,fH,B iJydD MJ EK,r.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144\u027e \u01dd\u0265\u0500s\u1d09\u0287Inz, \u2132oN\u029el l\u028e \u026f \u22a5\u039b\u017fM\u0254 W\u22a5\u2141\u039bXp \u2144\u0250\u028e\u15e1\u01ddzM \ua4d8l\u22a5ob SWn\u039b\u0254 d\u028e\u027e\u0287 \u2229s\u2141Z \u017f\u2132\ua4d8\u0183 IWp\u2141W\u039b nH\u0287sS NH M\u017f\u026f\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njY ,zuItisPhe lkNoF yl m cWJVT dXVGTM WzeDyaY qoTlK cVuMS tjyp ZGsU gKFJ VMGdMI SstHu HN .emJW\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - fonkl\n2. labyrinthine - wjme\n3. mellifluous - nh\n4. ephemeral - uhtss\n5. serendipity - tvjwc\n\nSentence:\nYj ehPsitIuz, quixotic ly m serendipity MTGVXd YayDezW KlToq SMuVc pyjt UsGZ JFKg IMdGMV ephemeral mellifluous WJme.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-e2 e1-c2-a4-d4-d2-e4-d2-a5-z-, a2-e3-d3-a3-b3 b3-e5 c3 e4-b5-e2-c5-c1 c3-e4-b2-b5-d5-d1 e5-a1-e5-d1-e1-z-c5 a3-b3-e4-e3-b4 d4-c3-a5-b5-c1 a4-e5-e2-e4 a5-d4-b2-z e2-a2-a3-b2 d2-c3-d1-b2-c3-b5 a5-c2-e4-d4-d4 d3-c2 c5-e2-c3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nYj ehPsitIuz, FoNkl [MASK_0] m [MASK_1] MTGVXd YayDezW KlToq SMuVc [MASK_2] UsGZ JFKg IMdGMV uHtsS NH WJme.\n\nMask_0:\n####      ##  ##   \n ##       ##  ##   \n ##       ##  ##   \n ##        ## ##   \n ##         ##     \n ##  ##     ##     \n### ###     ##     \n                   \n\n\nMask_1:\n#### ##   ### ###      ####   ##   ##    ## ##   \n# ## ##    ##  ##       ##    ##   ##   ##   ##  \n  ##       ##  ##       ##    ##   ##   ##       \n  ##       ##  ##       ##    ## # ##   ##       \n  ##       ### ##   ##  ##    # ### #   ##       \n  ##        ###     ##  ##     ## ##    ##   ##  \n ####        ##      ## #     ##   ##    ## ##   \n                                                 \n\n\nMask_2:\n### ##    ##  ##       ####   #### ##  \n ##  ##   ##  ##        ##    # ## ##  \n ##  ##   ##  ##        ##      ##     \n ##  ##    ## ##        ##      ##     \n ## ##      ##      ##  ##      ##     \n ##         ##      ##  ##      ##     \n####        ##       ## #      ####    \n                                       \n"}
{"sentence": "Nu mwe uQAg eP eOZW C GNb RPT CEHGyzeo bdQBcp rT LzU BDZpz yuFo OPfcE.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nTnUgbXdlIHVRQWcgZVAgZU9aVyBDIEdOYiBSUFQgQ0VIR3l6ZW8gYmRRQmNwIHJUIEx6VSBCRFpweiB5dUZvIE9QZmNFLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nAh zjr hDNt rC rBMJ P TAo ECG PRUTlmrb oqDOpc eG YmH OQMcm lhSb BCspR.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nuNay emway uQAgyay ePyay eOZWyay Cay GNbay RPTay EHGyzeoCay bdQBcpay rTay ULzay BDZpzay uFoyay OPfcEyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nNu mw3 uQ4g 3P 30ZW C GNb RP7 C3HGyz30 bdQBcp r7 LzU BDZpz yuF0 0Pfc3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nMi ,er iWSh r[ rPXE V HMn T[Y VRJHuxrp nfWNv[ tY ;xI NFX[x uiGp P[gvR.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nNn \u026f\u028d\u01dd n\u10e2\u2200\u0183 \u01dd\u0500 \u01ddOZM \u0186 \u2141Nq \u1d1a\u0500\u22a5 \u0186\u018eH\u2141\u028ez\u01ddo qp\u10e2\u15fa\u0254d \u0279\u22a5 \u2142z\u2229 \u15fa\u15e1Zdz \u028en\u2132o O\u0500\u025f\u0254\u018e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuN ewm gAQu Pe WZOe C bNG TPR oezyGHEC pcBQdb Tr UzL zpZDB oFuy .EcfPO\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - bdqbcp\n2. serendipity - yufo\n3. mellifluous - c\n4. ephemeral - nu\n5. labyrinthine - opfce\n\nSentence:\nephemeral mwe uQAg eP eOZW mellifluous GNb RPT CEHGyzeo quixotic rT LzU BDZpz serendipity OPfcE.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd3-a5 c3-c5-e1 a5-b4-a1-b2 e1-a4 e1-e3-z-c5 c1 b2-d3-b1 c4-a4-e4 c1-e1-c2-b2-e5-z-e1-e3 b1-d1-b4-b1-c1-a4 c4-e4 b3-z-a5 b1-d1-z-a4-z e5-a5-a2-e3 e3-a4-a2-c1-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nNu mwe uQAg eP eOZW [MASK_2] GNb RPT CEHGyzeo [MASK_0] rT LzU BDZpz yuFo [MASK_1].\n\nMask_0:\n### ##    ### ##     ## ##    ### ##     ## ##    ### ##   \n ##  ##    ##  ##   ##   ##    ##  ##   ##   ##    ##  ##  \n ##  ##    ##  ##   ##   ##    ##  ##   ##         ##  ##  \n ## ##     ##  ##   ##   ##    ## ##    ##         ##  ##  \n ##  ##    ##  ##   ##   ##    ##  ##   ##         ## ##   \n ##  ##    ##  ##   ##  ##     ##  ##   ##   ##    ##      \n### ##    ### ##     ##  ##   ### ##     ## ##    ####     \n                                                           \n\n\nMask_1:\n ## ##    ### ##    ### ###    ## ##    ### ###  \n##   ##    ##  ##    ##  ##   ##   ##    ##  ##  \n##   ##    ##  ##    ##       ##         ##      \n##   ##    ##  ##    ## ##    ##         ## ##   \n##   ##    ## ##     ##       ##         ##      \n##   ##    ##        ##       ##   ##    ##  ##  \n ## ##    ####      ####       ## ##    ### ###  \n                                                 \n\n\nMask_2:\n ## ##   \n##   ##  \n##       \n##       \n##       \n##   ##  \n ## ##   \n         \n"}
{"sentence": "lFx TMnXC OO WNQ UMSRq pE FytNy HTaku mtz TjfJlf HtNy VVD gkTBnRv xPL Rmqf bu.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nbEZ4IFRNblhDIE9PIFdOUSBVTVNScSBwRSBGeXROeSBIVGFrdSBtdHogVGpmSmxmIEh0TnkgVlZEIGdrVEJuUnYgeFBMIFJtcWYgYnUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nySk GZaKP BB JAD HZFEd cR SlgAl UGnxh zgm GwsWys UgAl IIQ txGOaEi kCY Ezds oh.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nlFxay TMnXCay OOyay WNQay UMSRqyay Epay FytNyay akuHTay mtzay TjfJlfay HtNyay VVDay gkTBnRvay xPLay Rmqfay ubay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nlFx 7MnXC 00 WNQ UM5Rq p3 Fy7Ny H74ku m7z 7jfJlf H7Ny VVD gk7BnRv xPL Rmqf bu.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;Gc Y,mCV PP EMW I,DTw [R GuyMu JYsli ,yx YkgK;g JyMu BBF hlYNmTb c[; T,wg ni.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nl\u2132x \u22a5WuX\u0186 OO MN\u10e2 \u2229WS\u1d1ab d\u018e \u2132\u028e\u0287N\u028e H\u22a5\u0250\u029en \u026f\u0287z \u22a5\u027e\u025f\u017fl\u025f H\u0287N\u028e \u039b\u039b\u15e1 \u0183\u029e\u22a5\u15fau\u1d1a\u028c x\u0500\u2142 \u1d1a\u026fb\u025f qn.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nxFl CXnMT OO QNW qRSMU Ep yNtyF ukaTH ztm flJfjT yNtH DVV vRnBTkg LPx fqmR .ub\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - wnq\n2. serendipity - rmqf\n3. ephemeral - fytny\n4. quixotic - htaku\n5. labyrinthine - mtz\n\nSentence:\nlFx TMnXC OO mellifluous UMSRq pE ephemeral quixotic labyrinthine TjfJlf HtNy VVD gkTBnRv xPL serendipity bu.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-a2-d5 e4-c3-d3-d5-c1 e3-e3 c5-d3-b4 a5-c3-d4-c4-b4 a4-e1 a2-e5-e4-d3-e5 c2-e4-a1-a3-a5 c3-e4-z e4-e2-a2-e2-b3-a2 c2-e4-d3-e5 b5-b5-d1 b2-a3-e4-b1-d3-c4-b5 d5-a4-b3 c4-c3-b4-a2 b1-a5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nlFx TMnXC OO WNQ UMSRq pE [MASK_0] HTaku mtz TjfJlf HtNy [MASK_2] gkTBnRv xPL [MASK_1] bu.\n\nMask_0:\n### ###   ##  ##    #### ##   ###  ##   ##  ##   \n ##  ##   ##  ##    # ## ##     ## ##   ##  ##   \n ##       ##  ##      ##       # ## #   ##  ##   \n ## ##     ## ##      ##       ## ##     ## ##   \n ##         ##        ##       ##  ##     ##     \n ##         ##        ##       ##  ##     ##     \n####        ##       ####     ###  ##     ##     \n                                                 \n\n\nMask_1:\n### ##    ##   ##    ## ##    ### ###  \n ##  ##    ## ##    ##   ##    ##  ##  \n ##  ##   # ### #   ##   ##    ##      \n ## ##    ## # ##   ##   ##    ## ##   \n ## ##    ##   ##   ##   ##    ##      \n ##  ##   ##   ##   ##  ##     ##      \n#### ##   ##   ##    ##  ##   ####     \n                                       \n\n\nMask_2:\n### ###   ### ###   ### ##   \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##  ##    ##  ##  \n ##  ##    ##  ##    ##  ##  \n ### ##    ### ##    ##  ##  \n  ###       ###      ##  ##  \n   ##        ##     ### ##   \n                             \n"}
{"sentence": "Gq jRGmp MSrTyk, zDzBD NQr QlQy Nrgm ncwZO TxbeG Lc zMCS CpaIj gt mDxaxkiKY BH dtmAz Jpo KZ LDY bQLe.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nR3EgalJHbXAgTVNyVHlrLCB6RHpCRCBOUXIgUWxReSBOcmdtIG5jd1pPIFR4YmVHIExjIHpNQ1MgQ3BhSWogZ3QgbUR4YXhraUtZIEJIIGR0bUF6IEpwbyBLWiBMRFkgYlFMZS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nTd wETzc ZFeGlx, mQmOQ ADe DyDl Aetz apjMB GkorT Yp mZPF PcnVw tg zQknkxvXL OU qgzNm Wcb XM YQL oDYr.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nGqay jRGmpay MSrTykay, zDzBDay NQray QlQyay Nrgmay OncwZay eGTxbay Lcay zMCSay aIjCpay gtay axkiKYmDxay BHay Azdtmay oJpay KZay LDYay ebQLay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nGq jRGmp M5r7yk, zDzBD NQr QlQy Nrgm ncwZ0 7xb3G Lc zMC5 Cp41j g7 mDx4xk1KY BH d7m4z Jp0 KZ LDY bQL3.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nHw kTH,[ ,DtYul, xFxNF MWt W;Wu Mth, mveXP YcnrH ;v x,VD V[sOk hy ,FcscloLU NJ fy,Sx K[p LX ;FU nW;r.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2141b \u027e\u1d1a\u2141\u026fd WS\u0279\u22a5\u028e\u029e, z\u15e1z\u15fa\u15e1 N\u10e2\u0279 \u10e2l\u10e2\u028e N\u0279\u0183\u026f u\u0254\u028dZO \u22a5xq\u01dd\u2141 \u2142\u0254 zW\u0186S \u0186d\u0250I\u027e \u0183\u0287 \u026f\u15e1x\u0250x\u029e\u1d09\ua4d8\u2144 \u15faH p\u0287\u026f\u2200z \u017fdo \ua4d8Z \u2142\u15e1\u2144 q\u10e2\u2142\u01dd.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nqG pmGRj ,kyTrSM DBzDz rQN yQlQ mgrN OZwcn GebxT cL SCMz jIapC tg YKikxaxDm HB zAmtd opJ ZK YDL .eLQb\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - zdzbd\n2. ephemeral - qlqy\n3. serendipity - ldy\n4. labyrinthine - zmcs\n5. mellifluous - mdxaxkiky\n\nSentence:\nGq jRGmp MSrTyk, quixotic NQr ephemeral Nrgm ncwZO TxbeG Lc labyrinthine CpaIj gt mellifluous BH dtmAz Jpo KZ serendipity bQLe.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-b4 e2-c4-b2-c3-a4 c3-d4-c4-e4-e5-a3-, z-d1-z-b1-d1 d3-b4-c4 b4-b3-b4-e5 d3-c4-b2-c3 d3-c1-c5-z-e3 e4-d5-b1-e1-b2 b3-c1 z-c3-c1-d4 c1-a4-a1-d2-e2 b2-e4 c3-d1-d5-a1-d5-a3-d2-a3-e5 b1-c2 d1-e4-c3-a1-z e2-a4-e3 a3-z b3-d1-e5 b1-b4-b3-e1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nGq jRGmp MSrTyk, zDzBD NQr QlQy Nrgm ncwZO [MASK_2] Lc zMCS CpaIj [MASK_0] mDxaxkiKY [MASK_1] dtmAz Jpo KZ LDY bQLe.\n\nMask_0:\n ## ##    #### ##  \n##   ##   # ## ##  \n##          ##     \n##  ###     ##     \n##   ##     ##     \n##   ##     ##     \n ## ##     ####    \n                   \n\n\nMask_1:\n### ##    ###  ##  \n ##  ##    ##  ##  \n ##  ##    ##  ##  \n ## ##     ## ###  \n ##  ##    ##  ##  \n ##  ##    ##  ##  \n### ##    ###  ##  \n                   \n\n\nMask_2:\n#### ##   ##  ##    ### ##    ### ###    ## ##   \n# ## ##   ### ##     ##  ##    ##  ##   ##   ##  \n  ##       ###       ##  ##    ##       ##       \n  ##        ###      ## ##     ## ##    ##  ###  \n  ##         ###     ##  ##    ##       ##   ##  \n  ##      ##  ###    ##  ##    ##  ##   ##   ##  \n ####     ##   ##   ### ##    ### ###    ## ##   \n                                                 \n"}
{"sentence": "fBV WQmjdFHMINF ERZRvj rj wstOO aZ eQel GgR mxrwdkc.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZkJWIFdRbWpkRkhNSU5GIEVSWlJ2aiByaiB3c3RPTyBhWiBlUWVsIEdnUiBteHJ3ZGtjLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nsOI JDzwqSUZVAS REMEiw ew jfgBB nM rDry TtE zkejqxp.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nfBVay INFWQmjdFHMay ERZRvjyay rjay OOwstay aZyay eQelyay GgRay mxrwdkcay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nfBV WQmjdFHM1NF 3RZRvj rj w5700 4Z 3Q3l GgR mxrwdkc.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ngNB EW,kfGJ,OMG RTXTbk tk edyPP sX rWr; HhT ,cteflv.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u025f\u15fa\u039b M\u10e2\u026f\u027ep\u2132HWIN\u2132 \u018e\u1d1aZ\u1d1a\u028c\u027e \u0279\u027e \u028ds\u0287OO \u0250Z \u01dd\u10e2\u01ddl \u2141\u0183\u1d1a \u026fx\u0279\u028dp\u029e\u0254.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nVBf FNIMHFdjmQW jvRZRE jr OOtsw Za leQe RgG .ckdwrxm\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - eqel\n2. quixotic - az\n3. ephemeral - wqmjdfhminf\n4. serendipity - wstoo\n5. mellifluous - rj\n\nSentence:\nfBV ephemeral ERZRvj mellifluous serendipity quixotic labyrinthine GgR mxrwdkc.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na2-b1-b5 c5-b4-c3-e2-d1-a2-c2-c3-d2-d3-a2 e1-c4-z-c4-b5-e2 c4-e2 c5-d4-e4-e3-e3 a1-z e1-b4-e1-b3 b2-b2-c4 c3-d5-c4-c5-d1-a3-c1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nfBV WQmjdFHMINF ERZRvj rj wstOO [MASK_0] [MASK_2] [MASK_1] mxrwdkc.\n\nMask_0:\n  ##      ### ##   \n   ##     ##  ##   \n ## ##       ##    \n ##  ##     ##     \n ## ###    ##      \n ##  ##   ##  ##   \n###  ##   # ####   \n                   \n\n\nMask_1:\n ## ##     ## ##    ### ##   \n##   ##   ##   ##    ##  ##  \n##        ##         ##  ##  \n##  ###   ##  ###    ## ##   \n##   ##   ##   ##    ## ##   \n##   ##   ##   ##    ##  ##  \n ## ##     ## ##    #### ##  \n                             \n\n\nMask_2:\n### ###    ## ##    ### ###   ####     \n ##  ##   ##   ##    ##  ##    ##      \n ##       ##   ##    ##        ##      \n ## ##    ##   ##    ## ##     ##      \n ##       ##   ##    ##        ##      \n ##  ##   ##  ##     ##  ##    ##  ##  \n### ###    ##  ##   ### ###   ### ###  \n                                       \n"}
{"sentence": "LFr RYPzk cgow IqAm SmU HBfu onG c UwMI OO PlbTxFEkC ZbrRdnRXP.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nTEZyIFJZUHprIGNnb3cgSXFBbSBTbVUgSEJmdSBvbkcgYyBVd01JIE9PIFBsYlR4RkVrQyBaYnJSZG5SWFAu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nYSe ELCmx ptbj VdNz FzH UOsh baT p HjZV BB CyoGkSRxP MoeEqaEKC.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nLFray RYPzkay owcgay IqAmyay USmay uHBfay onGyay cay UwMIyay OOyay EkCPlbTxFay ZbrRdnRXPay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nLFr RYPzk cg0w 1q4m 5mU HBfu 0nG c UwM1 00 Plb7xF3kC ZbrRdnRXP.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;Gt TU[xl vhpe OwS, D,I JNgi pmH v Ie,O PP [;nYcGRlV XntTfmTC[.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2142\u2132\u0279 \u1d1a\u2144\u0500z\u029e \u0254\u0183o\u028d Ib\u2200\u026f S\u026f\u2229 H\u15fa\u025fn ou\u2141 \u0254 \u2229\u028dWI OO \u0500lq\u22a5x\u2132\u018e\u029e\u0186 Zq\u0279\u1d1apu\u1d1aX\u0500.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nrFL kzPYR wogc mAqI UmS ufBH Gno c IMwU OO CkEFxTblP .PXRndRrbZ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - oo\n2. labyrinthine - ong\n3. mellifluous - zbrrdnrxp\n4. serendipity - c\n5. ephemeral - hbfu\n\nSentence:\nLFr RYPzk cgow IqAm SmU ephemeral labyrinthine serendipity UwMI quixotic PlbTxFEkC ZbrRdnRXP.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-a2-c4 c4-e5-a4-z-a3 c1-b2-e3-c5 d2-b4-a1-c3 d4-c3-a5 c2-b1-a2-a5 e3-d3-b2 c1 a5-c5-c3-d2 e3-e3 a4-b3-b1-e4-d5-a2-e1-a3-c1 z-b1-c4-c4-d1-d3-c4-d5-a4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nLFr [MASK_2] cgow [MASK_1] SmU [MASK_0] onG c UwMI OO PlbTxFEkC ZbrRdnRXP.\n\nMask_0:\n###  ##   ### ##    ### ###   ##  ###  \n ##  ##    ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##    ##       ##   ##  \n ## ###    ## ##     ## ##    ##   ##  \n ##  ##    ##  ##    ##       ##   ##  \n ##  ##    ##  ##    ##       ##   ##  \n###  ##   ### ##    ####       ## ##   \n                                       \n\n\nMask_1:\n  ####     ## ##      ##      ##   ##  \n   ##     ##   ##      ##      ## ##   \n   ##     ##   ##    ## ##    # ### #  \n   ##     ##   ##    ##  ##   ## # ##  \n   ##     ##   ##    ## ###   ##   ##  \n   ##     ##  ##     ##  ##   ##   ##  \n  ####     ##  ##   ###  ##   ##   ##  \n                                       \n\n\nMask_2:\n### ##    ##  ##    ### ##    ### ##    ##  ###  \n ##  ##   ##  ##     ##  ##   ##  ##    ##  ##   \n ##  ##   ##  ##     ##  ##      ##     ## ##    \n ## ##     ## ##     ##  ##     ##      ## ##    \n ## ##      ##       ## ##     ##       ## ###   \n ##  ##     ##       ##       ##  ##    ##  ##   \n#### ##     ##      ####      # ####    ##  ###  \n                                                 \n"}
{"sentence": "N IMhtyn DSYx aw lNq Mb WyP VklI GA noGJsXC VXxf pzMlwIQx.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nTiBJTWh0eW4gRFNZeCBhdyBsTnEgTWIgV3lQIFZrbEkgR0Egbm9HSnNYQyBWWHhmIHB6TWx3SVF4Lg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nA VZugla QFLk nj yAd Zo JlC IxyV TN abTWfKP IKks cmZyjVDk.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nNay IMhtynyay DSYxay awyay lNqay Mbay WyPay IVklay AGay oGJsXCnay VXxfay IQxpzMlway.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nN 1Mh7yn D5Yx 4w lNq Mb WyP Vkl1 G4 n0GJ5XC VXxf pzMlw1Qx.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nM O,jyum FDUc se ;Mw ,n Eu[ Bl;O HS mpHKdCV BCcg [x,;eOWc.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nN IW\u0265\u0287\u028eu \u15e1S\u2144x \u0250\u028d lNb Wq M\u028e\u0500 \u039b\u029elI \u2141\u2200 uo\u2141\u017fsX\u0186 \u039bXx\u025f dzWl\u028dI\u10e2x.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nN nythMI xYSD wa qNl bM PyW IlkV AG CXsJGon fxXV .xQIwlMzp\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - vkli\n2. serendipity - pzmlwiqx\n3. mellifluous - aw\n4. labyrinthine - nogjsxc\n5. quixotic - ga\n\nSentence:\nN IMhtyn DSYx mellifluous lNq Mb WyP ephemeral quixotic labyrinthine VXxf pzMlwIQx.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd3 d2-c3-c2-e4-e5-d3 d1-d4-e5-d5 a1-c5 b3-d3-b4 c3-b1 c5-e5-a4 b5-a3-b3-d2 b2-a1 d3-e3-b2-e2-d4-d5-c1 b5-d5-d5-a2 a4-z-c3-b3-c5-d2-b4-d5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nN IMhtyn [MASK_2] [MASK_0] lNq Mb WyP [MASK_1] GA noGJsXC VXxf pzMlwIQx.\n\nMask_0:\n  ##      ##   ##  \n   ##     ##   ##  \n ## ##    ##   ##  \n ##  ##   ## # ##  \n ## ###   # ### #  \n ##  ##    ## ##   \n###  ##   ##   ##  \n                   \n\n\nMask_1:\n### ###   ##  ###   ####        ####   \n ##  ##   ##  ##     ##          ##    \n ##  ##   ## ##      ##          ##    \n ##  ##   ## ##      ##          ##    \n ### ##   ## ###     ##          ##    \n  ###     ##  ##     ##  ##      ##    \n   ##     ##  ###   ### ###     ####   \n                                       \n\n\nMask_2:\n### ##     ## ##    ##  ##    ##  ##   \n ##  ##   ##   ##   ##  ##    ### ##   \n ##  ##   ####      ##  ##     ###     \n ##  ##    #####     ## ##      ###    \n ##  ##       ###     ##         ###   \n ##  ##   ##   ##     ##      ##  ###  \n### ##     ## ##      ##      ##   ##  \n                                       \n"}
{"sentence": "Kib BLWbQ VnV gnIHxGshk pQ BNP DXFW, mPn qlB yoF EqcIDncY vLCZ tViUok yj zca XQL sK DmFoU JZWERdb.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nS2liIEJMV2JRIFZuViBnbklIeEdzaGsgcFEgQk5QIERYRlcsIG1QbiBxbEIgeW9GIEVxY0lEbmNZIHZMQ1ogdFZpVW9rIHlqIHpjYSBYUUwgc0sgRG1Gb1UgSlpXRVJkYi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nXvo OYJoD IaI taVUkTfux cD OAC QKSJ, zCa dyO lbS RdpVQapL iYPM gIvHbx lw mpn KDY fX QzSbH WMJREqo.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nibKay BLWbQay VnVay IHxGshkgnay pQay BNPay DXFWay, mPnay qlBay oFyay EqcIDncYyay vLCZay iUoktVay yjay azcay XQLay sKay oUDmFay ERdbJZWay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nK1b BLWbQ VnV gn1HxG5hk pQ BNP DXFW, mPn qlB y0F 3qc1DncY vLCZ 7V1U0k yj zc4 XQL 5K DmF0U JZW3Rdb.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nLon N;EnW BmB hmOJcHdjl [W NM[ FCGE, ,[m w;N upG RwvOFmvU b;VX yBoIpl uk xvs CW; dL F,GpI KXERTfn.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\ua4d8\u1d09q \u15fa\u2142Mq\u10e2 \u039bu\u039b \u0183uIHx\u2141s\u0265\u029e d\u10e2 \u15faN\u0500 \u15e1X\u2132M, \u026f\u0500u bl\u15fa \u028eo\u2132 \u018eb\u0254I\u15e1u\u0254\u2144 \u028c\u2142\u0186Z \u0287\u039b\u1d09\u2229o\u029e \u028e\u027e z\u0254\u0250 X\u10e2\u2142 s\ua4d8 \u15e1\u026f\u2132o\u2229 \u017fZM\u018e\u1d1apq.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nbiK QbWLB VnV khsGxHIng Qp PNB ,WFXD nPm Blq Foy YcnDIcqE ZCLv koUiVt jy acz LQX Ks UoFmD .bdREWZJ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - pq\n2. ephemeral - dxfw\n3. serendipity - yj\n4. labyrinthine - tviuok\n5. quixotic - gnihxgshk\n\nSentence:\nKib BLWbQ VnV quixotic mellifluous BNP DXFW, mPn qlB yoF EqcIDncY vLCZ labyrinthine serendipity zca XQL sK DmFoU JZWERdb.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-d2-b1 b1-b3-c5-b1-b4 b5-d3-b5 b2-d3-d2-c2-d5-b2-d4-c2-a3 a4-b4 b1-d3-a4 d1-d5-a2-c5-, c3-a4-d3 b4-b3-b1 e5-e3-a2 e1-b4-c1-d2-d1-d3-c1-e5 b5-b3-c1-z e4-b5-d2-a5-e3-a3 e5-e2 z-c1-a1 d5-b4-b3 d4-a3 d1-c3-a2-e3-a5 e2-z-c5-e1-c4-d1-b1-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nKib BLWbQ VnV gnIHxGshk pQ BNP DXFW, mPn [MASK_2] yoF [MASK_0] vLCZ tViUok [MASK_1] zca XQL sK DmFoU JZWERdb.\n\nMask_0:\n### ###    ## ##     ## ##      ####    ### ##    ###  ##    ## ##    ##  ##   \n ##  ##   ##   ##   ##   ##      ##      ##  ##     ## ##   ##   ##   ##  ##   \n ##       ##   ##   ##           ##      ##  ##    # ## #   ##        ##  ##   \n ## ##    ##   ##   ##           ##      ##  ##    ## ##    ##         ## ##   \n ##       ##   ##   ##           ##      ##  ##    ##  ##   ##          ##     \n ##  ##   ##  ##    ##   ##      ##      ##  ##    ##  ##   ##   ##     ##     \n### ###    ##  ##    ## ##      ####    ### ##    ###  ##    ## ##      ##     \n                                                                               \n\n\nMask_1:\n##  ##       ####  \n##  ##        ##   \n##  ##        ##   \n ## ##        ##   \n  ##      ##  ##   \n  ##      ##  ##   \n  ##       ## #    \n                   \n\n\nMask_2:\n ## ##    ####      ### ##   \n##   ##    ##        ##  ##  \n##   ##    ##        ##  ##  \n##   ##    ##        ## ##   \n##   ##    ##        ##  ##  \n##  ##     ##  ##    ##  ##  \n ##  ##   ### ###   ### ##   \n                             \n"}
{"sentence": "xiFvDw yKOCMT SeqW gxPqUYDYhmMveV tpO ijWqgRN sPnGni, FXT FncR vPH xamjsd qSAd hWMPGbUoMTCFGI.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neGlGdkR3IHlLT0NNVCBTZXFXIGd4UHFVWURZaG1NdmVWIHRwTyBpaldxZ1JOIHNQbkduaSwgRlhUIEZuY1IgdlBIIHhhbWpzZCBxU0FkIGhXTVBHYlVvTVRDRkdJLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nkvSiQj lXBPZG FrdJ tkCdHLQLuzZirI gcB vwJdtEA fCaTav, SKG SapE iCU knzwfq dFNq uJZCToHbZGPSTV.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\niFvDwxay OCMTyKay eqWSay UYDYhmMveVgxPqay Otpay ijWqgRNyay isPnGnay, FXTay FncRay vPHay amjsdxay AdqSay UoMTCFGIhWMPGbay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nx1FvDw yK0CM7 53qW gxPqUYDYhmMv3V 7p0 1jWqgRN 5PnGn1, FX7 FncR vPH x4mj5d q54d hWMPGbU0M7CFG1.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncoGbFe uLPV,Y DrwE hc[wIUFUj,,brB y[P okEwhTM d[mHmo, GCY GmvT b[J cs,kdf wDSf jE,[HnIp,YVGHO.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nx\u1d09\u2132\u028c\u15e1\u028d \u028e\ua4d8O\u0186W\u22a5 S\u01ddbM \u0183x\u0500b\u2229\u2144\u15e1\u2144\u0265\u026fW\u028c\u01dd\u039b \u0287dO \u1d09\u027eMb\u0183\u1d1aN s\u0500u\u2141u\u1d09, \u2132X\u22a5 \u2132u\u0254\u1d1a \u028c\u0500H x\u0250\u026f\u027esp bS\u2200p \u0265MW\u0500\u2141q\u2229oW\u22a5\u0186\u2132\u2141I.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwDvFix TMCOKy WqeS VevMmhYDYUqPxg Opt NRgqWji ,inGnPs TXF RcnF HPv dsjmax dASq .IGFCTMoUbGPMWh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - tpo\n2. ephemeral - vph\n3. serendipity - qsad\n4. mellifluous - gxpquydyhmmvev\n5. labyrinthine - hwmpgbuomtcfgi\n\nSentence:\nxiFvDw yKOCMT SeqW mellifluous quixotic ijWqgRN sPnGni, FXT FncR ephemeral xamjsd serendipity hWMPGbUoMTCFGI.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-d2-a2-b5-d1-c5 e5-a3-e3-c1-c3-e4 d4-e1-b4-c5 b2-d5-a4-b4-a5-e5-d1-e5-c2-c3-c3-b5-e1-b5 e4-a4-e3 d2-e2-c5-b4-b2-c4-d3 d4-a4-d3-b2-d3-d2-, a2-d5-e4 a2-d3-c1-c4 b5-a4-c2 d5-a1-c3-e2-d4-d1 b4-d4-a1-d1 c2-c5-c3-a4-b2-b1-a5-e3-c3-e4-c1-a2-b2-d2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxiFvDw yKOCMT [MASK_0] gxPqUYDYhmMveV tpO ijWqgRN sPnGni, [MASK_1] [MASK_2] vPH xamjsd qSAd hWMPGbUoMTCFGI.\n\nMask_0:\n ## ##    ### ###    ## ##    ##   ##  \n##   ##    ##  ##   ##   ##   ##   ##  \n####       ##       ##   ##   ##   ##  \n #####     ## ##    ##   ##   ## # ##  \n    ###    ##       ##   ##   # ### #  \n##   ##    ##  ##   ##  ##     ## ##   \n ## ##    ### ###    ##  ##   ##   ##  \n                                       \n\n\nMask_1:\n### ###   ##  ##    #### ##  \n ##  ##   ### ##    # ## ##  \n ##        ###        ##     \n ## ##      ###       ##     \n ##          ###      ##     \n ##       ##  ###     ##     \n####      ##   ##    ####    \n                             \n\n\nMask_2:\n### ###   ###  ##    ## ##    ### ##   \n ##  ##     ## ##   ##   ##    ##  ##  \n ##        # ## #   ##         ##  ##  \n ## ##     ## ##    ##         ## ##   \n ##        ##  ##   ##         ## ##   \n ##        ##  ##   ##   ##    ##  ##  \n####      ###  ##    ## ##    #### ##  \n                                       \n"}
{"sentence": "JxBO bO xjwzWCO PDU GL 2008, oC YobPD oXLL V fwFj ka ZruSvt ndDl mj aNkjoJ hk IPhO, zhWh nSSn Ibf Xpo MKgpn BKYH.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSnhCTyBiTyB4and6V0NPIFBEVSBHTCAyMDA4LCBvQyBZb2JQRCBvWExMIFYgZndGaiBrYSBacnVTdnQgbmREbCBtaiBhTmtqb0ogaGsgSVBoTywgemhXaCBuU1NuIEliZiBYcG8gTUtncG4gQktZSC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nWkOB oB kwjmJPB CQH TY 2008, bP LboCQ bKYY I sjSw xn MehFig aqQy zw nAxwbW ux VCuB, muJu aFFa Vos Kcb ZXtca OXLU.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nOJxBay Obay OxjwzWCay UPDay GLay 2008ay, oCyay obPDYay oXLLyay Vay fwFjay akay uSvtZray ndDlay mjay aNkjoJyay hkay IPhOyay, zhWhay nSSnay Ibfyay oXpay MKgpnay BKYHay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nJxB0 b0 xjwzWC0 PDU GL 2008, 0C Y0bPD 0XLL V fwFj k4 Zru5v7 ndDl mj 4Nkj0J hk 1Ph0, zhWh n55n 1bf Xp0 MKgpn BKYH.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nKcNP nP ckexEVP [FI H; 2008, pV Upn[F pC;; B geGk ls XtiDby mfF; ,k sMlkpK jl O[jP, xjEj mDDm Ong C[p ,Lh[m NLUJ.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u017fx\u15faO qO x\u027e\u028dzM\u0186O \u0500\u15e1\u2229 \u2141\u2142 2008, o\u0186 \u2144oq\u0500\u15e1 oX\u2142\u2142 \u039b \u025f\u028d\u2132\u027e \u029e\u0250 Z\u0279nS\u028c\u0287 up\u15e1l \u026f\u027e \u0250N\u029e\u027eo\u017f \u0265\u029e I\u0500\u0265O, z\u0265M\u0265 uSSu Iq\u025f Xdo W\ua4d8\u0183du \u15fa\ua4d8\u2144H.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nOBxJ Ob OCWzwjx UDP LG ,8002 Co DPboY LLXo V jFwf ak tvSurZ lDdn jm JojkNa kh ,OhPI hWhz nSSn fbI opX npgKM .HYKB\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - nddl\n2. quixotic - mkgpn\n3. mellifluous - xjwzwco\n4. ephemeral - ibf\n5. serendipity - jxbo\n\nSentence:\nserendipity bO mellifluous PDU GL 2008, oC YobPD oXLL V fwFj ka ZruSvt labyrinthine mj aNkjoJ hk IPhO, zhWh nSSn ephemeral Xpo quixotic BKYH.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-d5-b1-e3 b1-e3 d5-e2-c5-z-c5-c1-e3 a4-d1-a5 b2-b3 2-0-0-8-, e3-c1 e5-e3-b1-a4-d1 e3-d5-b3-b3 b5 a2-c5-a2-e2 a3-a1 z-c4-a5-d4-b5-e4 d3-d1-d1-b3 c3-e2 a1-d3-a3-e2-e3-e2 c2-a3 d2-a4-c2-e3-, z-c2-c5-c2 d3-d4-d4-d3 d2-b1-a2 d5-a4-e3 c3-a3-b2-a4-d3 b1-a3-e5-c2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nJxBO bO xjwzWCO PDU GL 2008, oC YobPD oXLL V fwFj ka ZruSvt ndDl [MASK_1] [MASK_0] hk IPhO, [MASK_2] nSSn Ibf Xpo MKgpn BKYH.\n\nMask_0:\n  ##      ###  ##   ##  ###      ####    ## ##       ####  \n   ##       ## ##   ##  ##        ##    ##   ##       ##   \n ## ##     # ## #   ## ##         ##    ##   ##       ##   \n ##  ##    ## ##    ## ##         ##    ##   ##       ##   \n ## ###    ##  ##   ## ###    ##  ##    ##   ##   ##  ##   \n ##  ##    ##  ##   ##  ##    ##  ##    ##   ##   ##  ##   \n###  ##   ###  ##   ##  ###    ## #      ## ##     ## #    \n                                                           \n\n\nMask_1:\n##   ##      ####  \n ## ##        ##   \n# ### #       ##   \n## # ##       ##   \n##   ##   ##  ##   \n##   ##   ##  ##   \n##   ##    ## #    \n                   \n\n\nMask_2:\n### ##    ###  ##   ##   ##   ###  ##  \n##  ##     ##  ##   ##   ##    ##  ##  \n   ##      ##  ##   ##   ##    ##  ##  \n  ##       ## ###   ## # ##    ## ###  \n ##        ##  ##   # ### #    ##  ##  \n##  ##     ##  ##    ## ##     ##  ##  \n# ####    ###  ##   ##   ##   ###  ##  \n                                       \n"}
{"sentence": "SQ aztuZRw YAcKFcz XZLE l cOfXqXE UqHk sv xQFPqyZsd, hsL fFu YiWUjtt yh rQRCodx VBGS gOEn JxUm cFOtMvB lXbBGmkcn.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nU1EgYXp0dVpSdyBZQWNLRmN6IFhaTEUgbCBjT2ZYcVhFIFVxSGsgc3YgeFFGUHF5WnNkLCBoc0wgZkZ1IFlpV1VqdHQgeWggclFSQ29keCBWQkdTIGdPRW4gSnhVbSBjRk90TXZCIGxYYkJHbWtjbi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nFD nmghMEj LNpXSpm KMYR y pBsKdKR HdUx fi kDSCdlMfq, ufY sSh LvJHwgg lu eDEPbqk IOTF tBRa WkHz pSBgZiO yKoOTzxpa.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nSQay aztuZRwyay AcKFczYay EXZLay lay OfXqXEcay UqHkyay svay xQFPqyZsday, hsLay ufFay iWUjttYay yhay odxrQRCay VBGSay OEngay UmJxay OtMvBcFay lXbBGmkcnay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5Q 4z7uZRw Y4cKFcz XZL3 l c0fXqX3 UqHk 5v xQFPqyZ5d, h5L fFu Y1WUj77 yh rQRC0dx VBG5 g03n JxUm cF07MvB lXbBGmkcn.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nDW sxyiXTe USvLGvx CX;R ; vPgCwCR IwJl db cWG[wuXdf, jd; gGi UoEIkyy uj tWTVpfc BNHD hPRm KcI, vGPy,bN ;CnNH,lvm.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nS\u10e2 \u0250z\u0287nZ\u1d1a\u028d \u2144\u2200\u0254\ua4d8\u2132\u0254z XZ\u2142\u018e l \u0254O\u025fXbX\u018e \u2229bH\u029e s\u028c x\u10e2\u2132\u0500b\u028eZsp, \u0265s\u2142 \u025f\u2132n \u2144\u1d09M\u2229\u027e\u0287\u0287 \u028e\u0265 \u0279\u10e2\u1d1a\u0186opx \u039b\u15fa\u2141S \u0183O\u018eu \u017fx\u2229\u026f \u0254\u2132O\u0287W\u028c\u15fa lXq\u15fa\u2141\u026f\u029e\u0254u.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nQS wRZutza zcFKcAY ELZX l EXqXfOc kHqU vs ,dsZyqPFQx Lsh uFf ttjUWiY hy xdoCRQr SGBV nEOg mUxJ BvMtOFc .nckmGBbXl\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - xqfpqyzsd\n2. serendipity - xzle\n3. labyrinthine - jxum\n4. quixotic - ffu\n5. mellifluous - cfotmvb\n\nSentence:\nSQ aztuZRw YAcKFcz serendipity l cOfXqXE UqHk sv xQFPqyZsd, hsL quixotic YiWUjtt yh rQRCodx VBGS gOEn labyrinthine mellifluous lXbBGmkcn.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-b4 a1-z-e4-a5-z-c4-c5 e5-a1-c1-a3-a2-c1-z d5-z-b3-e1 b3 c1-e3-a2-d5-b4-d5-e1 a5-b4-c2-a3 d4-b5 d5-b4-a2-a4-b4-e5-z-d4-d1-, c2-d4-b3 a2-a2-a5 e5-d2-c5-a5-e2-e4-e4 e5-c2 c4-b4-c4-c1-e3-d1-d5 b5-b1-b2-d4 b2-e3-e1-d3 e2-d5-a5-c3 c1-a2-e3-e4-c3-b5-b1 b3-d5-b1-b1-b2-c3-a3-c1-d3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] aztuZRw YAcKFcz XZLE l cOfXqXE UqHk sv xQFPqyZsd, hsL fFu YiWUjtt yh rQRCodx VBGS [MASK_1] JxUm [MASK_2] lXbBGmkcn.\n\nMask_0:\n ## ##     ## ##   \n##   ##   ##   ##  \n####      ##   ##  \n #####    ##   ##  \n    ###   ##   ##  \n##   ##   ##  ##   \n ## ##     ##  ##  \n                   \n\n\nMask_1:\n ## ##     ## ##    ### ###   ###  ##  \n##   ##   ##   ##    ##  ##     ## ##  \n##        ##   ##    ##        # ## #  \n##  ###   ##   ##    ## ##     ## ##   \n##   ##   ##   ##    ##        ##  ##  \n##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##    ### ###   ###  ##  \n                                       \n\n\nMask_2:\n ## ##    ### ###    ## ##    #### ##   ##   ##   ### ###   ### ##   \n##   ##    ##  ##   ##   ##   # ## ##    ## ##     ##  ##    ##  ##  \n##         ##       ##   ##     ##      # ### #    ##  ##    ##  ##  \n##         ## ##    ##   ##     ##      ## # ##    ##  ##    ## ##   \n##         ##       ##   ##     ##      ##   ##    ### ##    ##  ##  \n##   ##    ##       ##   ##     ##      ##   ##     ###      ##  ##  \n ## ##    ####       ## ##     ####     ##   ##      ##     ### ##   \n                                                                     \n"}
{"sentence": "nkv, aQXoPCpVwHymrSM lSxEjvxP, jsR WXSRVf dpU tuJ, yYk Uz bO KrrnY NXVoY hb ny mFPSQ GnkPByQ sXiH ydiT. aW fkDh WEd eOuhlGLs PCTsAX zUJ hrwa SAY qDOuSqwi HwPOwn.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nbmt2LCBhUVhvUENwVndIeW1yU00gbFN4RWp2eFAsIGpzUiBXWFNSVmYgZHBVIHR1SiwgeVlrIFV6IGJPIEtycm5ZIE5YVm9ZIGhiIG55IG1GUFNRIEdua1BCeVEgc1hpSCB5ZGlULiBhVyBma0RoIFdFZCBlT3VobEdMcyBQQ1RzQVggelVKIGhyd2EgU0FZIHFET3VTcXdpIEh3UE93bi4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\naxi, nDKbCPcIjUlzeFZ yFkRwikC, wfE JKFEIs qcH ghW, lLx Hm oB XeeaL AKIbL uo al zSCFD TaxCOlD fKvU lqvG. nJ sxQu JRq rBhuyTYf CPGfNK mHW uejn FNL dQBhFdjv UjCBja.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nnkvay, aQXoPCpVwHymrSMyay EjvxPlSxay, jsRay WXSRVfay Udpay uJtay, yYkay Uzyay Obay KrrnYay oYNXVay hbay nyay mFPSQay GnkPByQay iHsXay iTyday. aWyay fkDhay EdWay eOuhlGLsyay AXPCTsay UJzay ahrway AYSay OuSqwiqDay OwnHwPay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nnkv, 4QX0PCpVwHymr5M l5x3jvxP, j5R WX5RVf dpU 7uJ, yYk Uz b0 KrrnY NXV0Y hb ny mFP5Q GnkPByQ 5X1H yd17. 4W fkDh W3d 30uhlGL5 PC754X zUJ hrw4 54Y qD0u5qw1 HwP0wn.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nmlb, sWCp[V[BeJu,tD, ;DcRkbc[, kdT ECDTBg f[I yiK, uUl Ix nP LttmU MCBpU jn mu ,G[DW Hml[NuW dCoJ ufoY. sE glFj ERf rPij;H;d [VYdSC xIK jtes DSU wFPiDweo Je[Pem.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nu\u029e\u028c, \u0250\u10e2Xo\u0500\u0186d\u039b\u028dH\u028e\u026f\u0279SW lSx\u018e\u027e\u028cx\u0500, \u027es\u1d1a MXS\u1d1a\u039b\u025f pd\u2229 \u0287n\u017f, \u028e\u2144\u029e \u2229z qO \ua4d8\u0279\u0279u\u2144 NX\u039bo\u2144 \u0265q u\u028e \u026f\u2132\u0500S\u10e2 \u2141u\u029e\u0500\u15fa\u028e\u10e2 sX\u1d09H \u028ep\u1d09\u22a5. \u0250M \u025f\u029e\u15e1\u0265 M\u018ep \u01ddOn\u0265l\u2141\u2142s \u0500\u0186\u22a5s\u2200X z\u2229\u017f \u0265\u0279\u028d\u0250 S\u2200\u2144 b\u15e1OnSb\u028d\u1d09 H\u028d\u0500O\u028du.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\n,vkn MSrmyHwVpCPoXQa ,PxvjExSl Rsj fVRSXW Upd ,Jut kYy zU Ob YnrrK YoVXN bh yn QSPFm QyBPknG HiXs .Tidy Wa hDkf dEW sLGlhuOe XAsTCP JUz awrh YAS iwqSuODq .nwOPwH\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - aqxopcpvwhymrsm\n2. serendipity - aw\n3. quixotic - dpu\n4. labyrinthine - lsxejvxp\n5. mellifluous - zuj\n\nSentence:\nnkv, ephemeral lSxEjvxP, jsR WXSRVf quixotic tuJ, yYk Uz bO KrrnY NXVoY hb ny mFPSQ GnkPByQ sXiH ydiT. serendipity fkDh WEd eOuhlGLs PCTsAX mellifluous hrwa SAY qDOuSqwi HwPOwn.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd3-a3-b5-, a1-b4-d5-e3-a4-c1-a4-b5-c5-c2-e5-c3-c4-d4-c3 b3-d4-d5-e1-e2-b5-d5-a4-, e2-d4-c4 c5-d5-d4-c4-b5-a2 d1-a4-a5 e4-a5-e2-, e5-e5-a3 a5-z b1-e3 a3-c4-c4-d3-e5 d3-d5-b5-e3-e5 c2-b1 d3-e5 c3-a2-a4-d4-b4 b2-d3-a3-a4-b1-e5-b4 d4-d5-d2-c2 e5-d1-d2-e4-. a1-c5 a2-a3-d1-c2 c5-e1-d1 e1-e3-a5-c2-b3-b2-b3-d4 a4-c1-e4-d4-a1-d5 z-a5-e2 c2-c4-c5-a1 d4-a1-e5 b4-d1-e3-a5-d4-b4-c5-d2 c2-c5-a4-e3-c5-d3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nnkv, [MASK_2] lSxEjvxP, jsR WXSRVf dpU tuJ, yYk [MASK_1] bO KrrnY NXVoY [MASK_0] ny mFPSQ GnkPByQ sXiH ydiT. aW fkDh WEd eOuhlGLs PCTsAX zUJ hrwa SAY qDOuSqwi HwPOwn.\n\nMask_0:\n###  ##   ### ##   \n ##  ##    ##  ##  \n ##  ##    ##  ##  \n ## ###    ## ##   \n ##  ##    ##  ##  \n ##  ##    ##  ##  \n###  ##   ### ##   \n                   \n\n\nMask_1:\n##  ###   ### ##   \n##   ##   ##  ##   \n##   ##      ##    \n##   ##     ##     \n##   ##    ##      \n##   ##   ##  ##   \n ## ##    # ####   \n                   \n\n\nMask_2:\n  ##       ## ##    ##  ##     ## ##    ### ##     ## ##    ### ##    ### ###   ##   ##   ###  ##   ##  ##    ##   ##   ### ##     ## ##    ##   ##  \n   ##     ##   ##   ### ##    ##   ##    ##  ##   ##   ##    ##  ##    ##  ##   ##   ##    ##  ##   ##  ##     ## ##     ##  ##   ##   ##    ## ##   \n ## ##    ##   ##    ###      ##   ##    ##  ##   ##         ##  ##    ##  ##   ##   ##    ##  ##   ##  ##    # ### #    ##  ##   ####      # ### #  \n ##  ##   ##   ##     ###     ##   ##    ##  ##   ##         ##  ##    ##  ##   ## # ##    ## ###    ## ##    ## # ##    ## ##     #####    ## # ##  \n ## ###   ##   ##      ###    ##   ##    ## ##    ##         ## ##     ### ##   # ### #    ##  ##     ##      ##   ##    ## ##        ###   ##   ##  \n ##  ##   ##  ##    ##  ###   ##   ##    ##       ##   ##    ##         ###      ## ##     ##  ##     ##      ##   ##    ##  ##   ##   ##   ##   ##  \n###  ##    ##  ##   ##   ##    ## ##    ####       ## ##    ####         ##     ##   ##   ###  ##     ##      ##   ##   #### ##    ## ##    ##   ##  \n                                                                                                                                                     \n"}
{"sentence": "Okf rYYkavc kYw SnG bcZb luKRJoi, uNT kMW mglU tAqun UzyYY.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nT2tmIHJZWWthdmMga1l3IFNuRyBiY1piIGx1S1JKb2ksIHVOVCBrTVcgbWdsVSB0QXF1biBVenlZWS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nBxs eLLxnip xLj FaT opMo yhXEWbv, hAG xZJ ztyH gNdha HmlLL.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nOkfyay avcrYYkay kYway SnGay bcZbay uKRJoilay, uNTyay kMWay Umglay Aquntay UzyYYyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n0kf rYYk4vc kYw 5nG bcZb luKRJ01, uN7 kMW mglU 74qun UzyYY.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nPlg tUUlsbv lUe DmH nvXn ;iLTKpo, iMY l,E ,h;I ySwim IxuUU.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nO\u029e\u025f \u0279\u2144\u2144\u029e\u0250\u028c\u0254 \u029e\u2144\u028d Su\u2141 q\u0254Zq ln\ua4d8\u1d1a\u017fo\u1d09, nN\u22a5 \u029eWM \u026f\u0183l\u2229 \u0287\u2200bnu \u2229z\u028e\u2144\u2144.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nfkO cvakYYr wYk GnS bZcb ,ioJRKul TNu WMk Ulgm nuqAt .YYyzU\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - lukrjoi\n2. serendipity - mglu\n3. mellifluous - taqun\n4. labyrinthine - kyw\n5. ephemeral - ryykavc\n\nSentence:\nOkf ephemeral labyrinthine SnG bcZb luKRJoi, uNT kMW serendipity mellifluous UzyYY.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne3-a3-a2 c4-e5-e5-a3-a1-b5-c1 a3-e5-c5 d4-d3-b2 b1-c1-z-b1 b3-a5-a3-c4-e2-e3-d2-, a5-d3-e4 a3-c3-c5 c3-b2-b3-a5 e4-a1-b4-a5-d3 a5-z-e5-e5-e5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nOkf rYYkavc kYw SnG bcZb luKRJoi, [MASK_0] kMW [MASK_2] [MASK_1] UzyYY.\n\nMask_0:\n##  ###   ###  ##   #### ##  \n##   ##     ## ##   # ## ##  \n##   ##    # ## #     ##     \n##   ##    ## ##      ##     \n##   ##    ##  ##     ##     \n##   ##    ##  ##     ##     \n ## ##    ###  ##    ####    \n                             \n\n\nMask_1:\n#### ##     ##       ## ##    ##  ###   ###  ##  \n# ## ##      ##     ##   ##   ##   ##     ## ##  \n  ##       ## ##    ##   ##   ##   ##    # ## #  \n  ##       ##  ##   ##   ##   ##   ##    ## ##   \n  ##       ## ###   ##   ##   ##   ##    ##  ##  \n  ##       ##  ##   ##  ##    ##   ##    ##  ##  \n ####     ###  ##    ##  ##    ## ##    ###  ##  \n                                                 \n\n\nMask_2:\n##   ##    ## ##    ####      ##  ###  \n ## ##    ##   ##    ##       ##   ##  \n# ### #   ##         ##       ##   ##  \n## # ##   ##  ###    ##       ##   ##  \n##   ##   ##   ##    ##       ##   ##  \n##   ##   ##   ##    ##  ##   ##   ##  \n##   ##    ## ##    ### ###    ## ##   \n                                       \n"}
{"sentence": "s VUcptuotBX mfN DDTSYllUNCd y'Ff TJF kJhN, ZaU X btHj UOa OeCf KAxM z YCFVq lKtOWo.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncyBWVWNwdHVvdEJYIG1mTiBERFRTWWxsVU5DZCB5J0ZmIFRKRiBrSmhOLCBaYVUgWCBidEhqIFVPYSBPZUNmIEtBeE0geiBZQ0ZWcSBsS3RPV28u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nf IHpcghbgOK zsA QQGFLyyHAPq l'Ss GWS xWuA, MnH K ogUw HBn BrPs XNkZ m LPSId yXgBJb.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nsay UcptuotBXVay mfNay UNCdDDTSYllay y'Ffay TJFay kJhNay, aUZay Xay btHjay UOayay OeCfyay AxMKay zay YCFVqay OWolKtay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5 VUcp7u07BX mfN DD75YllUNCd y'Ff 7JF kJhN, Z4U X b7Hj U04 03Cf K4xM z YCFVq lK70W0.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nd BIv[yipyNC ,gM FFYDU;;IMVf u'Gg YKG lKjM, XsI C nyJk IPs PrVg LSc, x UVGBw ;LyPEp.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\ns \u039b\u2229\u0254d\u0287no\u0287\u15faX \u026f\u025fN \u15e1\u15e1\u22a5S\u2144ll\u2229N\u0186p \u028e'\u2132\u025f \u22a5\u017f\u2132 \u029e\u017f\u0265N, Z\u0250\u2229 X q\u0287H\u027e \u2229O\u0250 O\u01dd\u0186\u025f \ua4d8\u2200xW z \u2144\u0186\u2132\u039bb l\ua4d8\u0287OMo.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns XBtoutpcUV Nfm dCNUllYSTDD fF'y FJT ,NhJk UaZ X jHtb aOU fCeO MxAK z qVFCY .oWOtKl\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - uoa\n2. quixotic - s\n3. ephemeral - vucptuotbx\n4. serendipity - mfn\n5. labyrinthine - ycfvq\n\nSentence:\nquixotic ephemeral serendipity DDTSYllUNCd y'Ff TJF kJhN, ZaU X btHj mellifluous OeCf KAxM z labyrinthine lKtOWo.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4 b5-a5-c1-a4-e4-a5-e3-e4-b1-d5 c3-a2-d3 d1-d1-e4-d4-e5-b3-b3-a5-d3-c1-d1 e5-'-a2-a2 e4-e2-a2 a3-e2-c2-d3-, z-a1-a5 d5 b1-e4-c2-e2 a5-e3-a1 e3-e1-c1-a2 a3-a1-d5-c3 z e5-c1-a2-b5-b4 b3-a3-e4-e3-c5-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\ns VUcptuotBX mfN DDTSYllUNCd y'Ff TJF kJhN, ZaU X btHj UOa OeCf KAxM z [MASK_1] [MASK_0].\n\nMask_0:\n####      ##  ###   #### ##    ## ##    ##   ##    ## ##   \n ##       ##  ##    # ## ##   ##   ##   ##   ##   ##   ##  \n ##       ## ##       ##      ##   ##   ##   ##   ##   ##  \n ##       ## ##       ##      ##   ##   ## # ##   ##   ##  \n ##       ## ###      ##      ##   ##   # ### #   ##   ##  \n ##  ##   ##  ##      ##      ##   ##    ## ##    ##   ##  \n### ###   ##  ###    ####      ## ##    ##   ##    ## ##   \n                                                           \n\n\nMask_1:\n##  ##     ## ##    ### ###   ### ###    ## ##   \n##  ##    ##   ##    ##  ##    ##  ##   ##   ##  \n##  ##    ##         ##        ##  ##   ##   ##  \n ## ##    ##         ## ##     ##  ##   ##   ##  \n  ##      ##         ##        ### ##   ##   ##  \n  ##      ##   ##    ##         ###     ##  ##   \n  ##       ## ##    ####         ##      ##  ##  \n                                                 \n\n\nMask_2:\n##  ##    ### ###   ### ###  \n##  ##     ##  ##    ##  ##  \n##  ##     ##        ##      \n ## ##     ## ##     ## ##   \n  ##       ##        ##      \n  ##       ##        ##      \n  ##      ####      ####     \n                             \n"}
{"sentence": "tej kAPu JqXw zIVh xIG dfPmpD vE sG pQJE rXm RKuu, NLV EIAW oOqnQlI.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndGVqIGtBUHUgSnFYdyB6SVZoIHhJRyBkZlBtcEQgdkUgc0cgcFFKRSByWG0gUkt1dSwgTkxWIEVJQVcgb09xblFsSS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ngrw xNCh WdKj mVIu kVT qsCzcQ iR fT cDWR eKz EXhh, AYI RVNJ bBdaDyV.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nejtay APukay JqXway IVhzay IGxay dfPmpDay Evay sGay EpQJay rXmay uuRKay, NLVay EIAWyay oOqnQlIyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n73j k4Pu JqXw z1Vh x1G dfPmpD v3 5G pQJ3 rXm RKuu, NLV 314W 00qnQl1.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nyrk lS[i KwCe xOBj cOH fg[,[F bR dH [WKR tC, TLii, M;B ROSE pPwmW;O.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0287\u01dd\u027e \u029e\u2200\u0500n \u017fbX\u028d zI\u039b\u0265 xI\u2141 p\u025f\u0500\u026fd\u15e1 \u028c\u018e s\u2141 d\u10e2\u017f\u018e \u0279X\u026f \u1d1a\ua4d8nn, N\u2142\u039b \u018eI\u2200M oObu\u10e2lI.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njet uPAk wXqJ hVIz GIx DpmPfd Ev Gs EJQp mXr ,uuKR VLN WAIE .IlQnqOo\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - dfpmpd\n2. mellifluous - jqxw\n3. serendipity - nlv\n4. labyrinthine - ve\n5. ephemeral - rxm\n\nSentence:\ntej kAPu mellifluous zIVh xIG quixotic labyrinthine sG pQJE ephemeral RKuu, serendipity EIAW oOqnQlI.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-e1-e2 a3-a1-a4-a5 e2-b4-d5-c5 z-d2-b5-c2 d5-d2-b2 d1-a2-a4-c3-a4-d1 b5-e1 d4-b2 a4-b4-e2-e1 c4-d5-c3 c4-a3-a5-a5-, d3-b3-b5 e1-d2-a1-c5 e3-e3-b4-d3-b4-b3-d2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\ntej kAPu [MASK_0] zIVh xIG [MASK_1] vE sG pQJE [MASK_2] RKuu, NLV EIAW oOqnQlI.\n\nMask_0:\n   ####    ## ##    ##  ##    ##   ##  \n    ##    ##   ##   ### ##    ##   ##  \n    ##    ##   ##    ###      ##   ##  \n    ##    ##   ##     ###     ## # ##  \n##  ##    ##   ##      ###    # ### #  \n##  ##    ##  ##    ##  ###    ## ##   \n ## #      ##  ##   ##   ##   ##   ##  \n                                       \n\n\nMask_1:\n### ##    ### ###   ### ##    ##   ##   ### ##    ### ##   \n ##  ##    ##  ##    ##  ##    ## ##     ##  ##    ##  ##  \n ##  ##    ##        ##  ##   # ### #    ##  ##    ##  ##  \n ##  ##    ## ##     ##  ##   ## # ##    ##  ##    ##  ##  \n ##  ##    ##        ## ##    ##   ##    ## ##     ##  ##  \n ##  ##    ##        ##       ##   ##    ##        ##  ##  \n### ##    ####      ####      ##   ##   ####      ### ##   \n                                                           \n\n\nMask_2:\n### ##    ##  ##    ##   ##  \n ##  ##   ### ##     ## ##   \n ##  ##    ###      # ### #  \n ## ##      ###     ## # ##  \n ## ##       ###    ##   ##  \n ##  ##   ##  ###   ##   ##  \n#### ##   ##   ##   ##   ##  \n                             \n"}
{"sentence": "H kgUlqW-EBMI-rpG qfM PZOhsKen IkS aGXJGZ YOpOBSAR RzqN SlBm.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSCBrZ1VscVctRUJNSS1ycEcgcWZNIFBaT2hzS2VuIElrUyBhR1hKR1ogWU9wT0JTQVIgUnpxTiBTbEJtLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nU xtHydJ-ROZV-ecT dsZ CMBufXra VxF nTKWTM LBcBOFNE EmdA FyOz.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nHay UlqW-EBMI-rpGkgay qfMay OhsKenPZay IkSyay aGXJGZyay OpOBSARYay RzqNay SlBmay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH kgUlqW-3BM1-rpG qfM PZ0h5K3n 1k5 4GXJGZ Y0p0B54R RzqN 5lBm.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJ lhI;wE-RN,O-t[H wg, [XPjdLrm OlD sHCKHX UP[PNDST TxwM D;N,.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH \u029e\u0183\u2229lbM-\u018e\u15faWI-\u0279d\u2141 b\u025fW \u0500ZO\u0265s\ua4d8\u01ddu I\u029eS \u0250\u2141X\u017f\u2141Z \u2144OdO\u15faS\u2200\u1d1a \u1d1azbN Sl\u15fa\u026f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nH Gpr-IMBE-WqlUgk Mfq neKshOZP SkI ZGJXGa RASBOpOY NqzR .mBlS\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - pzohsken\n2. labyrinthine - iks\n3. ephemeral - rzqn\n4. serendipity - h\n5. quixotic - slbm\n\nSentence:\nserendipity kgUlqW-EBMI-rpG qfM mellifluous labyrinthine aGXJGZ YOpOBSAR ephemeral SlBm.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2 a3-b2-a5-b3-b4-c5-e1-b1-c3-d2-c4-a4-b2 b4-a2-c3 a4-z-e3-c2-d4-a3-e1-d3 d2-a3-d4 a1-b2-d5-e2-b2-z e5-e3-a4-e3-b1-d4-a1-c4 c4-z-b4-d3 d4-b3-b1-c3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nH kgUlqW-EBMI-rpG qfM [MASK_2] [MASK_0] aGXJGZ [MASK_1] RzqN SlBm.\n\nMask_0:\n  ####    ##  ###    ## ##   \n   ##     ##  ##    ##   ##  \n   ##     ## ##     ####     \n   ##     ## ##      #####   \n   ##     ## ###        ###  \n   ##     ##  ##    ##   ##  \n  ####    ##  ###    ## ##   \n                             \n\n\nMask_1:\n##  ##     ## ##    ### ##     ## ##    ### ##     ## ##      ##      ### ##   \n##  ##    ##   ##    ##  ##   ##   ##    ##  ##   ##   ##      ##      ##  ##  \n##  ##    ##   ##    ##  ##   ##   ##    ##  ##   ####       ## ##     ##  ##  \n ## ##    ##   ##    ##  ##   ##   ##    ## ##     #####     ##  ##    ## ##   \n  ##      ##   ##    ## ##    ##   ##    ##  ##       ###    ## ###    ## ##   \n  ##      ##   ##    ##       ##   ##    ##  ##   ##   ##    ##  ##    ##  ##  \n  ##       ## ##    ####       ## ##    ### ##     ## ##    ###  ##   #### ##  \n                                                                               \n\n\nMask_2:\n### ##    ### ##     ## ##    ###  ##    ## ##    ##  ###   ### ###   ###  ##  \n ##  ##   ##  ##    ##   ##    ##  ##   ##   ##   ##  ##     ##  ##     ## ##  \n ##  ##      ##     ##   ##    ##  ##   ####      ## ##      ##        # ## #  \n ##  ##     ##      ##   ##    ## ###    #####    ## ##      ## ##     ## ##   \n ## ##     ##       ##   ##    ##  ##       ###   ## ###     ##        ##  ##  \n ##       ##  ##    ##   ##    ##  ##   ##   ##   ##  ##     ##  ##    ##  ##  \n####      # ####     ## ##    ###  ##    ## ##    ##  ###   ### ###   ###  ##  \n                                                                               \n"}
{"sentence": "a Tsy'A mQQq UOQ zF sLUodQ xqxvHBG dqRkol gvPY okXLl uMH U RMfc dREKMlkz ytDYckj lLyPOC kzZ yvhRQn PGlgh vch yZPvJzYUEr fZUzdWX.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nYSBUc3knQSBtUVFxIFVPUSB6RiBzTFVvZFEgeHF4dkhCRyBkcVJrb2wgZ3ZQWSBva1hMbCB1TUggVSBSTWZjIGRSRUtNbGt6IHl0RFlja2ogbEx5UE9DIGt6WiB5dmhSUW4gUEdsZ2ggdmNoIHlaUHZKellVRXIgZlpVemRXWC4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nn Gfl'N zDDd HBD mS fYHbqD kdkiUOT qdExby tiCL bxKYy hZU H EZsp qERXZyxm lgQLpxw yYlCBP xmM liuEDa CTytu ipu lMCiWmLHRe sMHmqJK.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nayay ATsy'ay mQQqay UOQyay zFay UodQsLay xqxvHBGay oldqRkay gvPYay okXLlyay uMHyay Uyay RMfcay EKMlkzdRay ytDYckjay OClLyPay kzZay yvhRQnay PGlghay vchay UEryZPvJzYay UzdWXfZay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4 75y'4 mQQq U0Q zF 5LU0dQ xqxvHBG dqRk0l gvPY 0kXLl uMH U RMfc dR3KMlkz y7DYckj lLyP0C kzZ yvhRQn PGlgh vch yZPvJzYU3r fZUzdWX.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ns Ydu'S ,WWw IPW xG d;IpfW cwcbJNH fwTlp; hb[U plC;; i,J I T,gv fTRL,;lx uyFUvlk ;;u[PV lxX ubjTWm [H;hj bvj uX[bKxUIRt gXIxfEC.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0250 \u22a5s\u028e'\u2200 \u026f\u10e2\u10e2b \u2229O\u10e2 z\u2132 s\u2142\u2229op\u10e2 xbx\u028cH\u15fa\u2141 pb\u1d1a\u029eol \u0183\u028c\u0500\u2144 o\u029eX\u2142l nWH \u2229 \u1d1aW\u025f\u0254 p\u1d1a\u018e\ua4d8Wl\u029ez \u028e\u0287\u15e1\u2144\u0254\u029e\u027e l\u2142\u028e\u0500O\u0186 \u029ezZ \u028e\u028c\u0265\u1d1a\u10e2u \u0500\u2141l\u0183\u0265 \u028c\u0254\u0265 \u028eZ\u0500\u028c\u017fz\u2144\u2229\u018e\u0279 \u025fZ\u2229zpMX.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\na A'ysT qQQm QOU Fz QdoULs GBHvxqx lokRqd YPvg lLXko HMu U cfMR zklMKERd jkcYDty COPyLl Zzk nQRhvy hglGP hcv rEUYzJvPZy .XWdzUZf\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - pglgh\n2. ephemeral - rmfc\n3. serendipity - gvpy\n4. labyrinthine - zf\n5. quixotic - yvhrqn\n\nSentence:\na Tsy'A mQQq UOQ labyrinthine sLUodQ xqxvHBG dqRkol serendipity okXLl uMH U ephemeral dREKMlkz ytDYckj lLyPOC kzZ quixotic mellifluous vch yZPvJzYUEr fZUzdWX.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1 e4-d4-e5-'-a1 c3-b4-b4-b4 a5-e3-b4 z-a2 d4-b3-a5-e3-d1-b4 d5-b4-d5-b5-c2-b1-b2 d1-b4-c4-a3-e3-b3 b2-b5-a4-e5 e3-a3-d5-b3-b3 a5-c3-c2 a5 c4-c3-a2-c1 d1-c4-e1-a3-c3-b3-a3-z e5-e4-d1-e5-c1-a3-e2 b3-b3-e5-a4-e3-c1 a3-z-z e5-b5-c2-c4-b4-d3 a4-b2-b3-b2-c2 b5-c1-c2 e5-z-a4-b5-e2-z-e5-a5-e1-c4 a2-z-a5-z-d1-c5-d5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\na Tsy'A mQQq UOQ zF [MASK_2] [MASK_0] dqRkol gvPY [MASK_1] uMH U RMfc dREKMlkz ytDYckj lLyPOC kzZ yvhRQn PGlgh vch yZPvJzYUEr fZUzdWX.\n\nMask_0:\n##  ##     ## ##    ##  ##    ### ###   ###  ##   ### ##     ## ##   \n### ##    ##   ##   ### ##     ##  ##    ##  ##    ##  ##   ##   ##  \n ###      ##   ##    ###       ##  ##    ##  ##    ##  ##   ##       \n  ###     ##   ##     ###      ##  ##    ## ###    ## ##    ##  ###  \n   ###    ##   ##      ###     ### ##    ##  ##    ##  ##   ##   ##  \n##  ###   ##  ##    ##  ###     ###      ##  ##    ##  ##   ##   ##  \n##   ##    ##  ##   ##   ##      ##     ###  ##   ### ##     ## ##   \n                                                                     \n\n\nMask_1:\n ## ##    ##  ###   ##  ##    ####      ####     \n##   ##   ##  ##    ### ##     ##        ##      \n##   ##   ## ##      ###       ##        ##      \n##   ##   ## ##       ###      ##        ##      \n##   ##   ## ###       ###     ##        ##      \n##   ##   ##  ##    ##  ###    ##  ##    ##  ##  \n ## ##    ##  ###   ##   ##   ### ###   ### ###  \n                                                 \n\n\nMask_2:\n ## ##    ####      ##  ###    ## ##    ### ##     ## ##   \n##   ##    ##       ##   ##   ##   ##    ##  ##   ##   ##  \n####       ##       ##   ##   ##   ##    ##  ##   ##   ##  \n #####     ##       ##   ##   ##   ##    ##  ##   ##   ##  \n    ###    ##       ##   ##   ##   ##    ##  ##   ##   ##  \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##   ##  ##   \n ## ##    ### ###    ## ##     ## ##    ### ##     ##  ##  \n                                                           \n"}
{"sentence": "HK qjwH FfugD zAPC EW s NZdAp P dXY VT Kqp EqrKYJ Bo XV XBy.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSEsgcWp3SCBGZnVnRCB6QVBDIEVXIHMgTlpkQXAgUCBkWFkgVlQgS3FwIEVxcktZSiBCbyBYViBYQnku\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUX dwjU SshtQ mNCP RJ f AMqNc C qKL IG Xdc RdeXLW Ob KI KOl.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nHKay qjwHay ugDFfay APCzay EWyay say ApNZday Pay dXYay VTay Kqpay EqrKYJyay oBay XVay XByay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nHK qjwH FfugD z4PC 3W 5 NZd4p P dXY V7 Kqp 3qrKYJ B0 XV XBy.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJL wkeJ GgihF xS[V RE d MXfS[ [ fCU BY Lw[ RwtLUK Np CB CNu.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\ua4d8 b\u027e\u028dH \u2132\u025fn\u0183\u15e1 z\u2200\u0500\u0186 \u018eM s NZp\u2200d \u0500 pX\u2144 \u039b\u22a5 \ua4d8bd \u018eb\u0279\ua4d8\u2144\u017f \u15fao X\u039b X\u15fa\u028e.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nKH Hwjq DgufF CPAz WE s pAdZN P YXd TV pqK JYKrqE oB VX .yBX\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - hk\n2. quixotic - qjwh\n3. mellifluous - p\n4. serendipity - eqrkyj\n5. ephemeral - ew\n\nSentence:\nlabyrinthine quixotic FfugD zAPC ephemeral s NZdAp mellifluous dXY VT Kqp serendipity Bo XV XBy.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-a3 b4-e2-c5-c2 a2-a2-a5-b2-d1 z-a1-a4-c1 e1-c5 d4 d3-z-d1-a1-a4 a4 d1-d5-e5 b5-e4 a3-b4-a4 e1-b4-c4-a3-e5-e2 b1-e3 d5-b5 d5-b1-e5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHK qjwH FfugD [MASK_1] EW s NZdAp P [MASK_0] VT Kqp EqrKYJ Bo XV [MASK_2].\n\nMask_0:\n### ##    ##  ##    ##  ##   \n ##  ##   ### ##    ##  ##   \n ##  ##    ###      ##  ##   \n ##  ##     ###      ## ##   \n ##  ##      ###      ##     \n ##  ##   ##  ###     ##     \n### ##    ##   ##     ##     \n                             \n\n\nMask_1:\n### ##      ##      ### ##     ## ##   \n##  ##       ##      ##  ##   ##   ##  \n   ##      ## ##     ##  ##   ##       \n  ##       ##  ##    ##  ##   ##       \n ##        ## ###    ## ##    ##       \n##  ##     ##  ##    ##       ##   ##  \n# ####    ###  ##   ####       ## ##   \n                                       \n\n\nMask_2:\n##  ##    ### ##    ##  ##   \n### ##     ##  ##   ##  ##   \n ###       ##  ##   ##  ##   \n  ###      ## ##     ## ##   \n   ###     ##  ##     ##     \n##  ###    ##  ##     ##     \n##   ##   ### ##      ##     \n                             \n"}
{"sentence": "vZ mux Ys WsR CbOf, reQ hFPEuYB vyoH qeY ilIVemxOz HJGz FgHW jfZN zTFmAYo o rnbkPUm.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndlogbXV4IFlzIFdzUiBDYk9mLCByZVEgaEZQRXVZQiB2eW9IIHFlWSBpbElWZW14T3ogSEpHeiBGZ0hXIGpmWk4gelRGbUFZbyBvIHJuYmtQVW0u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\niM zhk Lf JfE PoBs, erD uSCRhLO ilbU drL vyVIrzkBm UWTm StUJ wsMA mGSzNLb b eaoxCHz.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nvZay uxmay Ysay WsRay OfCbay, eQray EuYBhFPay oHvyay eYqay ilIVemxOzyay HJGzay FgHWay jfZNay AYozTFmay oyay UmrnbkPay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nvZ mux Y5 W5R Cb0f, r3Q hFP3uYB vy0H q3Y 1l1V3mx0z HJGz FgHW jfZN z7Fm4Y0 0 rnbkPUm.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nbX ,ic Ud EdT VnPg, trW jG[RiUN bupJ wrU o;OBr,cPx JKHx GhJE kgXM xYG,SUp p tmnl[I,.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u028cZ \u026fnx \u2144s Ms\u1d1a \u0186qO\u025f, \u0279\u01dd\u10e2 \u0265\u2132\u0500\u018en\u2144\u15fa \u028c\u028eoH b\u01dd\u2144 \u1d09lI\u039b\u01dd\u026fxOz H\u017f\u2141z \u2132\u0183HM \u027e\u025fZN z\u22a5\u2132\u026f\u2200\u2144o o \u0279uq\u029e\u0500\u2229\u026f.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nZv xum sY RsW ,fObC Qer BYuEPFh Hoyv Yeq zOxmeVIli zGJH WHgF NZfj oYAmFTz o .mUPkbnr\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - qey\n2. labyrinthine - wsr\n3. mellifluous - jfzn\n4. quixotic - rnbkpum\n5. ephemeral - o\n\nSentence:\nvZ mux Ys labyrinthine CbOf, reQ hFPEuYB vyoH serendipity ilIVemxOz HJGz FgHW mellifluous zTFmAYo ephemeral rnbkPUm.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-z c3-a5-d5 e5-d4 c5-d4-c4 c1-b1-e3-a2-, c4-e1-b4 c2-a2-a4-e1-a5-e5-b1 b5-e5-e3-c2 b4-e1-e5 d2-b3-d2-b5-e1-c3-d5-e3-z c2-e2-b2-z a2-b2-c2-c5 e2-a2-z-d3 z-e4-a2-c3-a1-e5-e3 e3 c4-d3-b1-a3-a4-a5-c3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nvZ mux Ys WsR CbOf, reQ [MASK_2] vyoH qeY [MASK_0] [MASK_1] FgHW jfZN zTFmAYo o rnbkPUm.\n\nMask_0:\n  ####    ####        ####    ### ###   ### ###   ##   ##   ##  ##     ## ##    ### ##   \n   ##      ##          ##      ##  ##    ##  ##    ## ##    ### ##    ##   ##   ##  ##   \n   ##      ##          ##      ##  ##    ##       # ### #    ###      ##   ##      ##    \n   ##      ##          ##      ##  ##    ## ##    ## # ##     ###     ##   ##     ##     \n   ##      ##          ##      ### ##    ##       ##   ##      ###    ##   ##    ##      \n   ##      ##  ##      ##       ###      ##  ##   ##   ##   ##  ###   ##   ##   ##  ##   \n  ####    ### ###     ####       ##     ### ###   ##   ##   ##   ##    ## ##    # ####   \n                                                                                         \n\n\nMask_1:\n###  ##      ####    ## ##    ### ##   \n ##  ##       ##    ##   ##   ##  ##   \n ##  ##       ##    ##           ##    \n ## ###       ##    ##  ###     ##     \n ##  ##   ##  ##    ##   ##    ##      \n ##  ##   ##  ##    ##   ##   ##  ##   \n###  ##    ## #      ## ##    # ####   \n                                       \n\n\nMask_2:\n###  ##   ### ###   ### ##    ### ###   ##  ###   ##  ##    ### ##   \n ##  ##    ##  ##    ##  ##    ##  ##   ##   ##   ##  ##     ##  ##  \n ##  ##    ##        ##  ##    ##       ##   ##   ##  ##     ##  ##  \n ## ###    ## ##     ##  ##    ## ##    ##   ##    ## ##     ## ##   \n ##  ##    ##        ## ##     ##       ##   ##     ##       ##  ##  \n ##  ##    ##        ##        ##  ##   ##   ##     ##       ##  ##  \n###  ##   ####      ####      ### ###    ## ##      ##      ### ##   \n                                                                     \n"}
{"sentence": "dvMz MSV mKhzs fLr WcSWpF, ZyB wdxE VPrbbIicF JLy uTDTWfLrO RdqVu.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZHZNeiBNU1YgbUtoenMgZkxyIFdjU1dwRiwgWnlCIHdkeEUgVlByYmJJaWNGIEpMeSB1VERUV2ZMck8gUmRxVnUu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nqiZm ZFI zXumf sYe JpFJcS, MlO jqkR ICeooVvpS WYl hGQGJsYeB EqdIh.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ndvMzay MSVay mKhzsay fLray WcSWpFay, ZyBay Ewdxay IicFVPrbbay JLyay uTDTWfLrOyay uRdqVay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\ndvMz M5V mKhz5 fLr Wc5WpF, ZyB wdx3 VPrbb11cF JLy u7D7WfLr0 RdqVu.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nfb,x ,DB ,Ljxd g;t EvDE[G, XuN efcR B[tnnOovG K;u iYFYEg;tP TfwBi.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\np\u028cWz WS\u039b \u026f\ua4d8\u0265zs \u025f\u2142\u0279 M\u0254SMd\u2132, Z\u028e\u15fa \u028dpx\u018e \u039b\u0500\u0279qqI\u1d09\u0254\u2132 \u017f\u2142\u028e n\u22a5\u15e1\u22a5M\u025f\u2142\u0279O \u1d1apb\u039bn.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nzMvd VSM szhKm rLf ,FpWScW ByZ Exdw FciIbbrPV yLJ OrLfWTDTu .uVqdR\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - wdxe\n2. serendipity - mkhzs\n3. quixotic - flr\n4. ephemeral - utdtwflro\n5. mellifluous - zyb\n\nSentence:\ndvMz MSV serendipity quixotic WcSWpF, mellifluous labyrinthine VPrbbIicF JLy ephemeral RdqVu.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-b5-c3-z c3-d4-b5 c3-a3-c2-z-d4 a2-b3-c4 c5-c1-d4-c5-a4-a2-, z-e5-b1 c5-d1-d5-e1 b5-a4-c4-b1-b1-d2-d2-c1-a2 e2-b3-e5 a5-e4-d1-e4-c5-a2-b3-c4-e3 c4-d1-b4-b5-a5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\ndvMz MSV mKhzs fLr WcSWpF, ZyB [MASK_0] VPrbbIicF JLy [MASK_1] [MASK_2].\n\nMask_0:\n##   ##   ### ##    ##  ##    ### ###  \n##   ##    ##  ##   ### ##     ##  ##  \n##   ##    ##  ##    ###       ##      \n## # ##    ##  ##     ###      ## ##   \n# ### #    ##  ##      ###     ##      \n ## ##     ##  ##   ##  ###    ##  ##  \n##   ##   ### ##    ##   ##   ### ###  \n                                       \n\n\nMask_1:\n##  ###   #### ##   ### ##    #### ##   ##   ##   ### ###   ####      ### ##     ## ##   \n##   ##   # ## ##    ##  ##   # ## ##   ##   ##    ##  ##    ##        ##  ##   ##   ##  \n##   ##     ##       ##  ##     ##      ##   ##    ##        ##        ##  ##   ##   ##  \n##   ##     ##       ##  ##     ##      ## # ##    ## ##     ##        ## ##    ##   ##  \n##   ##     ##       ##  ##     ##      # ### #    ##        ##        ## ##    ##   ##  \n##   ##     ##       ##  ##     ##       ## ##     ##        ##  ##    ##  ##   ##   ##  \n ## ##     ####     ### ##     ####     ##   ##   ####      ### ###   #### ##    ## ##   \n                                                                                         \n\n\nMask_2:\n### ##    ### ##     ## ##    ### ###   ##  ###  \n ##  ##    ##  ##   ##   ##    ##  ##   ##   ##  \n ##  ##    ##  ##   ##   ##    ##  ##   ##   ##  \n ## ##     ##  ##   ##   ##    ##  ##   ##   ##  \n ## ##     ##  ##   ##   ##    ### ##   ##   ##  \n ##  ##    ##  ##   ##  ##      ###     ##   ##  \n#### ##   ### ##     ##  ##      ##      ## ##   \n                                                 \n"}
{"sentence": "tlU ciM k Kcq GkyN Ho Ybf qBSO YfYH wyEEYqe FOV vpI Qvna kZ E TPO.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndGxVIGNpTSBrIEtjcSBHa3lOIEhvIFliZiBxQlNPIFlmWUggd3lFRVlxZSBGT1YgdnBJIFF2bmEga1ogRSBUUE8u\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ngyH pvZ x Xpd TxlA Ub Los dOFB LsLU jlRRLdr SBI icV Dian xM R GCB.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nUtlay iMcay kay Kcqay GkyNay oHay Ybfay OqBSay YfYHay EEYqewyay OVFay Ivpay aQvnay kZay Eyay OTPay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7lU c1M k Kcq GkyN H0 Ybf qB50 YfYH wy33Yq3 F0V vp1 Qvn4 kZ 3 7P0.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ny;I vo, l Lvw HluM Jp Ung wNDP UgUJ euRRUwr GPB b[O Wbms lX R Y[P.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0287l\u2229 \u0254\u1d09W \u029e \ua4d8\u0254b \u2141\u029e\u028eN Ho \u2144q\u025f b\u15faSO \u2144\u025f\u2144H \u028d\u028e\u018e\u018e\u2144b\u01dd \u2132O\u039b \u028cdI \u10e2\u028cu\u0250 \u029eZ \u018e \u22a5\u0500O.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nUlt Mic k qcK NykG oH fbY OSBq HYfY eqYEEyw VOF Ipv anvQ Zk E .OPT\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - ho\n2. serendipity - e\n3. labyrinthine - tpo\n4. ephemeral - yfyh\n5. quixotic - cim\n\nSentence:\ntlU quixotic k Kcq GkyN mellifluous Ybf qBSO ephemeral wyEEYqe FOV vpI Qvna kZ serendipity TPO.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-b3-a5 c1-d2-c3 a3 a3-c1-b4 b2-a3-e5-d3 c2-e3 e5-b1-a2 b4-b1-d4-e3 e5-a2-e5-c2 c5-e5-e1-e1-e5-b4-e1 a2-e3-b5 b5-a4-d2 b4-b5-d3-a1 a3-z e1 e4-a4-e3-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] ciM k Kcq [MASK_1] Ho Ybf qBSO YfYH wyEEYqe FOV vpI Qvna kZ [MASK_0] TPO.\n\nMask_0:\n### ###  \n ##  ##  \n ##      \n ## ##   \n ##      \n ##  ##  \n### ###  \n         \n\n\nMask_1:\n ## ##    ##  ###   ##  ##    ###  ##  \n##   ##   ##  ##    ##  ##      ## ##  \n##        ## ##     ##  ##     # ## #  \n##  ###   ## ##      ## ##     ## ##   \n##   ##   ## ###      ##       ##  ##  \n##   ##   ##  ##      ##       ##  ##  \n ## ##    ##  ###     ##      ###  ##  \n                                       \n\n\nMask_2:\n#### ##   ####      ##  ###  \n# ## ##    ##       ##   ##  \n  ##       ##       ##   ##  \n  ##       ##       ##   ##  \n  ##       ##       ##   ##  \n  ##       ##  ##   ##   ##  \n ####     ### ###    ## ##   \n                             \n"}
{"sentence": "OzL kaHa Eqejlqc iPQK oE OO mmxE, udj i PwsAQrtx yxnM l vJcYrp HqOI.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nT3pMIGthSGEgRXFlamxxYyBpUFFLIG9FIE9PIG1teEUsIHVkaiBpIFB3c0FRcnR4IHl4bk0gbCB2SmNZcnAgSHFPSS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nBmY xnUn Rdrwydp vCDX bR BB zzkR, hqw v CjfNDegk lkaZ y iWpLec UdBV.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nOzLyay aHakay Eqejlqcyay iPQKyay oEyay OOyay Emmxay, udjyay iyay AQrtxPwsay yxnMay lay vJcYrpay OIHqay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n0zL k4H4 3q3jlqc 1PQK 03 00 mmx3, udj 1 Pw54Qr7x yxnM l vJcYrp Hq01.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nPx; lsJs Rwrk;wv o[WL pR PP ,,cR, ifk o [edSWtyc ucm, ; bKvUt[ JwPO.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nOz\u2142 \u029e\u0250H\u0250 \u018eb\u01dd\u027elb\u0254 \u1d09\u0500\u10e2\ua4d8 o\u018e OO \u026f\u026fx\u018e, np\u027e \u1d09 \u0500\u028ds\u2200\u10e2\u0279\u0287x \u028exuW l \u028c\u017f\u0254\u2144\u0279d HbOI.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nLzO aHak cqljeqE KQPi Eo OO ,Exmm jdu i xtrQAswP Mnxy l prYcJv .IOqH\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - oe\n2. mellifluous - mmxe\n3. ephemeral - yxnm\n4. labyrinthine - oo\n5. quixotic - ozl\n\nSentence:\nquixotic kaHa Eqejlqc iPQK serendipity labyrinthine mmxE, udj i PwsAQrtx ephemeral l vJcYrp HqOI.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne3-z-b3 a3-a1-c2-a1 e1-b4-e1-e2-b3-b4-c1 d2-a4-b4-a3 e3-e1 e3-e3 c3-c3-d5-e1-, a5-d1-e2 d2 a4-c5-d4-a1-b4-c4-e4-d5 e5-d5-d3-c3 b3 b5-e2-c1-e5-c4-a4 c2-b4-e3-d2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nOzL kaHa Eqejlqc [MASK_2] oE OO [MASK_1], udj i [MASK_0] yxnM l vJcYrp HqOI.\n\nMask_0:\n### ##    ##   ##    ## ##      ##       ## ##    ### ##    #### ##   ##  ##   \n ##  ##   ##   ##   ##   ##      ##     ##   ##    ##  ##   # ## ##   ### ##   \n ##  ##   ##   ##   ####       ## ##    ##   ##    ##  ##     ##       ###     \n ##  ##   ## # ##    #####     ##  ##   ##   ##    ## ##      ##        ###    \n ## ##    # ### #       ###    ## ###   ##   ##    ## ##      ##         ###   \n ##        ## ##    ##   ##    ##  ##   ##  ##     ##  ##     ##      ##  ###  \n####      ##   ##    ## ##    ###  ##    ##  ##   #### ##    ####     ##   ##  \n                                                                               \n\n\nMask_1:\n##   ##   ##   ##   ##  ##    ### ###  \n ## ##     ## ##    ### ##     ##  ##  \n# ### #   # ### #    ###       ##      \n## # ##   ## # ##     ###      ## ##   \n##   ##   ##   ##      ###     ##      \n##   ##   ##   ##   ##  ###    ##  ##  \n##   ##   ##   ##   ##   ##   ### ###  \n                                       \n\n\nMask_2:\n  ####    ### ##     ## ##    ##  ###  \n   ##      ##  ##   ##   ##   ##  ##   \n   ##      ##  ##   ##   ##   ## ##    \n   ##      ##  ##   ##   ##   ## ##    \n   ##      ## ##    ##   ##   ## ###   \n   ##      ##       ##  ##    ##  ##   \n  ####    ####       ##  ##   ##  ###  \n                                       \n"}
{"sentence": "KAo PMuv jJ aVM dKcZDk FRB DHjH BBR Poj HHIcvEhJGB uqBh-sbqptERl ev vDUOwCl TBwS Eo ZPGl MpU NFN fykew jZCX KsJEyu fmytK No HdY uxtR.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nS0FvIFBNdXYgakogYVZNIGRLY1pEayBGUkIgREhqSCBCQlIgUG9qIEhISWN2RWhKR0IgdXFCaC1zYnFwdEVSbCBldiB2RFVPd0NsIFRCd1MgRW8gWlBHbCBNcFUgTkZOIGZ5a2V3IGpaQ1ggS3NKRXl1IGZteXRLIE5vIEhkWSB1eHRSLg==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nXNb CZhi wW nIZ qXpMQx SEO QUwU OOE Cbw UUVpiRuWTO hdOu-fodcgREy ri iQHBjPy GOjF Rb MCTy ZcH ASA slxrj wMPK XfWRlh szlgX Ab UqL hkgE.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAoKay uvPMay jJay aVMyay dKcZDkay FRBay DHjHay BBRay ojPay IcvEhJGBHHay uqBh-sbqptERlyay evyay UOwClvDay TBwSay Eoyay ZPGlay UMpay NFNay ewfykay jZCXay EyuKsJay fmytKay oNay HdYay uxtRyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nK40 PMuv jJ 4VM dKcZDk FRB DHjH BBR P0j HH1cv3hJGB uqBh-5bqp73Rl 3v vDU0wCl 7Bw5 30 ZPGl MpU NFN fyk3w jZCX K5J3yu fmy7K N0 HdY ux7R.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nLSp [,ib kK sB, fLvXFl GTN FJkJ NNT [pk JJOvbRjKHN iwNj-dnw[yRT; rb bFIPeV; YNeD Rp X[H; ,[I MGM gulre kXVC LdKRui g,uyL Mp JfU icyT.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\ua4d8\u2200o \u0500Wn\u028c \u027e\u017f \u0250\u039bW p\ua4d8\u0254Z\u15e1\u029e \u2132\u1d1a\u15fa \u15e1H\u027eH \u15fa\u15fa\u1d1a \u0500o\u027e HHI\u0254\u028c\u018e\u0265\u017f\u2141\u15fa nb\u15fa\u0265-sqbd\u0287\u018e\u1d1al \u01dd\u028c \u028c\u15e1\u2229O\u028d\u0186l \u22a5\u15fa\u028dS \u018eo Z\u0500\u2141l Wd\u2229 N\u2132N \u025f\u028e\u029e\u01dd\u028d \u027eZ\u0186X \ua4d8s\u017f\u018e\u028en \u025f\u026f\u028e\u0287\ua4d8 No Hp\u2144 nx\u0287\u1d1a.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noAK vuMP Jj MVa kDZcKd BRF HjHD RBB joP BGJhEvcIHH lREtpqbs-hBqu ve lCwOUDv SwBT oE lGPZ UpM NFN wekyf XCZj uyEJsK Ktymf oN YdH .Rtxu\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - dkczdk\n2. mellifluous - ksjeyu\n3. labyrinthine - eo\n4. serendipity - poj\n5. ephemeral - ev\n\nSentence:\nKAo PMuv jJ aVM quixotic FRB DHjH BBR serendipity HHIcvEhJGB uqBh-sbqptERl ephemeral vDUOwCl TBwS labyrinthine ZPGl MpU NFN fykew jZCX mellifluous fmytK No HdY uxtR.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-a1-e3 a4-c3-a5-b5 e2-e2 a1-b5-c3 d1-a3-c1-z-d1-a3 a2-c4-b1 d1-c2-e2-c2 b1-b1-c4 a4-e3-e2 c2-c2-d2-c1-b5-e1-c2-e2-b2-b1 a5-b4-b1-c2-d4-b1-b4-a4-e4-e1-c4-b3 e1-b5 b5-d1-a5-e3-c5-c1-b3 e4-b1-c5-d4 e1-e3 z-a4-b2-b3 c3-a4-a5 d3-a2-d3 a2-e5-a3-e1-c5 e2-z-c1-d5 a3-d4-e2-e1-e5-a5 a2-c3-e5-e4-a3 d3-e3 c2-d1-e5 a5-d5-e4-c4-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nKAo PMuv jJ [MASK_1] dKcZDk FRB DHjH BBR Poj HHIcvEhJGB uqBh-sbqptERl ev [MASK_2] TBwS Eo [MASK_0] MpU NFN fykew jZCX KsJEyu fmytK No HdY uxtR.\n\nMask_0:\n### ##    ### ##     ## ##    ####     \n##  ##     ##  ##   ##   ##    ##      \n   ##      ##  ##   ##         ##      \n  ##       ##  ##   ##  ###    ##      \n ##        ## ##    ##   ##    ##      \n##  ##     ##       ##   ##    ##  ##  \n# ####    ####       ## ##    ### ###  \n                                       \n\n\nMask_1:\n  ##      ### ###   ##   ##  \n   ##      ##  ##    ## ##   \n ## ##     ##  ##   # ### #  \n ##  ##    ##  ##   ## # ##  \n ## ###    ### ##   ##   ##  \n ##  ##     ###     ##   ##  \n###  ##      ##     ##   ##  \n                             \n\n\nMask_2:\n### ###   ### ##    ##  ###    ## ##    ##   ##    ## ##    ####     \n ##  ##    ##  ##   ##   ##   ##   ##   ##   ##   ##   ##    ##      \n ##  ##    ##  ##   ##   ##   ##   ##   ##   ##   ##         ##      \n ##  ##    ##  ##   ##   ##   ##   ##   ## # ##   ##         ##      \n ### ##    ##  ##   ##   ##   ##   ##   # ### #   ##         ##      \n  ###      ##  ##   ##   ##   ##   ##    ## ##    ##   ##    ##  ##  \n   ##     ### ##     ## ##     ## ##    ##   ##    ## ##    ### ###  \n                                                                     \n"}
{"sentence": "IYu MOb lQW a ytChYWk RUUebnp SRBeNRz, kNneC bKf YRF ANciERBLmi XP adKUPUw.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSVl1IE1PYiBsUVcgYSB5dENoWVdrIFJVVWVibnAgU1JCZU5Seiwga05uZUMgYktmIFlSRiBBTmNpRVJCTG1pIFhQIGFkS1VQVXcu\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVLh ZBo yDJ n lgPuLJx EHHroac FEOrAEm, xAarP oXs LES NApvREOYzv KC nqXHCHj.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIYuyay ObMay lQWay ayay ytChYWkay UUebnpRay eNRzSRBay, eCkNnay bKfay YRFay ANciERBLmiyay XPay adKUPUwyay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1Yu M0b lQW 4 y7ChYWk RUU3bnp 5RB3NRz, kNn3C bKf YRF 4Nc13RBLm1 XP 4dKUPUw.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOUi ,Pn ;WE s uyVjUEl TIIrnm[ DTNrMTx, lMmrV nLg UTG SMvoRTN;,o C[ sfLI[Ie.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u2144n WOq l\u10e2M \u0250 \u028e\u0287\u0186\u0265\u2144M\u029e \u1d1a\u2229\u2229\u01ddqud S\u1d1a\u15fa\u01ddN\u1d1az, \u029eNu\u01dd\u0186 q\ua4d8\u025f \u2144\u1d1a\u2132 \u2200N\u0254\u1d09\u018e\u1d1a\u15fa\u2142\u026f\u1d09 X\u0500 \u0250p\ua4d8\u2229\u0500\u2229\u028d.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuYI bOM WQl a kWYhCty pnbeUUR ,zRNeBRS CenNk fKb FRY imLBREicNA PX .wUPUKda\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - mob\n2. ephemeral - srbenrz\n3. mellifluous - ancierblmi\n4. serendipity - adkupuw\n5. labyrinthine - xp\n\nSentence:\nIYu quixotic lQW a ytChYWk RUUebnp SRBeNRz, kNneC bKf YRF mellifluous labyrinthine adKUPUw.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-e5-a5 c3-e3-b1 b3-b4-c5 a1 e5-e4-c1-c2-e5-c5-a3 c4-a5-a5-e1-b1-d3-a4 d4-c4-b1-e1-d3-c4-z-, a3-d3-d3-e1-c1 b1-a3-a2 e5-c4-a2 a1-d3-c1-d2-e1-c4-b1-b3-c3-d2 d5-a4 a1-d1-a3-a5-a4-a5-c5-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIYu MOb lQW a [MASK_0] RUUebnp SRBeNRz, kNneC bKf [MASK_1] ANciERBLmi [MASK_2] adKUPUw.\n\nMask_0:\n##  ##    #### ##    ## ##    ###  ##   ##  ##    ##   ##   ##  ###  \n##  ##    # ## ##   ##   ##    ##  ##   ##  ##    ##   ##   ##  ##   \n##  ##      ##      ##         ##  ##   ##  ##    ##   ##   ## ##    \n ## ##      ##      ##         ## ###    ## ##    ## # ##   ## ##    \n  ##        ##      ##         ##  ##     ##      # ### #   ## ###   \n  ##        ##      ##   ##    ##  ##     ##       ## ##    ##  ##   \n  ##       ####      ## ##    ###  ##     ##      ##   ##   ##  ###  \n                                                                     \n\n\nMask_1:\n##  ##    ### ##    ### ###  \n##  ##     ##  ##    ##  ##  \n##  ##     ##  ##    ##      \n ## ##     ## ##     ## ##   \n  ##       ## ##     ##      \n  ##       ##  ##    ##      \n  ##      #### ##   ####     \n                             \n\n\nMask_2:\n##  ##    ### ##   \n### ##     ##  ##  \n ###       ##  ##  \n  ###      ##  ##  \n   ###     ## ##   \n##  ###    ##      \n##   ##   ####     \n                   \n"}
{"sentence": "iXmt XNO WYGg tl AwU zeTL, qXJ ICAt'P cBod itEO SDe's PTZI.", "long": true, "question": false, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\naVhtdCBYTk8gV1lHZyB0bCBBd1UgemVUTCwgcVhKIElDQXQnUCBjQm9kIGl0RU8gU0RlJ3MgUFRaSS4=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nvKzg KAB JLTt gy NjH mrGY, dKW VPNg'C pObq vgRB FQr'f CGMV.\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\niXmtyay OXNay WYGgay tlay AwUyay eTLzay, qXJay ICAt'Pyay odcBay itEOyay e'sSDay IPTZay.\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1Xm7 XN0 WYGg 7l 4wU z37L, qXJ 1C47'P cB0d 1730 5D3'5 P7Z1.\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\noC,y CMP EUHh y; SeI xrY;, wCK OVSy'[ vNpf oyRP DFr'd [YXO.\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u1d09X\u026f\u0287 XNO M\u2144\u2141\u0183 \u0287l \u2200\u028d\u2229 z\u01dd\u22a5\u2142, bX\u017f I\u0186\u2200\u0287'\u0500 \u0254\u15faop \u1d09\u0287\u018eO S\u15e1\u01dd's \u0500\u22a5ZI.\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntmXi ONX gGYW lt UwA ,LTez JXq P'tACI doBc OEti s'eDS .IZTP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - cbod\n2. labyrinthine - xno\n3. quixotic - awu\n4. serendipity - sdes\n5. ephemeral - zetl\n\nSentence:\niXmt labyrinthine WYGg tl quixotic zeTL, qXJ ICAt'P mellifluous itEO serendipity PTZI.", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d5-c3-e4 d5-d3-e3 c5-e5-b2-b2 e4-b3 a1-c5-a5 z-e1-e4-b3-, b4-d5-e2 d2-c1-a1-e4-'-a4 c1-b1-e3-d1 d2-e4-e1-e3 d4-d1-e1-'-d4 a4-e4-z-d2-.\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\niXmt [MASK_0] WYGg tl [MASK_1] zeTL, qXJ ICAt'P cBod itEO SDe's PTZI.\n\nMask_0:\n##  ##    ###  ##    ## ##   \n### ##      ## ##   ##   ##  \n ###       # ## #   ##   ##  \n  ###      ## ##    ##   ##  \n   ###     ##  ##   ##   ##  \n##  ###    ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n\n\nMask_1:\n  ##      ##   ##   ##  ###  \n   ##     ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n ##  ##   ## # ##   ##   ##  \n ## ###   # ### #   ##   ##  \n ##  ##    ## ##    ##   ##  \n###  ##   ##   ##    ## ##   \n                             \n\n\nMask_2:\n ## ##    ### ##    ### ###    ## ##   \n##   ##    ##  ##    ##  ##   ##   ##  \n####       ##  ##    ##       ####     \n #####     ##  ##    ## ##     #####   \n    ###    ##  ##    ##           ###  \n##   ##    ##  ##    ##  ##   ##   ##  \n ## ##    ### ##    ### ###    ## ##   \n                                       \n"}
{"sentence": "What's your address?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCdzIHlvdXIgYWRkcmVzcz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung'f lbhe nqqerff?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nat'sWhay ouryay addressyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47'5 y0ur 4ddr355?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy'd upit sfftrdd?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287's \u028eon\u0279 \u0250pp\u0279\u01ddss?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tahW ruoy ?sserdda\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - whats\n2. mellifluous - your\n3. labyrinthine - address\n\nSentence:\nquixotic mellifluous address?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4-'-d4 e5-e3-a5-c4 a1-d1-d1-c4-e1-d4-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat's [MASK_0] address?\n\nMask_0:\n##  ##     ## ##    ##  ###   ### ##   \n##  ##    ##   ##   ##   ##    ##  ##  \n##  ##    ##   ##   ##   ##    ##  ##  \n ## ##    ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ##  ##  \n  ##       ## ##     ## ##    #### ##  \n                                       \n"}
{"sentence": "Have you got a match?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGF2ZSB5b3UgZ290IGEgbWF0Y2g/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUnir lbh tbg n zngpu?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naveHay ouyay otgay ayay atchmay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH4v3 y0u g07 4 m47ch?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJsbr upi hpy s ,syvj?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u0250\u028c\u01dd \u028eon \u0183o\u0287 \u0250 \u026f\u0250\u0287\u0254\u0265?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nevaH uoy tog a ?hctam\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - have\n2. quixotic - you\n3. serendipity - match\n4. mellifluous - a\n5. labyrinthine - got\n\nSentence:\nephemeral quixotic labyrinthine mellifluous match?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-a1-b5-e1 e5-e3-a5 b2-e3-e4 a1 c3-a1-e4-c1-c2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHave [MASK_2] [MASK_0] a [MASK_1]?\n\nMask_0:\n ## ##     ## ##    #### ##  \n##   ##   ##   ##   # ## ##  \n##        ##   ##     ##     \n##  ###   ##   ##     ##     \n##   ##   ##   ##     ##     \n##   ##   ##   ##     ##     \n ## ##     ## ##     ####    \n                             \n\n\nMask_1:\n##   ##     ##      #### ##    ## ##    ###  ##  \n ## ##       ##     # ## ##   ##   ##    ##  ##  \n# ### #    ## ##      ##      ##         ##  ##  \n## # ##    ##  ##     ##      ##         ## ###  \n##   ##    ## ###     ##      ##         ##  ##  \n##   ##    ##  ##     ##      ##   ##    ##  ##  \n##   ##   ###  ##    ####      ## ##    ###  ##  \n                                                 \n\n\nMask_2:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n"}
{"sentence": "Do you like spaghetti?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IGxpa2Ugc3BhZ2hldHRpPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh yvxr fcnturggv?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay ikelay aghettispay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u l1k3 5p4gh3771?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi ;olr d[shjryyo?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon l\u1d09\u029e\u01dd sd\u0250\u0183\u0265\u01dd\u0287\u0287\u1d09?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy ekil ?ittehgaps\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - do\n2. labyrinthine - you\n3. mellifluous - like\n4. ephemeral - spaghetti\n\nSentence:\nquixotic labyrinthine mellifluous spaghetti?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 b3-d2-a3-e1 d4-a4-a1-b2-c2-e1-e4-e4-d2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_1] like [MASK_2]?\n\nMask_0:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n ## ##    ### ##      ##       ## ##    ###  ##   ### ###   #### ##   #### ##     ####   \n##   ##    ##  ##      ##     ##   ##    ##  ##    ##  ##   # ## ##   # ## ##      ##    \n####       ##  ##    ## ##    ##         ##  ##    ##         ##        ##         ##    \n #####     ##  ##    ##  ##   ##  ###    ## ###    ## ##      ##        ##         ##    \n    ###    ## ##     ## ###   ##   ##    ##  ##    ##         ##        ##         ##    \n##   ##    ##        ##  ##   ##   ##    ##  ##    ##  ##     ##        ##         ##    \n ## ##    ####      ###  ##    ## ##    ###  ##   ### ###    ####      ####       ####   \n                                                                                         \n"}
{"sentence": "Does she live in Paris?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG9lcyBzaGUgbGl2ZSBpbiBQYXJpcz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQbrf fur yvir va Cnevf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noesDay eshay ivelay inyay arisPay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD035 5h3 l1v3 1n P4r15?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFprd djr ;obr om [stod?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o\u01dds s\u0265\u01dd l\u1d09\u028c\u01dd \u1d09u \u0500\u0250\u0279\u1d09s?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nseoD ehs evil ni ?siraP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - she\n2. mellifluous - does\n3. quixotic - live\n4. ephemeral - paris\n5. labyrinthine - in\n\nSentence:\nmellifluous serendipity quixotic labyrinthine Paris?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3-e1-d4 d4-c2-e1 b3-d2-b5-e1 d2-d3 a4-a1-c4-d2-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] live [MASK_0] Paris?\n\nMask_0:\n  ####    ###  ##  \n   ##       ## ##  \n   ##      # ## #  \n   ##      ## ##   \n   ##      ##  ##  \n   ##      ##  ##  \n  ####    ###  ##  \n                   \n\n\nMask_1:\n### ##     ## ##    ### ###    ## ##   \n ##  ##   ##   ##    ##  ##   ##   ##  \n ##  ##   ##   ##    ##       ####     \n ##  ##   ##   ##    ## ##     #####   \n ##  ##   ##   ##    ##           ###  \n ##  ##   ##   ##    ##  ##   ##   ##  \n### ##     ## ##    ### ###    ## ##   \n                                       \n\n\nMask_2:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n"}
{"sentence": "How big a problem is it?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGJpZyBhIHByb2JsZW0gaXMgaXQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj ovt n ceboyrz vf vg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay igbay ayay oblempray isyay ityay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w b1g 4 pr0bl3m 15 17?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe noh s [tpn;r, od oy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d q\u1d09\u0183 \u0250 d\u0279oql\u01dd\u026f \u1d09s \u1d09\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH gib a melborp si ?ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - it\n2. ephemeral - how\n3. serendipity - big\n4. quixotic - a\n5. labyrinthine - is\n\nSentence:\nephemeral serendipity quixotic problem labyrinthine it?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 b1-d2-b2 a1 a4-c4-e3-b1-b3-e1-c3 d2-d4 d2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_2] [MASK_1] problem is it?\n\nMask_0:\n###  ##    ## ##    ##   ##  \n ##  ##   ##   ##   ##   ##  \n ##  ##   ##   ##   ##   ##  \n ## ###   ##   ##   ## # ##  \n ##  ##   ##   ##   # ### #  \n ##  ##   ##   ##    ## ##   \n###  ##    ## ##    ##   ##  \n                             \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n"}
{"sentence": "What room am I in?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCByb29tIGFtIEkgaW4/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung ebbz nz V va?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay oomray amyay Iyay inyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 r00m 4m 1 1n?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy tpp, s, O om?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u0279oo\u026f \u0250\u026f I \u1d09u?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW moor ma I ?ni\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - in\n2. labyrinthine - am\n3. mellifluous - i\n4. ephemeral - what\n5. serendipity - room\n\nSentence:\nephemeral serendipity labyrinthine mellifluous in?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 c4-e3-e3-c3 a1-c3 d2 d2-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat [MASK_0] [MASK_1] I [MASK_2]?\n\nMask_0:\n### ##     ## ##     ## ##    ##   ##  \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##   # ### #  \n ## ##    ##   ##   ##   ##   ## # ##  \n ## ##    ##   ##   ##   ##   ##   ##  \n ##  ##   ##   ##   ##   ##   ##   ##  \n#### ##    ## ##     ## ##    ##   ##  \n                                       \n\n\nMask_1:\n  ##      ##   ##  \n   ##      ## ##   \n ## ##    # ### #  \n ##  ##   ## # ##  \n ## ###   ##   ##  \n ##  ##   ##   ##  \n###  ##   ##   ##  \n                   \n\n\nMask_2:\n  ####    ###  ##  \n   ##       ## ##  \n   ##      # ## #  \n   ##      ## ##   \n   ##      ##  ##  \n   ##      ##  ##  \n  ####    ###  ##  \n                   \n"}
{"sentence": "Didn't we already go to his funeral?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRGlkbid0IHdlIGFscmVhZHkgZ28gdG8gaGlzIGZ1bmVyYWw/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQvqa'g jr nyernql tb gb uvf shareny?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nidn'tDay eway alreadyyay ogay otay ishay uneralfay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD1dn'7 w3 4lr34dy g0 70 h15 fun3r4l?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFofm'y er s;trsfu hp yp jod gimrts;?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1\u1d09pu'\u0287 \u028d\u01dd \u0250l\u0279\u01dd\u0250p\u028e \u0183o \u0287o \u0265\u1d09s \u025fnu\u01dd\u0279\u0250l?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nt'ndiD ew ydaerla og ot sih ?larenuf\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - his\n2. quixotic - already\n3. ephemeral - didnt\n4. mellifluous - we\n5. serendipity - go\n\nSentence:\nephemeral mellifluous quixotic serendipity to labyrinthine funeral?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-d2-d1-d3-'-e4 c5-e1 a1-b3-c4-e1-a1-d1-e5 b2-e3 e4-e3 c2-d2-d4 a2-a5-d3-e1-c4-a1-b3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDidn't we already [MASK_1] [MASK_2] his funeral?\n\nMask_0:\n### ##      ####    ### ##    ###  ##   #### ##  \n ##  ##      ##      ##  ##     ## ##   # ## ##  \n ##  ##      ##      ##  ##    # ## #     ##     \n ##  ##      ##      ##  ##    ## ##      ##     \n ##  ##      ##      ##  ##    ##  ##     ##     \n ##  ##      ##      ##  ##    ##  ##     ##     \n### ##      ####    ### ##    ###  ##    ####    \n                                                 \n\n\nMask_1:\n ## ##     ## ##   \n##   ##   ##   ##  \n##        ##   ##  \n##  ###   ##   ##  \n##   ##   ##   ##  \n##   ##   ##   ##  \n ## ##     ## ##   \n                   \n\n\nMask_2:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n"}
{"sentence": "Are these shoes too big for you?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHRoZXNlIHNob2VzIHRvbyBiaWcgZm9yIHlvdT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer gurfr fubrf gbb ovt sbe lbh?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay esethay oesshay ootay igbay orfay ouyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 7h353 5h035 700 b1g f0r y0u?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr yjrdr djprd ypp noh gpt upi?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u0287\u0265\u01dds\u01dd s\u0265o\u01dds \u0287oo q\u1d09\u0183 \u025fo\u0279 \u028eon?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA eseht seohs oot gib rof ?uoy\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - you\n2. mellifluous - are\n3. ephemeral - these\n4. quixotic - for\n5. serendipity - too\n\nSentence:\nmellifluous ephemeral shoes serendipity big quixotic you?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e4-c2-e1-d4-e1 d4-c2-e3-e1-d4 e4-e3-e3 b1-d2-b2 a2-e3-c4 e5-e3-a5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAre [MASK_0] shoes [MASK_2] big for [MASK_1]?\n\nMask_0:\n#### ##   ###  ##   ### ###    ## ##    ### ###  \n# ## ##    ##  ##    ##  ##   ##   ##    ##  ##  \n  ##       ##  ##    ##       ####       ##      \n  ##       ## ###    ## ##     #####     ## ##   \n  ##       ##  ##    ##           ###    ##      \n  ##       ##  ##    ##  ##   ##   ##    ##  ##  \n ####     ###  ##   ### ###    ## ##    ### ###  \n                                                 \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n#### ##    ## ##     ## ##   \n# ## ##   ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n ####      ## ##     ## ##   \n                             \n"}
{"sentence": "That's a mistake, isn't it?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhhdCdzIGEgbWlzdGFrZSwgaXNuJ3QgaXQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGung'f n zvfgnxr, vfa'g vg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nat'sThay ayay istakemay, isn'tyay ityay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h47'5 4 m1574k3, 15n'7 17?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjsy'd s ,odyslr, odm'y oy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u0250\u0287's \u0250 \u026f\u1d09s\u0287\u0250\u029e\u01dd, \u1d09su'\u0287 \u1d09\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tahT a ,ekatsim t'nsi ?ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - it\n2. quixotic - isnt\n3. ephemeral - a\n4. labyrinthine - thats\n5. serendipity - mistake\n\nSentence:\nlabyrinthine ephemeral mistake, quixotic it?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-a1-e4-'-d4 a1 c3-d2-d4-e4-a1-a3-e1-, d2-d4-d3-'-e4 d2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThat's [MASK_2] mistake, isn't [MASK_1]?\n\nMask_0:\n  ####     ## ##    ###  ##   #### ##  \n   ##     ##   ##     ## ##   # ## ##  \n   ##     ####       # ## #     ##     \n   ##      #####     ## ##      ##     \n   ##         ###    ##  ##     ##     \n   ##     ##   ##    ##  ##     ##     \n  ####     ## ##    ###  ##    ####    \n                                       \n\n\nMask_1:\n  ####    #### ##  \n   ##     # ## ##  \n   ##       ##     \n   ##       ##     \n   ##       ##     \n   ##       ##     \n  ####     ####    \n                   \n\n\nMask_2:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n"}
{"sentence": "Would you say slowly, please?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV291bGQgeW91IHNheSBzbG93bHksIHBsZWFzZT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJbhyq lbh fnl fybjyl, cyrnfr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nouldWay ouyay aysay owlyslay, easeplay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW0uld y0u 54y 5l0wly, pl3453?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEpi;f upi dsu d;pe;u, [;rsdr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nMonlp \u028eon s\u0250\u028e slo\u028dl\u028e, dl\u01dd\u0250s\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ndluoW uoy yas ,ylwols ?esaelp\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - would\n2. ephemeral - slowly\n3. quixotic - please\n4. serendipity - say\n5. mellifluous - you\n\nSentence:\nlabyrinthine mellifluous serendipity slowly, please?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e3-a5-b3-d1 e5-e3-a5 d4-a1-e5 d4-b3-e3-c5-b3-e5-, a4-b3-e1-a1-d4-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] say [MASK_1], please?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n ## ##    ####       ## ##    ##   ##   ####      ##  ##   \n##   ##    ##       ##   ##   ##   ##    ##       ##  ##   \n####       ##       ##   ##   ##   ##    ##       ##  ##   \n #####     ##       ##   ##   ## # ##    ##        ## ##   \n    ###    ##       ##   ##   # ### #    ##         ##     \n##   ##    ##  ##   ##   ##    ## ##     ##  ##     ##     \n ## ##    ### ###    ## ##    ##   ##   ### ###     ##     \n                                                           \n\n\nMask_2:\n##   ##    ## ##    ##  ###   ####      ### ##   \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n## # ##   ##   ##   ##   ##    ##        ##  ##  \n# ### #   ##   ##   ##   ##    ##        ##  ##  \n ## ##    ##   ##   ##   ##    ##  ##    ##  ##  \n##   ##    ## ##     ## ##    ### ###   ### ##   \n                                                 \n"}
{"sentence": "What do you do for Thanksgiving?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCBkbyB5b3UgZG8gZm9yIFRoYW5rc2dpdmluZz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung qb lbh qb sbe Gunaxftvivat?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay oday ouyay oday orfay anksgivingThay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 d0 y0u d0 f0r 7h4nk5g1v1ng?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy fp upi fp gpt Yjsmldhobomh?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 po \u028eon po \u025fo\u0279 \u22a5\u0265\u0250u\u029es\u0183\u1d09\u028c\u1d09u\u0183?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW od uoy od rof ?gnivigsknahT\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - do\n2. ephemeral - what\n3. serendipity - for\n4. quixotic - you\n\nSentence:\nephemeral mellifluous quixotic mellifluous serendipity Thanksgiving?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 d1-e3 e5-e3-a5 d1-e3 a2-e3-c4 e4-c2-a1-d3-a3-d4-b2-d2-b5-d2-d3-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat [MASK_2] you [MASK_2] [MASK_1] [MASK_0]?\n\nMask_0:\n#### ##   ###  ##     ##      ###  ##   ##  ###    ## ##     ## ##      ####    ### ###     ####    ###  ##    ## ##   \n# ## ##    ##  ##      ##       ## ##   ##  ##    ##   ##   ##   ##      ##      ##  ##      ##       ## ##   ##   ##  \n  ##       ##  ##    ## ##     # ## #   ## ##     ####      ##           ##      ##  ##      ##      # ## #   ##       \n  ##       ## ###    ##  ##    ## ##    ## ##      #####    ##  ###      ##      ##  ##      ##      ## ##    ##  ###  \n  ##       ##  ##    ## ###    ##  ##   ## ###        ###   ##   ##      ##      ### ##      ##      ##  ##   ##   ##  \n  ##       ##  ##    ##  ##    ##  ##   ##  ##    ##   ##   ##   ##      ##       ###        ##      ##  ##   ##   ##  \n ####     ###  ##   ###  ##   ###  ##   ##  ###    ## ##     ## ##      ####       ##       ####    ###  ##    ## ##   \n                                                                                                                       \n\n\nMask_1:\n### ###    ## ##    ### ##   \n ##  ##   ##   ##    ##  ##  \n ##       ##   ##    ##  ##  \n ## ##    ##   ##    ## ##   \n ##       ##   ##    ## ##   \n ##       ##   ##    ##  ##  \n####       ## ##    #### ##  \n                             \n\n\nMask_2:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n"}
{"sentence": "How old is he now?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IG9sZCBpcyBoZSBub3c/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj byq vf ur abj?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay oldyay isyay ehay ownay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w 0ld 15 h3 n0w?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe p;f od jr mpe?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d olp \u1d09s \u0265\u01dd uo\u028d?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH dlo si eh ?won\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - how\n2. ephemeral - now\n3. quixotic - old\n4. labyrinthine - he\n5. serendipity - is\n\nSentence:\nmellifluous quixotic serendipity labyrinthine now?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 e3-b3-d1 d2-d4 c2-e1 d3-e3-c5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] is he [MASK_0]?\n\nMask_0:\n###  ##    ## ##    ##   ##  \n  ## ##   ##   ##   ##   ##  \n # ## #   ##   ##   ##   ##  \n ## ##    ##   ##   ## # ##  \n ##  ##   ##   ##   # ### #  \n ##  ##   ##   ##    ## ##   \n###  ##    ## ##    ##   ##  \n                             \n\n\nMask_1:\n###  ##    ## ##    ##   ##  \n ##  ##   ##   ##   ##   ##  \n ##  ##   ##   ##   ##   ##  \n ## ###   ##   ##   ## # ##  \n ##  ##   ##   ##   # ### #  \n ##  ##   ##   ##    ## ##   \n###  ##    ## ##    ##   ##  \n                             \n\n\nMask_2:\n ## ##    ####      ### ##   \n##   ##    ##        ##  ##  \n##   ##    ##        ##  ##  \n##   ##    ##        ##  ##  \n##   ##    ##        ##  ##  \n##   ##    ##  ##    ##  ##  \n ## ##    ### ###   ### ##   \n                             \n"}
{"sentence": "What are you talking about?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCBhcmUgeW91IHRhbGtpbmcgYWJvdXQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung ner lbh gnyxvat nobhg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay areyay ouyay alkingtay aboutyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 4r3 y0u 74lk1ng 4b0u7?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy str upi ys;lomh snpiy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u0250\u0279\u01dd \u028eon \u0287\u0250l\u029e\u1d09u\u0183 \u0250qon\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW era uoy gniklat ?tuoba\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - what\n2. quixotic - you\n3. mellifluous - talking\n4. ephemeral - are\n5. labyrinthine - about\n\nSentence:\nserendipity ephemeral quixotic mellifluous about?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 a1-c4-e1 e5-e3-a5 e4-a1-b3-a3-d2-d3-b2 a1-b1-e3-a5-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat [MASK_1] [MASK_0] talking [MASK_2]?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n\n\nMask_2:\n  ##      ### ##     ## ##    ##  ###   #### ##  \n   ##      ##  ##   ##   ##   ##   ##   # ## ##  \n ## ##     ##  ##   ##   ##   ##   ##     ##     \n ##  ##    ## ##    ##   ##   ##   ##     ##     \n ## ###    ##  ##   ##   ##   ##   ##     ##     \n ##  ##    ##  ##   ##   ##   ##   ##     ##     \n###  ##   ### ##     ## ##     ## ##     ####    \n                                                 \n"}
{"sentence": "That's the big question, isn't it?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nVGhhdCdzIHRoZSBiaWcgcXVlc3Rpb24sIGlzbid0IGl0Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGung'f gur ovt dhrfgvba, vfa'g vg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nat'sThay ethay igbay uestionqay, isn'tyay ityay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7h47'5 7h3 b1g qu35710n, 15n'7 17?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYjsy'd yjr noh wirdyopm, odm'y oy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u0265\u0250\u0287's \u0287\u0265\u01dd q\u1d09\u0183 bn\u01dds\u0287\u1d09ou, \u1d09su'\u0287 \u1d09\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tahT eht gib ,noitseuq t'nsi ?ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - the\n2. labyrinthine - it\n3. serendipity - big\n4. ephemeral - thats\n5. mellifluous - isnt\n\nSentence:\nephemeral quixotic serendipity question, mellifluous it?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c2-a1-e4-'-d4 e4-c2-e1 b1-d2-b2 b4-a5-e1-d4-e4-d2-e3-d3-, d2-d4-d3-'-e4 d2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nThat's [MASK_0] [MASK_2] question, isn't it?\n\nMask_0:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n\n\nMask_1:\n#### ##   ###  ##     ##      #### ##    ## ##   \n# ## ##    ##  ##      ##     # ## ##   ##   ##  \n  ##       ##  ##    ## ##      ##      ####     \n  ##       ## ###    ##  ##     ##       #####   \n  ##       ##  ##    ## ###     ##          ###  \n  ##       ##  ##    ##  ##     ##      ##   ##  \n ####     ###  ##   ###  ##    ####      ## ##   \n                                                 \n\n\nMask_2:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n"}
{"sentence": "Is football a sport?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXMgZm9vdGJhbGwgYSBzcG9ydD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVf sbbgonyy n fcbeg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIsyay ootballfay ayay ortspay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n15 f007b4ll 4 5p0r7?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOd gppyns;; s d[pty?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIs \u025foo\u0287q\u0250ll \u0250 sdo\u0279\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsI llabtoof a ?trops\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - is\n2. mellifluous - football\n3. serendipity - a\n4. ephemeral - sport\n\nSentence:\nlabyrinthine mellifluous serendipity sport?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d4 a2-e3-e3-e4-b1-a1-b3-b3 a1 d4-a4-e3-c4-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] a [MASK_1]?\n\nMask_0:\n### ###    ## ##     ## ##    #### ##   ### ##      ##      ####      ####     \n ##  ##   ##   ##   ##   ##   # ## ##    ##  ##      ##      ##        ##      \n ##       ##   ##   ##   ##     ##       ##  ##    ## ##     ##        ##      \n ## ##    ##   ##   ##   ##     ##       ## ##     ##  ##    ##        ##      \n ##       ##   ##   ##   ##     ##       ##  ##    ## ###    ##        ##      \n ##       ##   ##   ##   ##     ##       ##  ##    ##  ##    ##  ##    ##  ##  \n####       ## ##     ## ##     ####     ### ##    ###  ##   ### ###   ### ###  \n                                                                               \n\n\nMask_1:\n ## ##    ### ##     ## ##    ### ##    #### ##  \n##   ##    ##  ##   ##   ##    ##  ##   # ## ##  \n####       ##  ##   ##   ##    ##  ##     ##     \n #####     ##  ##   ##   ##    ## ##      ##     \n    ###    ## ##    ##   ##    ## ##      ##     \n##   ##    ##       ##   ##    ##  ##     ##     \n ## ##    ####       ## ##    #### ##    ####    \n                                                 \n\n\nMask_2:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n"}
{"sentence": "Can't you open the door?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQ2FuJ3QgeW91IG9wZW4gdGhlIGRvb3I/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nPna'g lbh bcra gur qbbe?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nan'tCay ouyay openyay ethay oorday?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nC4n'7 y0u 0p3n 7h3 d00r?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nVsm'y upi p[rm yjr fppt?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0186\u0250u'\u0287 \u028eon od\u01ddu \u0287\u0265\u01dd poo\u0279?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nt'naC uoy nepo eht ?rood\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - open\n2. ephemeral - the\n3. labyrinthine - cant\n4. mellifluous - door\n5. serendipity - you\n\nSentence:\nlabyrinthine serendipity quixotic ephemeral door?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc1-a1-d3-'-e4 e5-e3-a5 e3-a4-e1-d3 e4-c2-e1 d1-e3-e3-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nCan't you [MASK_1] the [MASK_2]?\n\nMask_0:\n ## ##      ##      ###  ##   #### ##  \n##   ##      ##       ## ##   # ## ##  \n##         ## ##     # ## #     ##     \n##         ##  ##    ## ##      ##     \n##         ## ###    ##  ##     ##     \n##   ##    ##  ##    ##  ##     ##     \n ## ##    ###  ##   ###  ##    ####    \n                                       \n\n\nMask_1:\n ## ##    ### ##    ### ###   ###  ##  \n##   ##    ##  ##    ##  ##     ## ##  \n##   ##    ##  ##    ##        # ## #  \n##   ##    ##  ##    ## ##     ## ##   \n##   ##    ## ##     ##        ##  ##  \n##   ##    ##        ##  ##    ##  ##  \n ## ##    ####      ### ###   ###  ##  \n                                       \n\n\nMask_2:\n### ##     ## ##     ## ##    ### ##   \n ##  ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ##  ##  \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ##  ##  \n### ##     ## ##     ## ##    #### ##  \n                                       \n"}
{"sentence": "What's your favorite color?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCdzIHlvdXIgZmF2b3JpdGUgY29sb3I/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung'f lbhe snibevgr pbybe?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nat'sWhay ouryay avoritefay olorcay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47'5 y0ur f4v0r173 c0l0r?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy'd upit gsbptoyr vp;pt?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287's \u028eon\u0279 \u025f\u0250\u028co\u0279\u1d09\u0287\u01dd \u0254olo\u0279?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'tahW ruoy etirovaf ?roloc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - whats\n2. ephemeral - your\n3. quixotic - favorite\n4. labyrinthine - color\n\nSentence:\nmellifluous ephemeral quixotic color?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4-'-d4 e5-e3-a5-c4 a2-a1-b5-e3-c4-d2-e4-e1 c1-e3-b3-e3-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat's [MASK_0] favorite [MASK_1]?\n\nMask_0:\n##  ##     ## ##    ##  ###   ### ##   \n##  ##    ##   ##   ##   ##    ##  ##  \n##  ##    ##   ##   ##   ##    ##  ##  \n ## ##    ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ##  ##  \n  ##       ## ##     ## ##    #### ##  \n                                       \n\n\nMask_1:\n ## ##     ## ##    ####       ## ##    ### ##   \n##   ##   ##   ##    ##       ##   ##    ##  ##  \n##        ##   ##    ##       ##   ##    ##  ##  \n##        ##   ##    ##       ##   ##    ## ##   \n##        ##   ##    ##       ##   ##    ## ##   \n##   ##   ##   ##    ##  ##   ##   ##    ##  ##  \n ## ##     ## ##    ### ###    ## ##    #### ##  \n                                                 \n\n\nMask_2:\n##   ##   ###  ##     ##      #### ##    ## ##   \n##   ##    ##  ##      ##     # ## ##   ##   ##  \n##   ##    ##  ##    ## ##      ##      ####     \n## # ##    ## ###    ##  ##     ##       #####   \n# ### #    ##  ##    ## ###     ##          ###  \n ## ##     ##  ##    ##  ##     ##      ##   ##  \n##   ##   ###  ##   ###  ##    ####      ## ##   \n                                                 \n"}
{"sentence": "How do you like it?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGRvIHlvdSBsaWtlIGl0Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj qb lbh yvxr vg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay oday ouyay ikelay ityay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w d0 y0u l1k3 17?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe fp upi ;olr oy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d po \u028eon l\u1d09\u029e\u01dd \u1d09\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH od uoy ekil ?ti\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - how\n2. quixotic - like\n3. serendipity - it\n4. mellifluous - you\n5. labyrinthine - do\n\nSentence:\nephemeral labyrinthine mellifluous quixotic it?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 d1-e3 e5-e3-a5 b3-d2-a3-e1 d2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHow [MASK_2] [MASK_0] like [MASK_1]?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n  ####    #### ##  \n   ##     # ## ##  \n   ##       ##     \n   ##       ##     \n   ##       ##     \n   ##       ##     \n  ####     ####    \n                   \n\n\nMask_2:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n"}
{"sentence": "Does she drink coffee?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG9lcyBzaGUgZHJpbmsgY29mZmVlPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQbrf fur qevax pbssrr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noesDay eshay inkdray offeecay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD035 5h3 dr1nk c0ff33?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFprd djr ftoml vpggrr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o\u01dds s\u0265\u01dd p\u0279\u1d09u\u029e \u0254o\u025f\u025f\u01dd\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nseoD ehs knird ?eeffoc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - does\n2. serendipity - she\n3. labyrinthine - drink\n4. ephemeral - coffee\n\nSentence:\nquixotic serendipity labyrinthine coffee?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3-e1-d4 d4-c2-e1 d1-c4-d2-d3-a3 c1-e3-a2-a2-e1-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] [MASK_2] coffee?\n\nMask_0:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n\n\nMask_1:\n### ##     ## ##    ### ###    ## ##   \n ##  ##   ##   ##    ##  ##   ##   ##  \n ##  ##   ##   ##    ##       ####     \n ##  ##   ##   ##    ## ##     #####   \n ##  ##   ##   ##    ##           ###  \n ##  ##   ##   ##    ##  ##   ##   ##  \n### ##     ## ##    ### ###    ## ##   \n                                       \n\n\nMask_2:\n### ##    ### ##      ####    ###  ##   ##  ###  \n ##  ##    ##  ##      ##       ## ##   ##  ##   \n ##  ##    ##  ##      ##      # ## #   ## ##    \n ##  ##    ## ##       ##      ## ##    ## ##    \n ##  ##    ## ##       ##      ##  ##   ## ###   \n ##  ##    ##  ##      ##      ##  ##   ##  ##   \n### ##    #### ##     ####    ###  ##   ##  ###  \n                                                 \n"}
{"sentence": "Are you cold?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSBjb2xkPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh pbyq?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay oldcay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u c0ld?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi vp;f?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon \u0254olp?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy ?dloc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - are\n2. quixotic - you\n3. serendipity - cold\n\nSentence:\nlabyrinthine quixotic cold?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 c1-e3-b3-d1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] you cold?\n\nMask_0:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n"}
{"sentence": "Are you ready for your big date?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSByZWFkeSBmb3IgeW91ciBiaWcgZGF0ZT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh ernql sbe lbhe ovt qngr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay eadyray orfay ouryay igbay ateday?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u r34dy f0r y0ur b1g d473?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi trsfu gpt upit noh fsyr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon \u0279\u01dd\u0250p\u028e \u025fo\u0279 \u028eon\u0279 q\u1d09\u0183 p\u0250\u0287\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy ydaer rof ruoy gib ?etad\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - your\n2. serendipity - are\n3. labyrinthine - you\n4. mellifluous - big\n5. quixotic - ready\n\nSentence:\nserendipity labyrinthine quixotic for ephemeral mellifluous date?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 c4-e1-a1-d1-e5 a2-e3-c4 e5-e3-a5-c4 b1-d2-b2 d1-a1-e4-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] you ready for [MASK_0] [MASK_2] date?\n\nMask_0:\n##  ##     ## ##    ##  ###   ### ##   \n##  ##    ##   ##   ##   ##    ##  ##  \n##  ##    ##   ##   ##   ##    ##  ##  \n ## ##    ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ##  ##  \n  ##       ## ##     ## ##    #### ##  \n                                       \n\n\nMask_1:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n\n\nMask_2:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n"}
{"sentence": "Why not?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2h5IG5vdD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJul abg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nWhyay otnay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWhy n07?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEju mpy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u028e uo\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyhW ?ton\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - why\n2. labyrinthine - not\n\nSentence:\nquixotic not?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e5 d3-e3-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] not?\n\nMask_0:\n##   ##   ###  ##   ##  ##   \n##   ##    ##  ##   ##  ##   \n##   ##    ##  ##   ##  ##   \n## # ##    ## ###    ## ##   \n# ### #    ##  ##     ##     \n ## ##     ##  ##     ##     \n##   ##   ###  ##     ##     \n                             \n"}
{"sentence": "Does he have a big family?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG9lcyBoZSBoYXZlIGEgYmlnIGZhbWlseT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQbrf ur unir n ovt snzvyl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noesDay ehay avehay ayay igbay amilyfay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD035 h3 h4v3 4 b1g f4m1ly?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFprd jr jsbr s noh gs,o;u?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o\u01dds \u0265\u01dd \u0265\u0250\u028c\u01dd \u0250 q\u1d09\u0183 \u025f\u0250\u026f\u1d09l\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nseoD eh evah a gib ?ylimaf\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - he\n2. mellifluous - family\n3. quixotic - a\n4. labyrinthine - have\n5. serendipity - does\n\nSentence:\nserendipity ephemeral labyrinthine quixotic big family?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3-e1-d4 c2-e1 c2-a1-b5-e1 a1 b1-d2-b2 a2-a1-c3-d2-b3-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] he have [MASK_2] [MASK_1] family?\n\nMask_0:\n### ##     ## ##    ### ###    ## ##   \n ##  ##   ##   ##    ##  ##   ##   ##  \n ##  ##   ##   ##    ##       ####     \n ##  ##   ##   ##    ## ##     #####   \n ##  ##   ##   ##    ##           ###  \n ##  ##   ##   ##    ##  ##   ##   ##  \n### ##     ## ##    ### ###    ## ##   \n                                       \n\n\nMask_1:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n\n\nMask_2:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n"}
{"sentence": "Where do you live?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hlcmUgZG8geW91IGxpdmU/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJurer qb lbh yvir?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nereWhay oday ouyay ivelay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh3r3 d0 y0u l1v3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjrtr fp upi ;obr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u01dd\u0279\u01dd po \u028eon l\u1d09\u028c\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerehW od uoy ?evil\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - where\n2. ephemeral - do\n3. mellifluous - you\n4. quixotic - live\n\nSentence:\nserendipity ephemeral mellifluous live?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e1-c4-e1 d1-e3 e5-e3-a5 b3-d2-b5-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] [MASK_2] live?\n\nMask_0:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n\n\nMask_1:\n##   ##   ###  ##   ### ###   ### ##    ### ###  \n##   ##    ##  ##    ##  ##    ##  ##    ##  ##  \n##   ##    ##  ##    ##        ##  ##    ##      \n## # ##    ## ###    ## ##     ## ##     ## ##   \n# ### #    ##  ##    ##        ## ##     ##      \n ## ##     ##  ##    ##  ##    ##  ##    ##  ##  \n##   ##   ###  ##   ### ###   #### ##   ### ###  \n                                                 \n\n\nMask_2:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n"}
{"sentence": "Has he come to get you yet?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSGFzIGhlIGNvbWUgdG8gZ2V0IHlvdSB5ZXQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUnf ur pbzr gb trg lbh lrg?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nasHay ehay omecay otay etgay ouyay etyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH45 h3 c0m3 70 g37 y0u y37?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJsd jr vp,r yp hry upi ury?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nH\u0250s \u0265\u01dd \u0254o\u026f\u01dd \u0287o \u0183\u01dd\u0287 \u028eon \u028e\u01dd\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsaH eh emoc ot teg uoy ?tey\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - yet\n2. mellifluous - come\n3. labyrinthine - to\n4. ephemeral - you\n5. serendipity - get\n\nSentence:\nHas he mellifluous labyrinthine serendipity ephemeral yet?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-a1-d4 c2-e1 c1-e3-c3-e1 e4-e3 b2-e1-e4 e5-e3-a5 e5-e1-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHas he [MASK_1] [MASK_2] get [MASK_0] yet?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n ## ##     ## ##    ##   ##   ### ###  \n##   ##   ##   ##    ## ##     ##  ##  \n##        ##   ##   # ### #    ##      \n##        ##   ##   ## # ##    ## ##   \n##        ##   ##   ##   ##    ##      \n##   ##   ##   ##   ##   ##    ##  ##  \n ## ##     ## ##    ##   ##   ### ###  \n                                       \n\n\nMask_2:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n"}
{"sentence": "Do you have a bigger one?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IGhhdmUgYSBiaWdnZXIgb25lPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh unir n ovttre bar?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay avehay ayay iggerbay oneyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u h4v3 4 b1gg3r 0n3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi jsbr s nohhrt pmr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon \u0265\u0250\u028c\u01dd \u0250 q\u1d09\u0183\u0183\u01dd\u0279 ou\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy evah a reggib ?eno\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - have\n2. mellifluous - do\n3. serendipity - bigger\n4. labyrinthine - you\n5. quixotic - a\n\nSentence:\nmellifluous labyrinthine ephemeral quixotic serendipity one?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 c2-a1-b5-e1 a1 b1-d2-b2-b2-e1-c4 e3-d3-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] you [MASK_0] [MASK_1] bigger one?\n\nMask_0:\n###  ##     ##      ### ###   ### ###  \n ##  ##      ##      ##  ##    ##  ##  \n ##  ##    ## ##     ##  ##    ##      \n ## ###    ##  ##    ##  ##    ## ##   \n ##  ##    ## ###    ### ##    ##      \n ##  ##    ##  ##     ###      ##  ##  \n###  ##   ###  ##      ##     ### ###  \n                                       \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n"}
{"sentence": "Is she choking?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXMgc2hlIGNob2tpbmc/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVf fur pubxvat?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIsyay eshay okingchay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n15 5h3 ch0k1ng?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOd djr vjplomh?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIs s\u0265\u01dd \u0254\u0265o\u029e\u1d09u\u0183?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsI ehs ?gnikohc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - is\n2. ephemeral - she\n3. serendipity - choking\n\nSentence:\nmellifluous ephemeral choking?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d4 d4-c2-e1 c1-c2-e3-a3-d2-d3-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] she choking?\n\nMask_0:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n"}
{"sentence": "Was John sick?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2FzIEpvaG4gc2ljaz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJnf Wbua fvpx?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nasWay ohnJay icksay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW45 J0hn 51ck?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEsd Kpjm dovl?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0250s \u017fo\u0265u s\u1d09\u0254\u029e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsaW nhoJ ?kcis\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - was\n2. ephemeral - john\n3. labyrinthine - sick\n\nSentence:\nmellifluous ephemeral sick?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-a1-d4 e2-e3-c2-d3 d4-d2-c1-a3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWas John [MASK_0]?\n\nMask_0:\n ## ##      ####     ## ##    ##  ###  \n##   ##      ##     ##   ##   ##  ##   \n####         ##     ##        ## ##    \n #####       ##     ##        ## ##    \n    ###      ##     ##        ## ###   \n##   ##      ##     ##   ##   ##  ##   \n ## ##      ####     ## ##    ##  ###  \n                                       \n"}
{"sentence": "Do you mind if I smoke?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IG1pbmQgaWYgSSBzbW9rZT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh zvaq vs V fzbxr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay indmay ifyay Iyay okesmay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u m1nd 1f 1 5m0k3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi ,omf og O d,plr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon \u026f\u1d09up \u1d09\u025f I s\u026fo\u029e\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy dnim fi I ?ekoms\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - do\n2. serendipity - if\n3. labyrinthine - you\n4. mellifluous - mind\n5. ephemeral - i\n\nSentence:\nquixotic labyrinthine mellifluous serendipity ephemeral smoke?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 c3-d2-d3-d1 d2-a2 d2 d4-c3-e3-a3-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_1] mind [MASK_0] I smoke?\n\nMask_0:\n  ####    ### ###  \n   ##      ##  ##  \n   ##      ##      \n   ##      ## ##   \n   ##      ##      \n   ##      ##      \n  ####    ####     \n                   \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n### ##     ## ##   \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##     ## ##   \n                   \n"}
{"sentence": "Do you think this is too big?", "long": false, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IHRoaW5rIHRoaXMgaXMgdG9vIGJpZz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh guvax guvf vf gbb ovt?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay inkthay isthay isyay ootay igbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u 7h1nk 7h15 15 700 b1g?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi yjoml yjod od ypp noh?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon \u0287\u0265\u1d09u\u029e \u0287\u0265\u1d09s \u1d09s \u0287oo q\u1d09\u0183?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy kniht siht si oot ?gib\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - this\n2. labyrinthine - is\n3. serendipity - you\n4. ephemeral - too\n5. mellifluous - do\n\nSentence:\nmellifluous serendipity think quixotic labyrinthine ephemeral big?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 e4-c2-d2-d3-a3 e4-c2-d2-d4 d2-d4 e4-e3-e3 b1-d2-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDo [MASK_1] think [MASK_2] is [MASK_0] big?\n\nMask_0:\n#### ##    ## ##     ## ##   \n# ## ##   ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n ####      ## ##     ## ##   \n                             \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n#### ##   ###  ##     ####     ## ##   \n# ## ##    ##  ##      ##     ##   ##  \n  ##       ##  ##      ##     ####     \n  ##       ## ###      ##      #####   \n  ##       ##  ##      ##         ###  \n  ##       ##  ##      ##     ##   ##  \n ####     ###  ##     ####     ## ##   \n                                       \n"}
{"sentence": "kASA'O sEnY EZGlGHp?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\na0FTQSdPIHNFblkgRVpHbEdIcD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nxNFN'B fRaL RMTyTUc?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nASA'Okay EnYsay EZGlGHpyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk454'0 53nY 3ZGlGHp?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nlSDS'P dRmU RXH;HJ[?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e\u2200S\u2200'O s\u018eu\u2144 \u018eZ\u2141l\u2141Hd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nO'ASAk YnEs ?pHGlGZE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - kasao\n2. mellifluous - seny\n3. ephemeral - ezglghp\n\nSentence:\nquixotic mellifluous EZGlGHp?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-a1-d4-a1-'-e3 d4-e1-d3-e5 e1-z-b2-b3-b2-c2-a4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nkASA'O [MASK_0] EZGlGHp?\n\nMask_0:\n ## ##    ### ###   ###  ##   ##  ##   \n##   ##    ##  ##     ## ##   ##  ##   \n####       ##        # ## #   ##  ##   \n #####     ## ##     ## ##     ## ##   \n    ###    ##        ##  ##     ##     \n##   ##    ##  ##    ##  ##     ##     \n ## ##    ### ###   ###  ##     ##     \n                                       \n"}
{"sentence": "Yaax LBe jYW o oScBV?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWWFheCBMQmUgallXIG8gb1NjQlY/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nLnnk YOr wLJ b bFpOI?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naaxYay eLBay jYWay oyay oScBVyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nY44x LB3 jYW 0 05cBV?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nUssc ;Nr kUE p pDvNB?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2144\u0250\u0250x \u2142\u15fa\u01dd \u027e\u2144M o oS\u0254\u15fa\u039b?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nxaaY eBL WYj o ?VBcSo\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - lbe\n2. quixotic - jyw\n3. labyrinthine - o\n4. mellifluous - yaax\n5. serendipity - oscbv\n\nSentence:\nmellifluous ephemeral quixotic labyrinthine oScBV?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne5-a1-a1-d5 b3-b1-e1 e2-e5-c5 e3 e3-d4-c1-b1-b5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] LBe [MASK_0] [MASK_2] oScBV?\n\nMask_0:\n   ####   ##  ##    ##   ##  \n    ##    ##  ##    ##   ##  \n    ##    ##  ##    ##   ##  \n    ##     ## ##    ## # ##  \n##  ##      ##      # ### #  \n##  ##      ##       ## ##   \n ## #       ##      ##   ##  \n                             \n\n\nMask_1:\n##  ##      ##        ##      ##  ##   \n##  ##       ##        ##     ### ##   \n##  ##     ## ##     ## ##     ###     \n ## ##     ##  ##    ##  ##     ###    \n  ##       ## ###    ## ###      ###   \n  ##       ##  ##    ##  ##   ##  ###  \n  ##      ###  ##   ###  ##   ##   ##  \n                                       \n\n\nMask_2:\n ## ##   \n##   ##  \n##   ##  \n##   ##  \n##   ##  \n##   ##  \n ## ##   \n         \n"}
{"sentence": "XA NCc vIFS hPxbjVfhZ?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWEEgTkNjIHZJRlMgaFB4YmpWZmhaPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nKN APp iVSF uCkowIsuM?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAXay NCcay IFSvay hPxbjVfhZay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nX4 NCc v1F5 hPxbjVfhZ?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nCS MVv bOGD j[cnkBgjX?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nX\u2200 N\u0186\u0254 \u028cI\u2132S \u0265\u0500xq\u027e\u039b\u025f\u0265Z?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nAX cCN SFIv ?ZhfVjbxPh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - xa\n2. mellifluous - ncc\n3. labyrinthine - vifs\n4. ephemeral - hpxbjvfhz\n\nSentence:\nquixotic mellifluous labyrinthine hPxbjVfhZ?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-a1 d3-c1-c1 b5-d2-a2-d4 c2-a4-d5-b1-e2-b5-a2-c2-z-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nXA [MASK_0] [MASK_1] [MASK_2]?\n\nMask_0:\n###  ##    ## ##     ## ##   \n  ## ##   ##   ##   ##   ##  \n # ## #   ##        ##       \n ## ##    ##        ##       \n ##  ##   ##        ##       \n ##  ##   ##   ##   ##   ##  \n###  ##    ## ##     ## ##   \n                             \n\n\nMask_1:\n### ###     ####    ### ###    ## ##   \n ##  ##      ##      ##  ##   ##   ##  \n ##  ##      ##      ##       ####     \n ##  ##      ##      ## ##     #####   \n ### ##      ##      ##           ###  \n  ###        ##      ##       ##   ##  \n   ##       ####    ####       ## ##   \n                                       \n\n\nMask_2:\n###  ##   ### ##    ##  ##    ### ##       ####   ### ###   ### ###   ###  ##   ### ##   \n ##  ##    ##  ##   ### ##     ##  ##       ##     ##  ##    ##  ##    ##  ##   ##  ##   \n ##  ##    ##  ##    ###       ##  ##       ##     ##  ##    ##        ##  ##      ##    \n ## ###    ##  ##     ###      ## ##        ##     ##  ##    ## ##     ## ###     ##     \n ##  ##    ## ##       ###     ##  ##   ##  ##     ### ##    ##        ##  ##    ##      \n ##  ##    ##       ##  ###    ##  ##   ##  ##      ###      ##        ##  ##   ##  ##   \n###  ##   ####      ##   ##   ### ##     ## #        ##     ####      ###  ##   # ####   \n                                                                                         \n"}
{"sentence": "bDkJ Uvz FjlQ cE peXmn?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nYkRrSiBVdnogRmpsUSBjRSBwZVhtbj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\noQxW Him SwyD pR crKza?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nbDkJay Uvzyay FjlQay Ecay eXmnpay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nbDkJ Uvz FjlQ c3 p3Xmn?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nnFlK Ibx Gk;W vR [rC,m?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nq\u15e1\u029e\u017f \u2229\u028cz \u2132\u027el\u10e2 \u0254\u018e d\u01ddX\u026fu?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nJkDb zvU QljF Ec ?nmXep\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - bdkj\n2. labyrinthine - fjlq\n3. ephemeral - uvz\n4. quixotic - pexmn\n5. mellifluous - ce\n\nSentence:\nserendipity ephemeral labyrinthine mellifluous peXmn?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb1-d1-a3-e2 a5-b5-z a2-e2-b3-b4 c1-e1 a4-e1-d5-c3-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_1] FjlQ [MASK_0] peXmn?\n\nMask_0:\n ## ##    ### ###  \n##   ##    ##  ##  \n##         ##      \n##         ## ##   \n##         ##      \n##   ##    ##  ##  \n ## ##    ### ###  \n                   \n\n\nMask_1:\n##  ###   ### ###   ### ##   \n##   ##    ##  ##   ##  ##   \n##   ##    ##  ##      ##    \n##   ##    ##  ##     ##     \n##   ##    ### ##    ##      \n##   ##     ###     ##  ##   \n ## ##       ##     # ####   \n                             \n\n\nMask_2:\n### ##    ### ##    ##  ###      ####  \n ##  ##    ##  ##   ##  ##        ##   \n ##  ##    ##  ##   ## ##         ##   \n ## ##     ##  ##   ## ##         ##   \n ##  ##    ##  ##   ## ###    ##  ##   \n ##  ##    ##  ##   ##  ##    ##  ##   \n### ##    ### ##    ##  ###    ## #    \n                                       \n"}
{"sentence": "RZQ WWL U ehJEJym vj IA?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUlpRIFdXTCBVIGVoSkVKeW0gdmogSUE/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nEMD JJY H ruWRWlz iw VN?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nRZQay WWLay Uyay ehJEJymyay vjay IAyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nRZQ WWL U 3hJ3Jym vj 14?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nTXW EE; I rjKRKu, bk OS?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u1d1aZ\u10e2 MM\u2142 \u2229 \u01dd\u0265\u017f\u018e\u017f\u028e\u026f \u028c\u027e I\u2200?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nQZR LWW U myJEJhe jv ?AI\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - ia\n2. ephemeral - ehjejym\n3. serendipity - vj\n4. mellifluous - u\n5. labyrinthine - wwl\n\nSentence:\nRZQ labyrinthine mellifluous ephemeral serendipity IA?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc4-z-b4 c5-c5-b3 a5 e1-c2-e2-e1-e2-e5-c3 b5-e2 d2-a1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_1] U [MASK_2] vj IA?\n\nMask_0:\n### ##    ### ##     ## ##   \n ##  ##   ##  ##    ##   ##  \n ##  ##      ##     ##   ##  \n ## ##      ##      ##   ##  \n ## ##     ##       ##   ##  \n ##  ##   ##  ##    ##  ##   \n#### ##   # ####     ##  ##  \n                             \n\n\nMask_1:\n##   ##   ##   ##   ####     \n##   ##   ##   ##    ##      \n##   ##   ##   ##    ##      \n## # ##   ## # ##    ##      \n# ### #   # ### #    ##      \n ## ##     ## ##     ##  ##  \n##   ##   ##   ##   ### ###  \n                             \n\n\nMask_2:\n### ###   ###  ##      ####   ### ###      ####   ##  ##    ##   ##  \n ##  ##    ##  ##       ##     ##  ##       ##    ##  ##     ## ##   \n ##        ##  ##       ##     ##           ##    ##  ##    # ### #  \n ## ##     ## ###       ##     ## ##        ##     ## ##    ## # ##  \n ##        ##  ##   ##  ##     ##       ##  ##      ##      ##   ##  \n ##  ##    ##  ##   ##  ##     ##  ##   ##  ##      ##      ##   ##  \n### ###   ###  ##    ## #     ### ###    ## #       ##      ##   ##  \n                                                                     \n"}
{"sentence": "sxCG yuFy rb f kT?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nc3hDRyB5dUZ5IHJiIGYga1Q/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nfkPT lhSl eo s xG?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nsxCGay uFyyay rbay fay kTay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n5xCG yuFy rb f k7?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ndcVH uiGu tn g lY?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nsx\u0186\u2141 \u028en\u2132\u028e \u0279q \u025f \u029e\u22a5?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nGCxs yFuy br f ?Tk\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - sxcg\n2. quixotic - f\n3. mellifluous - kt\n4. ephemeral - rb\n5. labyrinthine - yufy\n\nSentence:\nserendipity labyrinthine ephemeral quixotic kT?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd4-d5-c1-b2 e5-a5-a2-e5 c4-b1 a2 a3-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nsxCG [MASK_2] [MASK_0] [MASK_1] kT?\n\nMask_0:\n### ##    ### ##   \n ##  ##    ##  ##  \n ##  ##    ##  ##  \n ## ##     ## ##   \n ## ##     ##  ##  \n ##  ##    ##  ##  \n#### ##   ### ##   \n                   \n\n\nMask_1:\n### ###  \n ##  ##  \n ##      \n ## ##   \n ##      \n ##      \n####     \n         \n\n\nMask_2:\n##  ##    ##  ###   ### ###   ##  ##   \n##  ##    ##   ##    ##  ##   ##  ##   \n##  ##    ##   ##    ##       ##  ##   \n ## ##    ##   ##    ## ##     ## ##   \n  ##      ##   ##    ##         ##     \n  ##      ##   ##    ##         ##     \n  ##       ## ##    ####        ##     \n                                       \n"}
{"sentence": "TFaF'e JM VHoKMuJ Nh lQ kOw vwWMtpg?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nVEZhRidlIEpNIFZIb0tNdUogTmggbFEga093IHZ3V010cGc/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGSnS'r WZ IUbXZhW Au yD xBj ijJZgct?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naF'eTFay JMay oKMuJVHay Nhay lQay Owkay vwWMtpgay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7F4F'3 JM VH0KMuJ Nh lQ k0w vwWM7pg?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYGsG'r K, BJpL,iK Mj ;W lPe beE,y[h?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u2132\u0250\u2132'\u01dd \u017fW \u039bHo\ua4d8Wn\u017f N\u0265 l\u10e2 \u029eO\u028d \u028c\u028dMW\u0287d\u0183?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ne'FaFT MJ JuMKoHV hN Ql wOk ?gptMWwv\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - kow\n2. ephemeral - lq\n3. quixotic - tfafe\n4. mellifluous - vhokmuj\n5. labyrinthine - jm\n\nSentence:\nquixotic labyrinthine mellifluous Nh ephemeral serendipity vwWMtpg?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-a2-a1-a2-'-e1 e2-c3 b5-c2-e3-a3-c3-a5-e2 d3-c2 b3-b4 a3-e3-c5 b5-c5-c5-c3-e4-a4-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nTFaF'e JM [MASK_1] Nh lQ [MASK_0] [MASK_2]?\n\nMask_0:\n##  ###    ## ##    ##   ##  \n##  ##    ##   ##   ##   ##  \n## ##     ##   ##   ##   ##  \n## ##     ##   ##   ## # ##  \n## ###    ##   ##   # ### #  \n##  ##    ##   ##    ## ##   \n##  ###    ## ##    ##   ##  \n                             \n\n\nMask_1:\n### ###   ###  ##    ## ##    ##  ###   ##   ##   ##  ###      ####  \n ##  ##    ##  ##   ##   ##   ##  ##     ## ##    ##   ##       ##   \n ##  ##    ##  ##   ##   ##   ## ##     # ### #   ##   ##       ##   \n ##  ##    ## ###   ##   ##   ## ##     ## # ##   ##   ##       ##   \n ### ##    ##  ##   ##   ##   ## ###    ##   ##   ##   ##   ##  ##   \n  ###      ##  ##   ##   ##   ##  ##    ##   ##   ##   ##   ##  ##   \n   ##     ###  ##    ## ##    ##  ###   ##   ##    ## ##     ## #    \n                                                                     \n\n\nMask_2:\n### ###   ##   ##   ##   ##   ##   ##   #### ##   ### ##     ## ##   \n ##  ##   ##   ##   ##   ##    ## ##    # ## ##    ##  ##   ##   ##  \n ##  ##   ##   ##   ##   ##   # ### #     ##       ##  ##   ##       \n ##  ##   ## # ##   ## # ##   ## # ##     ##       ##  ##   ##  ###  \n ### ##   # ### #   # ### #   ##   ##     ##       ## ##    ##   ##  \n  ###      ## ##     ## ##    ##   ##     ##       ##       ##   ##  \n   ##     ##   ##   ##   ##   ##   ##    ####     ####       ## ##   \n                                                                     \n"}
{"sentence": "kel XBxkR cRHQp AkV Law FGy Qpp?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\na2VsIFhCeGtSIGNSSFFwIEFrViBMYXcgRkd5IFFwcD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nxry KOkxE pEUDc NxI Ynj STl Dcc?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nelkay XBxkRay cRHQpay AkVyay awLay FGyay Qppay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk3l XBxkR cRHQp 4kV L4w FGy Qpp?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nlr; CNclT vTJW[ SlB ;se GHu W[[?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e\u01ddl X\u15fax\u029e\u1d1a \u0254\u1d1aH\u10e2d \u2200\u029e\u039b \u2142\u0250\u028d \u2132\u2141\u028e \u10e2dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nlek RkxBX pQHRc VkA waL yGF ?ppQ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - xbxkr\n2. serendipity - law\n3. labyrinthine - crhqp\n4. ephemeral - fgy\n5. mellifluous - kel\n\nSentence:\nmellifluous quixotic labyrinthine AkV serendipity ephemeral Qpp?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-e1-b3 d5-b1-d5-a3-c4 c1-c4-c2-b4-a4 a1-a3-b5 b3-a1-c5 a2-b2-e5 b4-a4-a4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] [MASK_0] AkV Law FGy Qpp?\n\nMask_0:\n ## ##    ### ##    ###  ##    ## ##    ### ##   \n##   ##    ##  ##    ##  ##   ##   ##    ##  ##  \n##         ##  ##    ##  ##   ##   ##    ##  ##  \n##         ## ##     ## ###   ##   ##    ##  ##  \n##         ## ##     ##  ##   ##   ##    ## ##   \n##   ##    ##  ##    ##  ##   ##  ##     ##      \n ## ##    #### ##   ###  ##    ##  ##   ####     \n                                                 \n\n\nMask_1:\n##  ###   ### ###   ####     \n##  ##     ##  ##    ##      \n## ##      ##        ##      \n## ##      ## ##     ##      \n## ###     ##        ##      \n##  ##     ##  ##    ##  ##  \n##  ###   ### ###   ### ###  \n                             \n\n\nMask_2:\n##  ##    ### ##    ##  ##    ##  ###   ### ##   \n### ##     ##  ##   ### ##    ##  ##     ##  ##  \n ###       ##  ##    ###      ## ##      ##  ##  \n  ###      ## ##      ###     ## ##      ## ##   \n   ###     ##  ##      ###    ## ###     ## ##   \n##  ###    ##  ##   ##  ###   ##  ##     ##  ##  \n##   ##   ### ##    ##   ##   ##  ###   #### ##  \n                                                 \n"}
{"sentence": "kJeC'Z A XVEdsdq, Qsc'A pk?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\na0plQydaIEEgWFZFZHNkcSwgUXNjJ0EgcGs/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nxWrP'M N KIRqfqd, Dfp'N cx?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neC'ZkJay Ayay EdsdqXVay, AQsc'ay pkay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nkJ3C'Z 4 XV3d5dq, Q5c'4 pk?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nlKrV'X S CBRfdfw, Wdv'S [l?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e\u017f\u01dd\u0186'Z \u2200 X\u039b\u018epspb, \u10e2s\u0254'\u2200 d\u029e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nZ'CeJk A ,qdsdEVX A'csQ ?kp\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - xvedsdq\n2. quixotic - a\n3. ephemeral - pk\n4. labyrinthine - kjecz\n5. mellifluous - qsca\n\nSentence:\nlabyrinthine quixotic XVEdsdq, Qsc'quixotic pk?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-e2-e1-c1-'-z a1 d5-b5-e1-d1-d4-d1-b4-, b4-d4-c1-'-a1 a4-a3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nkJeC'Z [MASK_1] [MASK_0], Qsc'[MASK_1] [MASK_2]?\n\nMask_0:\n##  ##    ### ###   ### ###   ### ##     ## ##    ### ##     ## ##   \n### ##     ##  ##    ##  ##    ##  ##   ##   ##    ##  ##   ##   ##  \n ###       ##  ##    ##        ##  ##   ####       ##  ##   ##   ##  \n  ###      ##  ##    ## ##     ##  ##    #####     ##  ##   ##   ##  \n   ###     ### ##    ##        ##  ##       ###    ##  ##   ##   ##  \n##  ###     ###      ##  ##    ##  ##   ##   ##    ##  ##   ##  ##   \n##   ##      ##     ### ###   ### ##     ## ##    ### ##     ##  ##  \n                                                                     \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n### ##    ##  ###  \n ##  ##   ##  ##   \n ##  ##   ## ##    \n ##  ##   ## ##    \n ## ##    ## ###   \n ##       ##  ##   \n####      ##  ###  \n                   \n"}
{"sentence": "zevPj jVU Edq iPHUEb, nxYjxM?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nemV2UGogalZVIEVkcSBpUEhVRWIsIG54WWp4TT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nmriCw wIH Rqd vCUHRo, akLwkZ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nevPjzay UjVay Edqyay iPHUEbyay, nxYjxMay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nz3vPj jVU 3dq 1PHU3b, nxYjxM?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nxrb[k kBI Rfw o[JIRn, mcUkc,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nz\u01dd\u028c\u0500\u027e \u027e\u039b\u2229 \u018epb \u1d09\u0500H\u2229\u018eq, ux\u2144\u027exW?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njPvez UVj qdE ,bEUHPi ?MxjYxn\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - jvu\n2. labyrinthine - zevpj\n3. serendipity - iphueb\n4. quixotic - nxyjxm\n5. ephemeral - edq\n\nSentence:\nlabyrinthine mellifluous ephemeral iPHUEb, nxYjxM?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-e1-b5-a4-e2 e2-b5-a5 e1-d1-b4 d2-a4-c2-a5-e1-b1-, d3-d5-e5-e2-d5-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] jVU [MASK_0] [MASK_2], nxYjxM?\n\nMask_0:\n### ###   ### ##     ## ##   \n ##  ##    ##  ##   ##   ##  \n ##        ##  ##   ##   ##  \n ## ##     ##  ##   ##   ##  \n ##        ##  ##   ##   ##  \n ##  ##    ##  ##   ##  ##   \n### ###   ### ##     ##  ##  \n                             \n\n\nMask_1:\n### ##    ### ###   ### ###   ### ##       ####  \n##  ##     ##  ##    ##  ##    ##  ##       ##   \n   ##      ##        ##  ##    ##  ##       ##   \n  ##       ## ##     ##  ##    ##  ##       ##   \n ##        ##        ### ##    ## ##    ##  ##   \n##  ##     ##  ##     ###      ##       ##  ##   \n# ####    ### ###      ##     ####       ## #    \n                                                 \n\n\nMask_2:\n  ####    ### ##    ###  ##   ##  ###   ### ###   ### ##   \n   ##      ##  ##    ##  ##   ##   ##    ##  ##    ##  ##  \n   ##      ##  ##    ##  ##   ##   ##    ##        ##  ##  \n   ##      ##  ##    ## ###   ##   ##    ## ##     ## ##   \n   ##      ## ##     ##  ##   ##   ##    ##        ##  ##  \n   ##      ##        ##  ##   ##   ##    ##  ##    ##  ##  \n  ####    ####      ###  ##    ## ##    ### ###   ### ##   \n                                                           \n"}
{"sentence": "XBFL Et iIL ri XUa yRiTbqLuPpLA?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWEJGTCBFdCBpSUwgcmkgWFVhIHlSaVRicUx1UHBMQT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nKOSY Rg vVY ev KHn lEvGodYhCcYN?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nXBFLay Etyay iILyay iray UaXay iTbqLuPpLAyRay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nXBFL 37 11L r1 XU4 yR17bqLuPpL4?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nCNG; Ry oO; to CIs uToYnw;i[[;S?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nX\u15fa\u2132\u2142 \u018e\u0287 \u1d09I\u2142 \u0279\u1d09 X\u2229\u0250 \u028e\u1d1a\u1d09\u22a5qb\u2142n\u0500d\u2142\u2200?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nLFBX tE LIi ir aUX ?ALpPuLqbTiRy\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - iil\n2. serendipity - yritbqluppla\n3. mellifluous - et\n4. labyrinthine - ri\n5. ephemeral - xua\n\nSentence:\nXBFL mellifluous quixotic labyrinthine ephemeral yRiTbqLuPpLA?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-b1-a2-b3 e1-e4 d2-d2-b3 c4-d2 d5-a5-a1 e5-c4-d2-e4-b1-b4-b3-a5-a4-a4-b3-a1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nXBFL [MASK_1] iIL ri [MASK_2] [MASK_0]?\n\nMask_0:\n##  ##    ### ##      ####    #### ##   ### ##     ## ##    ####      ##  ###   ### ##    ### ##    ####        ##     \n##  ##     ##  ##      ##     # ## ##    ##  ##   ##   ##    ##       ##   ##    ##  ##    ##  ##    ##          ##    \n##  ##     ##  ##      ##       ##       ##  ##   ##   ##    ##       ##   ##    ##  ##    ##  ##    ##        ## ##   \n ## ##     ## ##       ##       ##       ## ##    ##   ##    ##       ##   ##    ##  ##    ##  ##    ##        ##  ##  \n  ##       ## ##       ##       ##       ##  ##   ##   ##    ##       ##   ##    ## ##     ## ##     ##        ## ###  \n  ##       ##  ##      ##       ##       ##  ##   ##  ##     ##  ##   ##   ##    ##        ##        ##  ##    ##  ##  \n  ##      #### ##     ####     ####     ### ##     ##  ##   ### ###    ## ##    ####      ####      ### ###   ###  ##  \n                                                                                                                       \n\n\nMask_1:\n### ###   #### ##  \n ##  ##   # ## ##  \n ##         ##     \n ## ##      ##     \n ##         ##     \n ##  ##     ##     \n### ###    ####    \n                   \n\n\nMask_2:\n##  ##    ##  ###     ##     \n### ##    ##   ##      ##    \n ###      ##   ##    ## ##   \n  ###     ##   ##    ##  ##  \n   ###    ##   ##    ## ###  \n##  ###   ##   ##    ##  ##  \n##   ##    ## ##    ###  ##  \n                             \n"}
{"sentence": "qRz WZi ij gz glb?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncVJ6IFdaaSBpaiBneiBnbGI/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ndEm JMv vw tm tyo?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nqRzay iWZay ijyay gzay glbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nqRz WZ1 1j gz glb?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nwTx EXo ok hx h;n?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nb\u1d1az MZ\u1d09 \u1d09\u027e \u0183z \u0183lq?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nzRq iZW ji zg ?blg\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - glb\n2. ephemeral - gz\n3. labyrinthine - qrz\n4. mellifluous - wzi\n5. quixotic - ij\n\nSentence:\nlabyrinthine mellifluous quixotic ephemeral glb?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb4-c4-z c5-z-d2 d2-e2 b2-z b2-b3-b1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] WZi [MASK_1] [MASK_2] glb?\n\nMask_0:\n ## ##    ### ##    ### ##   \n##   ##    ##  ##   ##  ##   \n##   ##    ##  ##      ##    \n##   ##    ## ##      ##     \n##   ##    ## ##     ##      \n##  ##     ##  ##   ##  ##   \n ##  ##   #### ##   # ####   \n                             \n\n\nMask_1:\n  ####       ####  \n   ##         ##   \n   ##         ##   \n   ##         ##   \n   ##     ##  ##   \n   ##     ##  ##   \n  ####     ## #    \n                   \n\n\nMask_2:\n ## ##    ### ##   \n##   ##   ##  ##   \n##           ##    \n##  ###     ##     \n##   ##    ##      \n##   ##   ##  ##   \n ## ##    # ####   \n                   \n"}
{"sentence": "PCYj ehP sit IuzFoNk llymT?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUENZaiBlaFAgc2l0IEl1ekZvTmsgbGx5bVQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nCPLw ruC fvg VhmSbAx yylzG?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nPCYjay ehPyay itsay IuzFoNkyay llymTay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nPCYj 3hP 517 1uzF0Nk llym7?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n[VUk rj[ doy OixGpMl ;;u,Y?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0500\u0186\u2144\u027e \u01dd\u0265\u0500 s\u1d09\u0287 Inz\u2132oN\u029e ll\u028e\u026f\u22a5?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njYCP Phe tis kNoFzuI ?Tmyll\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - ehp\n2. ephemeral - pcyj\n3. quixotic - sit\n4. mellifluous - iuzfonk\n5. labyrinthine - llymt\n\nSentence:\nephemeral serendipity quixotic mellifluous llymT?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na4-c1-e5-e2 e1-c2-a4 d4-d2-e4 d2-a5-z-a2-e3-d3-a3 b3-b3-e5-c3-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] ehP [MASK_1] [MASK_0] llymT?\n\nMask_0:\n  ####    ##  ###   ### ##    ### ###    ## ##    ###  ##   ##  ###  \n   ##     ##   ##   ##  ##     ##  ##   ##   ##     ## ##   ##  ##   \n   ##     ##   ##      ##      ##       ##   ##    # ## #   ## ##    \n   ##     ##   ##     ##       ## ##    ##   ##    ## ##    ## ##    \n   ##     ##   ##    ##        ##       ##   ##    ##  ##   ## ###   \n   ##     ##   ##   ##  ##     ##       ##   ##    ##  ##   ##  ##   \n  ####     ## ##    # ####    ####       ## ##    ###  ##   ##  ###  \n                                                                     \n\n\nMask_1:\n ## ##      ####    #### ##  \n##   ##      ##     # ## ##  \n####         ##       ##     \n #####       ##       ##     \n    ###      ##       ##     \n##   ##      ##       ##     \n ## ##      ####     ####    \n                             \n\n\nMask_2:\n### ##     ## ##    ##  ##       ####  \n ##  ##   ##   ##   ##  ##        ##   \n ##  ##   ##        ##  ##        ##   \n ##  ##   ##         ## ##        ##   \n ## ##    ##          ##      ##  ##   \n ##       ##   ##     ##      ##  ##   \n####       ## ##      ##       ## #    \n                                       \n"}
{"sentence": "VJWc'M TGV XdY ayDezWKl, Toq'S Mu?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nVkpXYydNIFRHViBYZFkgYXlEZXpXS2wsIFRvcSdTIE11Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nIWJp'Z GTI KqL nlQrmJXy, Gbd'F Zh?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nVJWc'May TGVay XdYay ayDezWKlyay, oq'STay uMay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nVJWc'M 7GV XdY 4yD3zWKl, 70q'5 Mu?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nBKEv', YHB CfU suFrxEL;, Ypw'D ,i?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u039b\u017fM\u0254'W \u22a5\u2141\u039b Xp\u2144 \u0250\u028e\u15e1\u01ddzM\ua4d8l, \u22a5ob'S Wn?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nM'cWJV VGT YdX ,lKWzeDya S'qoT ?uM\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - toqs\n2. labyrinthine - xdy\n3. ephemeral - tgv\n4. mellifluous - aydezwkl\n5. serendipity - vjwcm\n\nSentence:\nserendipity ephemeral labyrinthine ayDezWKl, quixotic Mu?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-e2-c5-c1-'-c3 e4-b2-b5 d5-d1-e5 a1-e5-d1-e1-z-c5-a3-b3-, e4-e3-b4-'-d4 c3-a5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nVJWc'M TGV [MASK_0] [MASK_1], Toq'S Mu?\n\nMask_0:\n##  ##    ### ##    ##  ##   \n### ##     ##  ##   ##  ##   \n ###       ##  ##   ##  ##   \n  ###      ##  ##    ## ##   \n   ###     ##  ##     ##     \n##  ###    ##  ##     ##     \n##   ##   ### ##      ##     \n                             \n\n\nMask_1:\n  ##      ##  ##    ### ##    ### ###   ### ##    ##   ##   ##  ###   ####     \n   ##     ##  ##     ##  ##    ##  ##   ##  ##    ##   ##   ##  ##     ##      \n ## ##    ##  ##     ##  ##    ##          ##     ##   ##   ## ##      ##      \n ##  ##    ## ##     ##  ##    ## ##      ##      ## # ##   ## ##      ##      \n ## ###     ##       ##  ##    ##        ##       # ### #   ## ###     ##      \n ##  ##     ##       ##  ##    ##  ##   ##  ##     ## ##    ##  ##     ##  ##  \n###  ##     ##      ### ##    ### ###   # ####    ##   ##   ##  ###   ### ###  \n                                                                               \n\n\nMask_2:\n### ###      ####   ##   ##    ## ##    ##   ##  \n ##  ##       ##    ##   ##   ##   ##    ## ##   \n ##  ##       ##    ##   ##   ##        # ### #  \n ##  ##       ##    ## # ##   ##        ## # ##  \n ### ##   ##  ##    # ### #   ##        ##   ##  \n  ###     ##  ##     ## ##    ##   ##   ##   ##  \n   ##      ## #     ##   ##    ## ##    ##   ##  \n                                                 \n"}
{"sentence": "Vc pyjtUsGZ J FKgIM?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nVmMgcHlqdFVzR1ogSiBGS2dJTT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nIp clwgHfTM W SXtVZ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nVcay UsGZpyjtay Jay IMFKgay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nVc pyj7U5GZ J FKg1M?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nBv [ukyIdHX K GLhO,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u039b\u0254 d\u028e\u027e\u0287\u2229s\u2141Z \u017f \u2132\ua4d8\u0183IW?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ncV ZGsUtjyp J ?MIgKF\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - vc\n2. serendipity - pyjtusgz\n3. ephemeral - j\n4. labyrinthine - fkgim\n\nSentence:\nmellifluous serendipity ephemeral FKgIM?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-c1 a4-e5-e2-e4-a5-d4-b2-z e2 a2-a3-b2-d2-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nVc [MASK_0] [MASK_2] [MASK_1]?\n\nMask_0:\n### ##    ##  ##       ####   #### ##   ##  ###    ## ##     ## ##    ### ##   \n ##  ##   ##  ##        ##    # ## ##   ##   ##   ##   ##   ##   ##   ##  ##   \n ##  ##   ##  ##        ##      ##      ##   ##   ####      ##           ##    \n ##  ##    ## ##        ##      ##      ##   ##    #####    ##  ###     ##     \n ## ##      ##      ##  ##      ##      ##   ##       ###   ##   ##    ##      \n ##         ##      ##  ##      ##      ##   ##   ##   ##   ##   ##   ##  ##   \n####        ##       ## #      ####      ## ##     ## ##     ## ##    # ####   \n                                                                               \n\n\nMask_1:\n### ###   ##  ###    ## ##      ####    ##   ##  \n ##  ##   ##  ##    ##   ##      ##      ## ##   \n ##       ## ##     ##           ##     # ### #  \n ## ##    ## ##     ##  ###      ##     ## # ##  \n ##       ## ###    ##   ##      ##     ##   ##  \n ##       ##  ##    ##   ##      ##     ##   ##  \n####      ##  ###    ## ##      ####    ##   ##  \n                                                 \n\n\nMask_2:\n   ####  \n    ##   \n    ##   \n    ##   \n##  ##   \n##  ##   \n ## #    \n         \n"}
{"sentence": "dGM'V uHt sSNH WJm eNum?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZEdNJ1YgdUh0IHNTTkggV0ptIGVOdW0/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nqTZ'I hUg fFAU JWz rAhz?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ndGM'Vay uHtyay sSNHay WJmay eNumyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\ndGM'V uH7 55NH WJm 3Num?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nfH,'B iJy dDMJ EK, rMi,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\np\u2141W'\u039b nH\u0287 sSNH M\u017f\u026f \u01ddNn\u026f?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nV'MGd tHu HNSs mJW ?muNe\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - wjm\n2. quixotic - ssnh\n3. labyrinthine - enum\n4. ephemeral - dgmv\n5. serendipity - uht\n\nSentence:\nephemeral serendipity quixotic mellifluous eNum?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-b2-c3-'-b5 a5-c2-e4 d4-d4-d3-c2 c5-e2-c3 e1-d3-a5-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\ndGM'V uHt [MASK_2] [MASK_1] [MASK_0]?\n\nMask_0:\n### ###   ###  ##   ##  ###   ##   ##  \n ##  ##     ## ##   ##   ##    ## ##   \n ##        # ## #   ##   ##   # ### #  \n ## ##     ## ##    ##   ##   ## # ##  \n ##        ##  ##   ##   ##   ##   ##  \n ##  ##    ##  ##   ##   ##   ##   ##  \n### ###   ###  ##    ## ##    ##   ##  \n                                       \n\n\nMask_1:\n##   ##      ####   ##   ##  \n##   ##       ##     ## ##   \n##   ##       ##    # ### #  \n## # ##       ##    ## # ##  \n# ### #   ##  ##    ##   ##  \n ## ##    ##  ##    ##   ##  \n##   ##    ## #     ##   ##  \n                             \n\n\nMask_2:\n ## ##     ## ##    ###  ##   ###  ##  \n##   ##   ##   ##     ## ##    ##  ##  \n####      ####       # ## #    ##  ##  \n #####     #####     ## ##     ## ###  \n    ###       ###    ##  ##    ##  ##  \n##   ##   ##   ##    ##  ##    ##  ##  \n ## ##     ## ##    ###  ##   ###  ##  \n                                       \n"}
{"sentence": "weuQ'A gePe OZWCGNbR PTCEH?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nd2V1USdBIGdlUGUgT1pXQ0dOYlIgUFRDRUg/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\njrhD'N trCr BMJPTAoE CGPRU?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neuQ'Away ePegay OZWCGNbRyay EHPTCay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nw3uQ'4 g3P3 0ZWCGNbR P7C3H?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\neriW'S hr[r PXEVHMnT [YVRJ?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u028d\u01ddn\u10e2'\u2200 \u0183\u01dd\u0500\u01dd OZM\u0186\u2141Nq\u1d1a \u0500\u22a5\u0186\u018eH?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nA'Quew ePeg RbNGCWZO ?HECTP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - weuqa\n2. quixotic - gepe\n3. mellifluous - ozwcgnbr\n4. labyrinthine - ptceh\n\nSentence:\nephemeral quixotic mellifluous PTCEH?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e1-a5-b4-'-a1 b2-e1-a4-e1 e3-z-c5-c1-b2-d3-b1-c4 a4-e4-c1-e1-c2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nweuQ'A [MASK_0] [MASK_1] PTCEH?\n\nMask_0:\n ## ##    ### ###   ### ##    ### ###  \n##   ##    ##  ##    ##  ##    ##  ##  \n##         ##        ##  ##    ##      \n##  ###    ## ##     ##  ##    ## ##   \n##   ##    ##        ## ##     ##      \n##   ##    ##  ##    ##        ##  ##  \n ## ##    ### ###   ####      ### ###  \n                                       \n\n\nMask_1:\n ## ##    ### ##    ##   ##    ## ##     ## ##    ###  ##   ### ##    ### ##   \n##   ##   ##  ##    ##   ##   ##   ##   ##   ##     ## ##    ##  ##    ##  ##  \n##   ##      ##     ##   ##   ##        ##         # ## #    ##  ##    ##  ##  \n##   ##     ##      ## # ##   ##        ##  ###    ## ##     ## ##     ## ##   \n##   ##    ##       # ### #   ##        ##   ##    ##  ##    ##  ##    ## ##   \n##   ##   ##  ##     ## ##    ##   ##   ##   ##    ##  ##    ##  ##    ##  ##  \n ## ##    # ####    ##   ##    ## ##     ## ##    ###  ##   ### ##    #### ##  \n                                                                               \n\n\nMask_2:\n##   ##   ### ###   ##  ###    ## ##      ##     \n##   ##    ##  ##   ##   ##   ##   ##      ##    \n##   ##    ##       ##   ##   ##   ##    ## ##   \n## # ##    ## ##    ##   ##   ##   ##    ##  ##  \n# ### #    ##       ##   ##   ##   ##    ## ###  \n ## ##     ##  ##   ##   ##   ##  ##     ##  ##  \n##   ##   ### ###    ## ##     ##  ##   ###  ##  \n                                                 \n"}
{"sentence": "Gyz eo bdQ Bcpr TL?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nR3l6IGVvIGJkUSBCY3ByIFRMPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nTlm rb oqD Opce GY?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nGyzay eoyay bdQay Bcpray TLay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nGyz 30 bdQ Bcpr 7L?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nHux rp nfW Nv[t Y;?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2141\u028ez \u01ddo qp\u10e2 \u15fa\u0254d\u0279 \u22a5\u2142?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nzyG oe Qdb rpcB ?LT\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - tl\n2. labyrinthine - eo\n3. mellifluous - gyz\n4. quixotic - bdq\n5. serendipity - bcpr\n\nSentence:\nmellifluous labyrinthine quixotic serendipity TL?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-e5-z e1-e3 b1-d1-b4 b1-c1-a4-c4 e4-b3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] eo [MASK_1] Bcpr [MASK_0]?\n\nMask_0:\n#### ##   ####     \n# ## ##    ##      \n  ##       ##      \n  ##       ##      \n  ##       ##      \n  ##       ##  ##  \n ####     ### ###  \n                   \n\n\nMask_1:\n### ##    ### ##     ## ##   \n ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##   ##   ##  \n ## ##     ##  ##   ##   ##  \n ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##   ##  ##   \n### ##    ### ##     ##  ##  \n                             \n\n\nMask_2:\n ## ##    ##  ##    ### ##   \n##   ##   ##  ##    ##  ##   \n##        ##  ##       ##    \n##  ###    ## ##      ##     \n##   ##     ##       ##      \n##   ##     ##      ##  ##   \n ## ##      ##      # ####   \n                             \n"}
{"sentence": "zUBD Zpz yuFoO PfcElF?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nelVCRCBacHogeXVGb08gUGZjRWxGPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nmHOQ Mcm lhSbB CspRyS?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nUBDzay Zpzay uFoOyay ElFPfcay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nzUBD Zpz yuF00 Pfc3lF?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nxINF X[x uiGpP [gvR;G?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nz\u2229\u15fa\u15e1 Zdz \u028en\u2132oO \u0500\u025f\u0254\u018el\u2132?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nDBUz zpZ OoFuy ?FlEcfP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - zubd\n2. serendipity - zpz\n3. quixotic - yufoo\n4. ephemeral - pfcelf\n\nSentence:\nlabyrinthine serendipity quixotic PfcElF?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-a5-b1-d1 z-a4-z e5-a5-a2-e3-e3 a4-a2-c1-e1-b3-a2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] [MASK_1] PfcElF?\n\nMask_0:\n### ##    ### ##    ### ##   \n##  ##     ##  ##   ##  ##   \n   ##      ##  ##      ##    \n  ##       ##  ##     ##     \n ##        ## ##     ##      \n##  ##     ##       ##  ##   \n# ####    ####      # ####   \n                             \n\n\nMask_1:\n##  ##    ##  ###   ### ###    ## ##     ## ##   \n##  ##    ##   ##    ##  ##   ##   ##   ##   ##  \n##  ##    ##   ##    ##       ##   ##   ##   ##  \n ## ##    ##   ##    ## ##    ##   ##   ##   ##  \n  ##      ##   ##    ##       ##   ##   ##   ##  \n  ##      ##   ##    ##       ##   ##   ##   ##  \n  ##       ## ##    ####       ## ##     ## ##   \n                                                 \n\n\nMask_2:\n### ##    ##  ###   ### ##    ### ##   \n##  ##    ##   ##    ##  ##    ##  ##  \n   ##     ##   ##    ##  ##    ##  ##  \n  ##      ##   ##    ## ##     ##  ##  \n ##       ##   ##    ##  ##    ##  ##  \n##  ##    ##   ##    ##  ##    ##  ##  \n# ####     ## ##    ### ##    ### ##   \n                                       \n"}
{"sentence": "xTM nXC OOWN?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neFRNIG5YQyBPT1dOPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nkGZ aKP BBJA?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxTMay nXCay OOWNyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nx7M nXC 00WN?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncY, mCV PPEM?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nx\u22a5W uX\u0186 OOMN?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nMTx CXn ?NWOO\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - xtm\n2. quixotic - nxc\n3. mellifluous - oown\n\nSentence:\nserendipity quixotic OOWN?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-e4-c3 d3-d5-c1 e3-e3-c5-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxTM [MASK_0] OOWN?\n\nMask_0:\n###  ##   ##  ##     ## ##   \n  ## ##   ### ##    ##   ##  \n # ## #    ###      ##       \n ## ##      ###     ##       \n ##  ##      ###    ##       \n ##  ##   ##  ###   ##   ##  \n###  ##   ##   ##    ## ##   \n                             \n"}
{"sentence": "QUM SRq pEFyt NyH Taku mtz TjfJ?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUVVNIFNScSBwRUZ5dCBOeUggVGFrdSBtdHogVGpmSj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nDHZ FEd cRSlg AlU Gnxh zgm GwsW?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nUMQay SRqay EFytpay NyHay akuTay mtzay TjfJay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nQUM 5Rq p3Fy7 NyH 74ku m7z 7jfJ?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nWI, DTw [RGuy MuJ Ysli ,yx YkgK?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u10e2\u2229W S\u1d1ab d\u018e\u2132\u028e\u0287 N\u028eH \u22a5\u0250\u029en \u026f\u0287z \u22a5\u027e\u025f\u017f?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nMUQ qRS tyFEp HyN ukaT ztm ?JfjT\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - mtz\n2. ephemeral - nyh\n3. serendipity - tjfj\n4. mellifluous - pefyt\n5. labyrinthine - taku\n\nSentence:\nQUM SRq mellifluous ephemeral labyrinthine quixotic TjfJ?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb4-a5-c3 d4-c4-b4 a4-e1-a2-e5-e4 d3-e5-c2 e4-a1-a3-a5 c3-e4-z e4-e2-a2-e2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nQUM [MASK_2] pEFyt [MASK_0] Taku mtz [MASK_1]?\n\nMask_0:\n###  ##   ##  ##    ###  ##  \n  ## ##   ##  ##     ##  ##  \n # ## #   ##  ##     ##  ##  \n ## ##     ## ##     ## ###  \n ##  ##     ##       ##  ##  \n ##  ##     ##       ##  ##  \n###  ##     ##      ###  ##  \n                             \n\n\nMask_1:\n#### ##      ####   ### ###      ####  \n# ## ##       ##     ##  ##       ##   \n  ##          ##     ##           ##   \n  ##          ##     ## ##        ##   \n  ##      ##  ##     ##       ##  ##   \n  ##      ##  ##     ##       ##  ##   \n ####      ## #     ####       ## #    \n                                       \n\n\nMask_2:\n ## ##    ### ##     ## ##   \n##   ##    ##  ##   ##   ##  \n####       ##  ##   ##   ##  \n #####     ## ##    ##   ##  \n    ###    ## ##    ##   ##  \n##   ##    ##  ##   ##  ##   \n ## ##    #### ##    ##  ##  \n                             \n"}
{"sentence": "lfH tNy?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nbGZIIHROeT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nysU gAl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nlfHay tNyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nlfH 7Ny?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;gJ yMu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nl\u025fH \u0287N\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nHfl ?yNt\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - lfh\n2. ephemeral - tny\n\nSentence:\nmellifluous tNy?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-a2-c2 e4-d3-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nlfH [MASK_0]?\n\nMask_0:\n#### ##   ###  ##   ##  ##   \n# ## ##     ## ##   ##  ##   \n  ##       # ## #   ##  ##   \n  ##       ## ##     ## ##   \n  ##       ##  ##     ##     \n  ##       ##  ##     ##     \n ####     ###  ##     ##     \n                             \n"}
{"sentence": "VVDg kT BnRv x PLR mqfbuG?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nVlZEZyBrVCBCblJ2IHggUExSIG1xZmJ1Rz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nIIQt xG OaEi k CYE zdsohT?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nVVDgay kTay BnRvay xay PLRay uGmqfbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nVVDg k7 BnRv x PLR mqfbuG?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nBBFh lY NmTb c [;T ,wgniH?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u039b\u039b\u15e1\u0183 \u029e\u22a5 \u15fau\u1d1a\u028c x \u0500\u2142\u1d1a \u026fb\u025fqn\u2141?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ngDVV Tk vRnB x RLP ?Gubfqm\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - bnrv\n2. labyrinthine - plr\n3. quixotic - kt\n4. ephemeral - vvdg\n5. serendipity - x\n\nSentence:\nephemeral quixotic mellifluous serendipity labyrinthine mqfbuG?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-b5-d1-b2 a3-e4 b1-d3-c4-b5 d5 a4-b3-c4 c3-b4-a2-b1-a5-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nVVDg [MASK_1] [MASK_0] x [MASK_2] mqfbuG?\n\nMask_0:\n### ##    ###  ##   ### ##    ### ###  \n ##  ##     ## ##    ##  ##    ##  ##  \n ##  ##    # ## #    ##  ##    ##  ##  \n ## ##     ## ##     ## ##     ##  ##  \n ##  ##    ##  ##    ## ##     ### ##  \n ##  ##    ##  ##    ##  ##     ###    \n### ##    ###  ##   #### ##      ##    \n                                       \n\n\nMask_1:\n##  ###   #### ##  \n##  ##    # ## ##  \n## ##       ##     \n## ##       ##     \n## ###      ##     \n##  ##      ##     \n##  ###    ####    \n                   \n\n\nMask_2:\n### ##    ####      ### ##   \n ##  ##    ##        ##  ##  \n ##  ##    ##        ##  ##  \n ##  ##    ##        ## ##   \n ## ##     ##        ## ##   \n ##        ##  ##    ##  ##  \n####      ### ###   #### ##  \n                             \n"}
{"sentence": "qjRGm pM SrT ykzD?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncWpSR20gcE0gU3JUIHlrekQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ndwETz cZ FeG lxmQ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nqjRGmay pMay SrTay ykzDay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nqjRGm pM 5r7 ykzD?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nwkTH, [, DtY ulxF?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nb\u027e\u1d1a\u2141\u026f dW S\u0279\u22a5 \u028e\u029ez\u15e1?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nmGRjq Mp TrS ?Dzky\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - qjrgm\n2. serendipity - pm\n3. labyrinthine - srt\n4. ephemeral - ykzd\n\nSentence:\nquixotic serendipity labyrinthine ykzD?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb4-e2-c4-b2-c3 a4-c3 d4-c4-e4 e5-a3-z-d1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] [MASK_0] [MASK_1] ykzD?\n\nMask_0:\n### ##    ##   ##  \n ##  ##    ## ##   \n ##  ##   # ### #  \n ##  ##   ## # ##  \n ## ##    ##   ##  \n ##       ##   ##  \n####      ##   ##  \n                   \n\n\nMask_1:\n ## ##    ### ##    #### ##  \n##   ##    ##  ##   # ## ##  \n####       ##  ##     ##     \n #####     ## ##      ##     \n    ###    ## ##      ##     \n##   ##    ##  ##     ##     \n ## ##    #### ##    ####    \n                             \n\n\nMask_2:\n ## ##       ####   ### ##     ## ##    ##   ##  \n##   ##       ##     ##  ##   ##   ##    ## ##   \n##   ##       ##     ##  ##   ##        # ### #  \n##   ##       ##     ## ##    ##  ###   ## # ##  \n##   ##   ##  ##     ## ##    ##   ##   ##   ##  \n##  ##    ##  ##     ##  ##   ##   ##   ##   ##  \n ##  ##    ## #     #### ##    ## ##    ##   ##  \n                                                 \n"}
{"sentence": "zBD NQ rQlQ yN rgm ncw ZOT?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nekJEIE5RIHJRbFEgeU4gcmdtIG5jdyBaT1Q/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nmOQ AD eDyD lA etz apj MBG?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nzBDay NQay rQlQay yNay rgmay ncway OTZay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nzBD NQ rQlQ yN rgm ncw Z07?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nxNF MW tW;W uM th, mve XPY?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nz\u15fa\u15e1 N\u10e2 \u0279\u10e2l\u10e2 \u028eN \u0279\u0183\u026f u\u0254\u028d ZO\u22a5?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nDBz QN QlQr Ny mgr wcn ?TOZ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - rqlq\n2. ephemeral - rgm\n3. mellifluous - ncw\n4. labyrinthine - zbd\n5. quixotic - yn\n\nSentence:\nlabyrinthine NQ serendipity quixotic ephemeral mellifluous ZOT?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-b1-d1 d3-b4 c4-b4-b3-b4 e5-d3 c4-b2-c3 d3-c1-c5 z-e3-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nzBD NQ [MASK_2] [MASK_0] rgm ncw [MASK_1]?\n\nMask_0:\n##  ##    ###  ##  \n##  ##      ## ##  \n##  ##     # ## #  \n ## ##     ## ##   \n  ##       ##  ##  \n  ##       ##  ##  \n  ##      ###  ##  \n                   \n\n\nMask_1:\n### ##     ## ##    #### ##  \n##  ##    ##   ##   # ## ##  \n   ##     ##   ##     ##     \n  ##      ##   ##     ##     \n ##       ##   ##     ##     \n##  ##    ##   ##     ##     \n# ####     ## ##     ####    \n                             \n\n\nMask_2:\n### ##     ## ##    ####       ## ##   \n ##  ##   ##   ##    ##       ##   ##  \n ##  ##   ##   ##    ##       ##   ##  \n ## ##    ##   ##    ##       ##   ##  \n ## ##    ##   ##    ##       ##   ##  \n ##  ##   ##  ##     ##  ##   ##  ##   \n#### ##    ##  ##   ### ###    ##  ##  \n                                       \n"}
{"sentence": "xb eGL czMC S CpaIjg tmD?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neGIgZUdMIGN6TUMgUyBDcGFJamcgdG1EPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nko rTY pmZP F PcnVwt gzQ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nxbay eGLyay czMCay Say aIjgCpay tmDay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nxb 3GL czMC 5 Cp41jg 7mD?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncn rH; vx,V D V[sOkh y,F?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nxq \u01dd\u2141\u2142 \u0254zW\u0186 S \u0186d\u0250I\u027e\u0183 \u0287\u026f\u15e1?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nbx LGe CMzc S gjIapC ?Dmt\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - s\n2. ephemeral - xb\n3. mellifluous - egl\n4. quixotic - cpaijg\n5. serendipity - czmc\n\nSentence:\nephemeral mellifluous serendipity labyrinthine quixotic tmD?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-b1 e1-b2-b3 c1-z-c3-c1 d4 c1-a4-a1-d2-e2-b2 e4-c3-d1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxb eGL [MASK_2] [MASK_0] CpaIjg [MASK_1]?\n\nMask_0:\n ## ##   \n##   ##  \n####     \n #####   \n    ###  \n##   ##  \n ## ##   \n         \n\n\nMask_1:\n#### ##   ##   ##   ### ##   \n# ## ##    ## ##     ##  ##  \n  ##      # ### #    ##  ##  \n  ##      ## # ##    ##  ##  \n  ##      ##   ##    ##  ##  \n  ##      ##   ##    ##  ##  \n ####     ##   ##   ### ##   \n                             \n\n\nMask_2:\n ## ##    ### ##    ##   ##    ## ##   \n##   ##   ##  ##     ## ##    ##   ##  \n##           ##     # ### #   ##       \n##          ##      ## # ##   ##       \n##         ##       ##   ##   ##       \n##   ##   ##  ##    ##   ##   ##   ##  \n ## ##    # ####    ##   ##    ## ##   \n                                       \n"}
{"sentence": "xa xki KYBHdtm?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neGEgeGtpIEtZQkhkdG0/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nkn kxv XLOUqgz?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naxay ixkay KYBHdtmay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nx4 xk1 KYBHd7m?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncs clo LUNJfy,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nx\u0250 x\u029e\u1d09 \ua4d8\u2144\u15faHp\u0287\u026f?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nax ikx ?mtdHBYK\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - xa\n2. quixotic - xki\n3. mellifluous - kybhdtm\n\nSentence:\nserendipity quixotic KYBHdtm?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-a1 d5-a3-d2 a3-e5-b1-c2-d1-e4-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nxa xki [MASK_0]?\n\nMask_0:\n##  ###   ##  ##    ### ##    ###  ##   ### ##    #### ##   ##   ##  \n##  ##    ##  ##     ##  ##    ##  ##    ##  ##   # ## ##    ## ##   \n## ##     ##  ##     ##  ##    ##  ##    ##  ##     ##      # ### #  \n## ##      ## ##     ## ##     ## ###    ##  ##     ##      ## # ##  \n## ###      ##       ##  ##    ##  ##    ##  ##     ##      ##   ##  \n##  ##      ##       ##  ##    ##  ##    ##  ##     ##      ##   ##  \n##  ###     ##      ### ##    ###  ##   ### ##     ####     ##   ##  \n                                                                     \n"}
{"sentence": "AzJ poKZ LDYb?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nQXpKIHBvS1ogTERZYj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNmW cbXM YQLo?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAzJyay oKZpay LDYbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4zJ p0KZ LDYb?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nSxK [pLX ;FUn?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200z\u017f do\ua4d8Z \u2142\u15e1\u2144q?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nJzA ZKop ?bYDL\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - azj\n2. serendipity - pokz\n3. ephemeral - ldyb\n\nSentence:\nquixotic serendipity LDYb?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-z-e2 a4-e3-a3-z b3-d1-e5-b1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAzJ [MASK_0] LDYb?\n\nMask_0:\n### ##     ## ##    ##  ###   ### ##   \n ##  ##   ##   ##   ##  ##    ##  ##   \n ##  ##   ##   ##   ## ##        ##    \n ##  ##   ##   ##   ## ##       ##     \n ## ##    ##   ##   ## ###     ##      \n ##       ##   ##   ##  ##    ##  ##   \n####       ## ##    ##  ###   # ####   \n                                       \n"}
{"sentence": "QL efB VWQm jd F HMINF?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUUwgZWZCIFZXUW0gamQgRiBITUlORj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nDY rsO IJDz wq S UZVAS?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nQLay efByay VWQmay jday Fay INFHMay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nQL 3fB VWQm jd F HM1NF?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nW; rgN BEW, kf G J,OMG?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u10e2\u2142 \u01dd\u025f\u15fa \u039bM\u10e2\u026f \u027ep \u2132 HWIN\u2132?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nLQ Bfe mQWV dj F ?FNIMH\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - ql\n2. ephemeral - hminf\n3. mellifluous - jd\n4. quixotic - vwqm\n5. serendipity - efb\n\nSentence:\nlabyrinthine serendipity quixotic mellifluous F HMINF?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb4-b3 e1-a2-b1 b5-c5-b4-c3 e2-d1 a2 c2-c3-d2-d3-a2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] efB VWQm [MASK_1] F [MASK_2]?\n\nMask_0:\n ## ##    ####     \n##   ##    ##      \n##   ##    ##      \n##   ##    ##      \n##   ##    ##      \n##  ##     ##  ##  \n ##  ##   ### ###  \n                   \n\n\nMask_1:\n   ####   ### ##   \n    ##     ##  ##  \n    ##     ##  ##  \n    ##     ##  ##  \n##  ##     ##  ##  \n##  ##     ##  ##  \n ## #     ### ##   \n                   \n\n\nMask_2:\n###  ##   ##   ##     ####    ###  ##   ### ###  \n ##  ##    ## ##       ##       ## ##    ##  ##  \n ##  ##   # ### #      ##      # ## #    ##      \n ## ###   ## # ##      ##      ## ##     ## ##   \n ##  ##   ##   ##      ##      ##  ##    ##      \n ##  ##   ##   ##      ##      ##  ##    ##      \n###  ##   ##   ##     ####    ###  ##   ####     \n                                                 \n"}
{"sentence": "ER ZRv jrjws tOOa Ze Qel GgR?", "long": false, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRVIgWlJ2IGpyandzIHRPT2EgWmUgUWVsIEdnUj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nRE MEi wewjf gBBn Mr Dry TtE?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nERyay ZRvay jrjwsay OOatay eZay elQay GgRay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3R ZRv jrjw5 7004 Z3 Q3l GgR?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nRT XTb ktked yPPs Xr Wr; HhT?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u018e\u1d1a Z\u1d1a\u028c \u027e\u0279\u027e\u028ds \u0287OO\u0250 Z\u01dd \u10e2\u01ddl \u2141\u0183\u1d1a?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nRE vRZ swjrj aOOt eZ leQ ?RgG\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - ggr\n2. ephemeral - ze\n3. serendipity - qel\n4. quixotic - jrjws\n5. labyrinthine - er\n\nSentence:\nlabyrinthine ZRv quixotic tOOa ephemeral serendipity GgR?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-c4 z-c4-b5 e2-c4-e2-c5-d4 e4-e3-e3-a1 z-e1 b4-e1-b3 b2-b2-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nER ZRv jrjws [MASK_0] Ze [MASK_2] [MASK_1]?\n\nMask_0:\n#### ##    ## ##     ## ##      ##     \n# ## ##   ##   ##   ##   ##      ##    \n  ##      ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ##  ##  \n  ##      ##   ##   ##   ##    ## ###  \n  ##      ##   ##   ##   ##    ##  ##  \n ####      ## ##     ## ##    ###  ##  \n                                       \n\n\nMask_1:\n ## ##     ## ##    ### ##   \n##   ##   ##   ##    ##  ##  \n##        ##         ##  ##  \n##  ###   ##  ###    ## ##   \n##   ##   ##   ##    ## ##   \n##   ##   ##   ##    ##  ##  \n ## ##     ## ##    #### ##  \n                             \n\n\nMask_2:\n ## ##    ### ###   ####     \n##   ##    ##  ##    ##      \n##   ##    ##        ##      \n##   ##    ## ##     ##      \n##   ##    ##        ##      \n##  ##     ##  ##    ##  ##  \n ##  ##   ### ###   ### ###  \n                             \n"}
{"sentence": "If you could buy anything you wanted, what would you buy?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSWYgeW91IGNvdWxkIGJ1eSBhbnl0aGluZyB5b3Ugd2FudGVkLCB3aGF0IHdvdWxkIHlvdSBidXk/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVs lbh pbhyq ohl nalguvat lbh jnagrq, jung jbhyq lbh ohl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIfyay ouyay ouldcay uybay anythingyay ouyay antedway, atwhay ouldway ouyay uybay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1f y0u c0uld buy 4ny7h1ng y0u w4n73d, wh47 w0uld y0u buy?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOg upi vpi;f niu smuyjomh upi esmyrf, ejsy epi;f upi niu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u025f \u028eon \u0254onlp qn\u028e \u0250u\u028e\u0287\u0265\u1d09u\u0183 \u028eon \u028d\u0250u\u0287\u01ddp, \u028d\u0265\u0250\u0287 \u028donlp \u028eon qn\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nfI uoy dluoc yub gnihtyna uoy ,detnaw tahw dluow uoy ?yub\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - you\n2. quixotic - buy\n3. mellifluous - would\n4. ephemeral - could\n\nSentence:\nIf labyrinthine ephemeral quixotic anything labyrinthine wanted, what mellifluous labyrinthine quixotic?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-a2 e5-e3-a5 c1-e3-a5-b3-d1 b1-a5-e5 a1-d3-e5-e4-c2-d2-d3-b2 e5-e3-a5 c5-a1-d3-e4-e1-d1-, c5-c2-a1-e4 c5-e3-a5-b3-d1 e5-e3-a5 b1-a5-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIf you could [MASK_0] [MASK_2] you [MASK_1], what would you [MASK_0]?\n\nMask_0:\n### ##    ##  ###   ##  ##   \n ##  ##   ##   ##   ##  ##   \n ##  ##   ##   ##   ##  ##   \n ## ##    ##   ##    ## ##   \n ##  ##   ##   ##     ##     \n ##  ##   ##   ##     ##     \n### ##     ## ##      ##     \n                             \n\n\nMask_1:\n##   ##     ##      ###  ##   #### ##   ### ###   ### ##   \n##   ##      ##       ## ##   # ## ##    ##  ##    ##  ##  \n##   ##    ## ##     # ## #     ##       ##        ##  ##  \n## # ##    ##  ##    ## ##      ##       ## ##     ##  ##  \n# ### #    ## ###    ##  ##     ##       ##        ##  ##  \n ## ##     ##  ##    ##  ##     ##       ##  ##    ##  ##  \n##   ##   ###  ##   ###  ##    ####     ### ###   ### ##   \n                                                           \n\n\nMask_2:\n  ##      ###  ##   ##  ##    #### ##   ###  ##     ####    ###  ##    ## ##   \n   ##       ## ##   ##  ##    # ## ##    ##  ##      ##       ## ##   ##   ##  \n ## ##     # ## #   ##  ##      ##       ##  ##      ##      # ## #   ##       \n ##  ##    ## ##     ## ##      ##       ## ###      ##      ## ##    ##  ###  \n ## ###    ##  ##     ##        ##       ##  ##      ##      ##  ##   ##   ##  \n ##  ##    ##  ##     ##        ##       ##  ##      ##      ##  ##   ##   ##  \n###  ##   ###  ##     ##       ####     ###  ##     ####    ###  ##    ## ##   \n                                                                               \n"}
{"sentence": "Do you consider yourself a liberal or a conservative?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRG8geW91IGNvbnNpZGVyIHlvdXJzZWxmIGEgbGliZXJhbCBvciBhIGNvbnNlcnZhdGl2ZT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQb lbh pbafvqre lbhefrys n yvoreny be n pbafreingvir?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noDay ouyay onsidercay ourselfyay ayay iberallay oryay ayay onservativecay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD0 y0u c0n51d3r y0ur53lf 4 l1b3r4l 0r 4 c0n53rv471v3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFp upi vpmdofrt upitdr;g s ;onrts; pt s vpmdrtbsyobr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1o \u028eon \u0254ous\u1d09p\u01dd\u0279 \u028eon\u0279s\u01ddl\u025f \u0250 l\u1d09q\u01dd\u0279\u0250l o\u0279 \u0250 \u0254ous\u01dd\u0279\u028c\u0250\u0287\u1d09\u028c\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\noD uoy redisnoc flesruoy a larebil ro a ?evitavresnoc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - consider\n2. labyrinthine - or\n3. serendipity - you\n4. quixotic - do\n5. mellifluous - conservative\n\nSentence:\nquixotic serendipity ephemeral yourself a liberal labyrinthine a conservative?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-e3 e5-e3-a5 c1-e3-d3-d4-d2-d1-e1-c4 e5-e3-a5-c4-d4-e1-b3-a2 a1 b3-d2-b1-e1-c4-a1-b3 e3-c4 a1 c1-e3-d3-d4-e1-c4-b5-a1-e4-d2-b5-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDo you consider yourself [MASK_0] liberal or [MASK_0] [MASK_2]?\n\nMask_0:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n ## ##     ## ##    ###  ##    ## ##    ### ###   ### ##    ### ###     ##      #### ##     ####    ### ###   ### ###  \n##   ##   ##   ##     ## ##   ##   ##    ##  ##    ##  ##    ##  ##      ##     # ## ##      ##      ##  ##    ##  ##  \n##        ##   ##    # ## #   ####       ##        ##  ##    ##  ##    ## ##      ##         ##      ##  ##    ##      \n##        ##   ##    ## ##     #####     ## ##     ## ##     ##  ##    ##  ##     ##         ##      ##  ##    ## ##   \n##        ##   ##    ##  ##       ###    ##        ## ##     ### ##    ## ###     ##         ##      ### ##    ##      \n##   ##   ##   ##    ##  ##   ##   ##    ##  ##    ##  ##     ###      ##  ##     ##         ##       ###      ##  ##  \n ## ##     ## ##    ###  ##    ## ##    ### ###   #### ##      ##     ###  ##    ####       ####       ##     ### ###  \n                                                                                                                       \n"}
{"sentence": "Did you hear about the new animal discovered in Ecuador?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRGlkIHlvdSBoZWFyIGFib3V0IHRoZSBuZXcgYW5pbWFsIGRpc2NvdmVyZWQgaW4gRWN1YWRvcj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQvq lbh urne nobhg gur arj navzny qvfpbirerq va Rphnqbe?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nidDay ouyay earhay aboutyay ethay ewnay animalyay iscoveredday inyay Ecuadoryay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD1d y0u h34r 4b0u7 7h3 n3w 4n1m4l d15c0v3r3d 1n 3cu4d0r?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFof upi jrst snpiy yjr mre smo,s; fodvpbrtrf om Rvisfpt?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1\u1d09p \u028eon \u0265\u01dd\u0250\u0279 \u0250qon\u0287 \u0287\u0265\u01dd u\u01dd\u028d \u0250u\u1d09\u026f\u0250l p\u1d09s\u0254o\u028c\u01dd\u0279\u01ddp \u1d09u \u018e\u0254n\u0250po\u0279?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ndiD uoy raeh tuoba eht wen lamina derevocsid ni ?rodaucE\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - about\n2. ephemeral - did\n3. labyrinthine - new\n4. serendipity - hear\n5. quixotic - animal\n\nSentence:\nephemeral you serendipity mellifluous the labyrinthine quixotic discovered in Ecuador?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-d2-d1 e5-e3-a5 c2-e1-a1-c4 a1-b1-e3-a5-e4 e4-c2-e1 d3-e1-c5 a1-d3-d2-c3-a1-b3 d1-d2-d4-c1-e3-b5-e1-c4-e1-d1 d2-d3 e1-c1-a5-a1-d1-e3-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDid you [MASK_0] [MASK_1] the new animal discovered in [MASK_2]?\n\nMask_0:\n###  ##   ### ###     ##      ### ##   \n ##  ##    ##  ##      ##      ##  ##  \n ##  ##    ##        ## ##     ##  ##  \n ## ###    ## ##     ##  ##    ## ##   \n ##  ##    ##        ## ###    ## ##   \n ##  ##    ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   ###  ##   #### ##  \n                                       \n\n\nMask_1:\n  ##      ### ##     ## ##    ##  ###   #### ##  \n   ##      ##  ##   ##   ##   ##   ##   # ## ##  \n ## ##     ##  ##   ##   ##   ##   ##     ##     \n ##  ##    ## ##    ##   ##   ##   ##     ##     \n ## ###    ##  ##   ##   ##   ##   ##     ##     \n ##  ##    ##  ##   ##   ##   ##   ##     ##     \n###  ##   ### ##     ## ##     ## ##     ####    \n                                                 \n\n\nMask_2:\n### ###    ## ##    ##  ###     ##      ### ##     ## ##    ### ##   \n ##  ##   ##   ##   ##   ##      ##      ##  ##   ##   ##    ##  ##  \n ##       ##        ##   ##    ## ##     ##  ##   ##   ##    ##  ##  \n ## ##    ##        ##   ##    ##  ##    ##  ##   ##   ##    ## ##   \n ##       ##        ##   ##    ## ###    ##  ##   ##   ##    ## ##   \n ##  ##   ##   ##   ##   ##    ##  ##    ##  ##   ##   ##    ##  ##  \n### ###    ## ##     ## ##    ###  ##   ### ##     ## ##    #### ##  \n                                                                     \n"}
{"sentence": "Why do you keep asking such obvious questions?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2h5IGRvIHlvdSBrZWVwIGFza2luZyBzdWNoIG9idmlvdXMgcXVlc3Rpb25zPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJul qb lbh xrrc nfxvat fhpu boivbhf dhrfgvbaf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nWhyay oday ouyay eepkay askingyay uchsay obviousyay uestionsqay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWhy d0 y0u k33p 45k1ng 5uch 0bv10u5 qu35710n5?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEju fp upi lrr[ sdlomh divj pnbopid wirdyopmd?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u028e po \u028eon \u029e\u01dd\u01ddd \u0250s\u029e\u1d09u\u0183 sn\u0254\u0265 oq\u028c\u1d09ons bn\u01dds\u0287\u1d09ous?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyhW od uoy peek gniksa hcus suoivbo ?snoitseuq\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - do\n2. quixotic - you\n3. ephemeral - such\n4. serendipity - questions\n5. mellifluous - asking\n\nSentence:\nWhy labyrinthine quixotic keep mellifluous ephemeral obvious questions?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e5 d1-e3 e5-e3-a5 a3-e1-e1-a4 a1-d4-a3-d2-d3-b2 d4-a5-c1-c2 e3-b1-b5-d2-e3-a5-d4 b4-a5-e1-d4-e4-d2-e3-d3-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] do you keep asking [MASK_2] [MASK_1] questions?\n\nMask_0:\n##   ##   ###  ##   ##  ##   \n##   ##    ##  ##   ##  ##   \n##   ##    ##  ##   ##  ##   \n## # ##    ## ###    ## ##   \n# ### #    ##  ##     ##     \n ## ##     ##  ##     ##     \n##   ##   ###  ##     ##     \n                             \n\n\nMask_1:\n ## ##    ### ##    ### ###     ####     ## ##    ##  ###    ## ##   \n##   ##    ##  ##    ##  ##      ##     ##   ##   ##   ##   ##   ##  \n##   ##    ##  ##    ##  ##      ##     ##   ##   ##   ##   ####     \n##   ##    ## ##     ##  ##      ##     ##   ##   ##   ##    #####   \n##   ##    ##  ##    ### ##      ##     ##   ##   ##   ##       ###  \n##   ##    ##  ##     ###        ##     ##   ##   ##   ##   ##   ##  \n ## ##    ### ##       ##       ####     ## ##     ## ##     ## ##   \n                                                                     \n\n\nMask_2:\n ## ##    ##  ###    ## ##    ###  ##  \n##   ##   ##   ##   ##   ##    ##  ##  \n####      ##   ##   ##         ##  ##  \n #####    ##   ##   ##         ## ###  \n    ###   ##   ##   ##         ##  ##  \n##   ##   ##   ##   ##   ##    ##  ##  \n ## ##     ## ##     ## ##    ###  ##  \n                                       \n"}
{"sentence": "Are you seriously going to let him talk about me that way?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSBzZXJpb3VzbHkgZ29pbmcgdG8gbGV0IGhpbSB0YWxrIGFib3V0IG1lIHRoYXQgd2F5Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh frevbhfyl tbvat gb yrg uvz gnyx nobhg zr gung jnl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay eriouslysay oinggay otay etlay imhay alktay aboutyay emay atthay ayway?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u 53r10u5ly g01ng 70 l37 h1m 74lk 4b0u7 m3 7h47 w4y?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi drtopid;u hpomh yp ;ry jo, ys;l snpiy ,r yjsy esu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon s\u01dd\u0279\u1d09onsl\u028e \u0183o\u1d09u\u0183 \u0287o l\u01dd\u0287 \u0265\u1d09\u026f \u0287\u0250l\u029e \u0250qon\u0287 \u026f\u01dd \u0287\u0265\u0250\u0287 \u028d\u0250\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy ylsuoires gniog ot tel mih klat tuoba em taht ?yaw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - talk\n2. labyrinthine - me\n3. quixotic - that\n4. mellifluous - seriously\n5. serendipity - about\n\nSentence:\nAre you mellifluous going to let him ephemeral serendipity labyrinthine quixotic way?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 d4-e1-c4-d2-e3-a5-d4-b3-e5 b2-e3-d2-d3-b2 e4-e3 b3-e1-e4 c2-d2-c3 e4-a1-b3-a3 a1-b1-e3-a5-e4 c3-e1 e4-c2-a1-e4 c5-a1-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAre you [MASK_0] going to let him talk about me [MASK_2] [MASK_1]?\n\nMask_0:\n ## ##    ### ###   ### ##      ####     ## ##    ##  ###    ## ##    ####      ##  ##   \n##   ##    ##  ##    ##  ##      ##     ##   ##   ##   ##   ##   ##    ##       ##  ##   \n####       ##        ##  ##      ##     ##   ##   ##   ##   ####       ##       ##  ##   \n #####     ## ##     ## ##       ##     ##   ##   ##   ##    #####     ##        ## ##   \n    ###    ##        ## ##       ##     ##   ##   ##   ##       ###    ##         ##     \n##   ##    ##  ##    ##  ##      ##     ##   ##   ##   ##   ##   ##    ##  ##     ##     \n ## ##    ### ###   #### ##     ####     ## ##     ## ##     ## ##    ### ###     ##     \n                                                                                         \n\n\nMask_1:\n##   ##     ##      ##  ##   \n##   ##      ##     ##  ##   \n##   ##    ## ##    ##  ##   \n## # ##    ##  ##    ## ##   \n# ### #    ## ###     ##     \n ## ##     ##  ##     ##     \n##   ##   ###  ##     ##     \n                             \n\n\nMask_2:\n#### ##   ###  ##     ##      #### ##  \n# ## ##    ##  ##      ##     # ## ##  \n  ##       ##  ##    ## ##      ##     \n  ##       ## ###    ##  ##     ##     \n  ##       ##  ##    ## ###     ##     \n  ##       ##  ##    ##  ##     ##     \n ####     ###  ##   ###  ##    ####    \n                                       \n"}
{"sentence": "How long did you think you could get away with this?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGxvbmcgZGlkIHlvdSB0aGluayB5b3UgY291bGQgZ2V0IGF3YXkgd2l0aCB0aGlzPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj ybat qvq lbh guvax lbh pbhyq trg njnl jvgu guvf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay onglay idday ouyay inkthay ouyay ouldcay etgay awayyay ithway isthay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w l0ng d1d y0u 7h1nk y0u c0uld g37 4w4y w17h 7h15?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe ;pmh fof upi yjoml upi vpi;f hry sesu eoyj yjod?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d lou\u0183 p\u1d09p \u028eon \u0287\u0265\u1d09u\u029e \u028eon \u0254onlp \u0183\u01dd\u0287 \u0250\u028d\u0250\u028e \u028d\u1d09\u0287\u0265 \u0287\u0265\u1d09s?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH gnol did uoy kniht uoy dluoc teg yawa htiw ?siht\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - with\n2. mellifluous - could\n3. serendipity - get\n4. labyrinthine - did\n5. quixotic - you\n\nSentence:\nHow long labyrinthine quixotic think quixotic mellifluous serendipity away ephemeral this?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 b3-e3-d3-b2 d1-d2-d1 e5-e3-a5 e4-c2-d2-d3-a3 e5-e3-a5 c1-e3-a5-b3-d1 b2-e1-e4 a1-c5-a1-e5 c5-d2-e4-c2 e4-c2-d2-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHow [MASK_0] did [MASK_2] think [MASK_2] could get away with [MASK_1]?\n\nMask_0:\n####       ## ##    ###  ##    ## ##   \n ##       ##   ##     ## ##   ##   ##  \n ##       ##   ##    # ## #   ##       \n ##       ##   ##    ## ##    ##  ###  \n ##       ##   ##    ##  ##   ##   ##  \n ##  ##   ##   ##    ##  ##   ##   ##  \n### ###    ## ##    ###  ##    ## ##   \n                                       \n\n\nMask_1:\n#### ##   ###  ##     ####     ## ##   \n# ## ##    ##  ##      ##     ##   ##  \n  ##       ##  ##      ##     ####     \n  ##       ## ###      ##      #####   \n  ##       ##  ##      ##         ###  \n  ##       ##  ##      ##     ##   ##  \n ####     ###  ##     ####     ## ##   \n                                       \n\n\nMask_2:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n"}
{"sentence": "How can she afford a multi-million dollar house?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGNhbiBzaGUgYWZmb3JkIGEgbXVsdGktbWlsbGlvbiBkb2xsYXIgaG91c2U/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj pna fur nssbeq n zhygv-zvyyvba qbyyne ubhfr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay ancay eshay affordyay ayay ulti-millionmay ollarday ousehay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w c4n 5h3 4ff0rd 4 mul71-m1ll10n d0ll4r h0u53?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe vsm djr sggptf s ,i;yo-,o;;opm fp;;st jpidr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d \u0254\u0250u s\u0265\u01dd \u0250\u025f\u025fo\u0279p \u0250 \u026fnl\u0287\u1d09-\u026f\u1d09ll\u1d09ou poll\u0250\u0279 \u0265ons\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH nac ehs droffa a noillim-itlum rallod ?esuoh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - how\n2. mellifluous - house\n3. serendipity - afford\n4. quixotic - she\n5. labyrinthine - multimillion\n\nSentence:\nephemeral can quixotic serendipity a labyrinthine dollar house?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 c1-a1-d3 d4-c2-e1 a1-a2-a2-e3-c4-d1 a1 c3-a5-b3-e4-d2-c3-d2-b3-b3-d2-e3-d3 d1-e3-b3-b3-a1-c4 c2-e3-a5-d4-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHow [MASK_1] [MASK_2] afford [MASK_0] multi-million dollar house?\n\nMask_0:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_1:\n ## ##      ##      ###  ##  \n##   ##      ##       ## ##  \n##         ## ##     # ## #  \n##         ##  ##    ## ##   \n##         ## ###    ##  ##  \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ###  ##  \n                             \n\n\nMask_2:\n ## ##    ###  ##   ### ###  \n##   ##    ##  ##    ##  ##  \n####       ##  ##    ##      \n #####     ## ###    ## ##   \n    ###    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n"}
{"sentence": "Can I lick the bottom of the ice cream container?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQ2FuIEkgbGljayB0aGUgYm90dG9tIG9mIHRoZSBpY2UgY3JlYW0gY29udGFpbmVyPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nPna V yvpx gur obggbz bs gur vpr pernz pbagnvare?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nanCay Iyay icklay ethay ottombay ofyay ethay iceyay eamcray ontainercay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nC4n 1 l1ck 7h3 b0770m 0f 7h3 1c3 cr34m c0n741n3r?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nVsm O ;ovl yjr npyyp, pg yjr ovr vtrs, vpmysomrt?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0186\u0250u I l\u1d09\u0254\u029e \u0287\u0265\u01dd qo\u0287\u0287o\u026f o\u025f \u0287\u0265\u01dd \u1d09\u0254\u01dd \u0254\u0279\u01dd\u0250\u026f \u0254ou\u0287\u0250\u1d09u\u01dd\u0279?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nnaC I kcil eht mottob fo eht eci maerc ?reniatnoc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - cream\n2. labyrinthine - ice\n3. quixotic - i\n4. mellifluous - lick\n5. serendipity - can\n\nSentence:\nserendipity quixotic mellifluous the bottom of the labyrinthine ephemeral container?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc1-a1-d3 d2 b3-d2-c1-a3 e4-c2-e1 b1-e3-e4-e4-e3-c3 e3-a2 e4-c2-e1 d2-c1-e1 c1-c4-e1-a1-c3 c1-e3-d3-e4-a1-d2-d3-e1-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] I lick [MASK_2] [MASK_0] of [MASK_2] ice cream container?\n\nMask_0:\n### ##     ## ##    #### ##   #### ##    ## ##    ##   ##  \n ##  ##   ##   ##   # ## ##   # ## ##   ##   ##    ## ##   \n ##  ##   ##   ##     ##        ##      ##   ##   # ### #  \n ## ##    ##   ##     ##        ##      ##   ##   ## # ##  \n ##  ##   ##   ##     ##        ##      ##   ##   ##   ##  \n ##  ##   ##   ##     ##        ##      ##   ##   ##   ##  \n### ##     ## ##     ####      ####      ## ##    ##   ##  \n                                                           \n\n\nMask_1:\n ## ##      ##      ###  ##  \n##   ##      ##       ## ##  \n##         ## ##     # ## #  \n##         ##  ##    ## ##   \n##         ## ###    ##  ##  \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ###  ##  \n                             \n\n\nMask_2:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n"}
{"sentence": "What would you change about yourself if you could change one thing?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCB3b3VsZCB5b3UgY2hhbmdlIGFib3V0IHlvdXJzZWxmIGlmIHlvdSBjb3VsZCBjaGFuZ2Ugb25lIHRoaW5nPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung jbhyq lbh punatr nobhg lbhefrys vs lbh pbhyq punatr bar guvat?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay ouldway ouyay angechay aboutyay ourselfyay ifyay ouyay ouldcay angechay oneyay ingthay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 w0uld y0u ch4ng3 4b0u7 y0ur53lf 1f y0u c0uld ch4ng3 0n3 7h1ng?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy epi;f upi vjsmhr snpiy upitdr;g og upi vpi;f vjsmhr pmr yjomh?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u028donlp \u028eon \u0254\u0265\u0250u\u0183\u01dd \u0250qon\u0287 \u028eon\u0279s\u01ddl\u025f \u1d09\u025f \u028eon \u0254onlp \u0254\u0265\u0250u\u0183\u01dd ou\u01dd \u0287\u0265\u1d09u\u0183?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW dluow uoy egnahc tuoba flesruoy fi uoy dluoc egnahc eno ?gniht\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - change\n2. mellifluous - one\n3. quixotic - what\n4. labyrinthine - about\n5. serendipity - thing\n\nSentence:\nquixotic would you ephemeral labyrinthine yourself if you could ephemeral mellifluous thing?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 c5-e3-a5-b3-d1 e5-e3-a5 c1-c2-a1-d3-b2-e1 a1-b1-e3-a5-e4 e5-e3-a5-c4-d4-e1-b3-a2 d2-a2 e5-e3-a5 c1-e3-a5-b3-d1 c1-c2-a1-d3-b2-e1 e3-d3-e1 e4-c2-d2-d3-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat would you change about yourself [MASK_1] you could change [MASK_2] [MASK_0]?\n\nMask_0:\n#### ##   ###  ##     ####    ###  ##    ## ##   \n# ## ##    ##  ##      ##       ## ##   ##   ##  \n  ##       ##  ##      ##      # ## #   ##       \n  ##       ## ###      ##      ## ##    ##  ###  \n  ##       ##  ##      ##      ##  ##   ##   ##  \n  ##       ##  ##      ##      ##  ##   ##   ##  \n ####     ###  ##     ####    ###  ##    ## ##   \n                                                 \n\n\nMask_1:\n  ####    ### ###  \n   ##      ##  ##  \n   ##      ##      \n   ##      ## ##   \n   ##      ##      \n   ##      ##      \n  ####    ####     \n                   \n\n\nMask_2:\n ## ##    ###  ##   ### ###  \n##   ##     ## ##    ##  ##  \n##   ##    # ## #    ##      \n##   ##    ## ##     ## ##   \n##   ##    ##  ##    ##      \n##   ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###  \n                             \n"}
{"sentence": "Who's calling on the phone this late at night?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hvJ3MgY2FsbGluZyBvbiB0aGUgcGhvbmUgdGhpcyBsYXRlIGF0IG5pZ2h0Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJub'f pnyyvat ba gur cubar guvf yngr ng avtug?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\no'sWhay allingcay onyay ethay onephay isthay atelay atyay ightnay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh0'5 c4ll1ng 0n 7h3 ph0n3 7h15 l473 47 n1gh7?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjp'd vs;;omh pm yjr [jpmr yjod ;syr sy mohjy?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265o's \u0254\u0250ll\u1d09u\u0183 ou \u0287\u0265\u01dd d\u0265ou\u01dd \u0287\u0265\u1d09s l\u0250\u0287\u01dd \u0250\u0287 u\u1d09\u0183\u0265\u0287?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ns'ohW gnillac no eht enohp siht etal ta ?thgin\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - this\n2. ephemeral - the\n3. serendipity - on\n4. labyrinthine - late\n5. quixotic - night\n\nSentence:\nWho's calling serendipity ephemeral phone mellifluous labyrinthine at night?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e3-'-d4 c1-a1-b3-b3-d2-d3-b2 e3-d3 e4-c2-e1 a4-c2-e3-d3-e1 e4-c2-d2-d4 b3-a1-e4-e1 a1-e4 d3-d2-b2-c2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWho's [MASK_0] on [MASK_2] phone this late at [MASK_1]?\n\nMask_0:\n ## ##      ##      ####      ####        ####    ###  ##    ## ##   \n##   ##      ##      ##        ##          ##       ## ##   ##   ##  \n##         ## ##     ##        ##          ##      # ## #   ##       \n##         ##  ##    ##        ##          ##      ## ##    ##  ###  \n##         ## ###    ##        ##          ##      ##  ##   ##   ##  \n##   ##    ##  ##    ##  ##    ##  ##      ##      ##  ##   ##   ##  \n ## ##    ###  ##   ### ###   ### ###     ####    ###  ##    ## ##   \n                                                                     \n\n\nMask_1:\n###  ##     ####     ## ##    ###  ##   #### ##  \n  ## ##      ##     ##   ##    ##  ##   # ## ##  \n # ## #      ##     ##         ##  ##     ##     \n ## ##       ##     ##  ###    ## ###     ##     \n ##  ##      ##     ##   ##    ##  ##     ##     \n ##  ##      ##     ##   ##    ##  ##     ##     \n###  ##     ####     ## ##    ###  ##    ####    \n                                                 \n\n\nMask_2:\n#### ##   ###  ##   ### ###  \n# ## ##    ##  ##    ##  ##  \n  ##       ##  ##    ##      \n  ##       ## ###    ## ##   \n  ##       ##  ##    ##      \n  ##       ##  ##    ##  ##  \n ####     ###  ##   ### ###  \n                             \n"}
{"sentence": "Are you really going to ignore me, after everything that happened yesterday?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSByZWFsbHkgZ29pbmcgdG8gaWdub3JlIG1lLCBhZnRlciBldmVyeXRoaW5nIHRoYXQgaGFwcGVuZWQgeWVzdGVyZGF5Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh ernyyl tbvat gb vtaber zr, nsgre rirelguvat gung unccrarq lrfgreqnl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay eallyray oinggay otay ignoreyay emay, afteryay everythingyay atthay appenedhay esterdayyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u r34lly g01ng 70 1gn0r3 m3, 4f73r 3v3ry7h1ng 7h47 h4pp3n3d y3573rd4y?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi trs;;u hpomh yp ohmptr ,r, sgyrt rbrtuyjomh yjsy js[[rmrf urdyrtfsu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon \u0279\u01dd\u0250ll\u028e \u0183o\u1d09u\u0183 \u0287o \u1d09\u0183uo\u0279\u01dd \u026f\u01dd, \u0250\u025f\u0287\u01dd\u0279 \u01dd\u028c\u01dd\u0279\u028e\u0287\u0265\u1d09u\u0183 \u0287\u0265\u0250\u0287 \u0265\u0250dd\u01ddu\u01ddp \u028e\u01dds\u0287\u01dd\u0279p\u0250\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy yllaer gniog ot erongi ,em retfa gnihtyreve taht deneppah ?yadretsey\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - happened\n2. quixotic - after\n3. mellifluous - ignore\n4. labyrinthine - me\n5. serendipity - that\n\nSentence:\nAre you really going to mellifluous me, quixotic everything serendipity ephemeral yesterday?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 c4-e1-a1-b3-b3-e5 b2-e3-d2-d3-b2 e4-e3 d2-b2-d3-e3-c4-e1 c3-e1-, a1-a2-e4-e1-c4 e1-b5-e1-c4-e5-e4-c2-d2-d3-b2 e4-c2-a1-e4 c2-a1-a4-a4-e1-d3-e1-d1 e5-e1-d4-e4-e1-c4-d1-a1-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAre you [MASK_0] going to ignore me, after [MASK_2] that happened [MASK_1]?\n\nMask_0:\n### ##    ### ###     ##      ####      ####      ##  ##   \n ##  ##    ##  ##      ##      ##        ##       ##  ##   \n ##  ##    ##        ## ##     ##        ##       ##  ##   \n ## ##     ## ##     ##  ##    ##        ##        ## ##   \n ## ##     ##        ## ###    ##        ##         ##     \n ##  ##    ##  ##    ##  ##    ##  ##    ##  ##     ##     \n#### ##   ### ###   ###  ##   ### ###   ### ###     ##     \n                                                           \n\n\nMask_1:\n##  ##    ### ###    ## ##    #### ##   ### ###   ### ##    ### ##      ##      ##  ##   \n##  ##     ##  ##   ##   ##   # ## ##    ##  ##    ##  ##    ##  ##      ##     ##  ##   \n##  ##     ##       ####        ##       ##        ##  ##    ##  ##    ## ##    ##  ##   \n ## ##     ## ##     #####      ##       ## ##     ## ##     ##  ##    ##  ##    ## ##   \n  ##       ##           ###     ##       ##        ## ##     ##  ##    ## ###     ##     \n  ##       ##  ##   ##   ##     ##       ##  ##    ##  ##    ##  ##    ##  ##     ##     \n  ##      ### ###    ## ##     ####     ### ###   #### ##   ### ##    ###  ##     ##     \n                                                                                         \n\n\nMask_2:\n### ###   ### ###   ### ###   ### ##    ##  ##    #### ##   ###  ##     ####    ###  ##    ## ##   \n ##  ##    ##  ##    ##  ##    ##  ##   ##  ##    # ## ##    ##  ##      ##       ## ##   ##   ##  \n ##        ##  ##    ##        ##  ##   ##  ##      ##       ##  ##      ##      # ## #   ##       \n ## ##     ##  ##    ## ##     ## ##     ## ##      ##       ## ###      ##      ## ##    ##  ###  \n ##        ### ##    ##        ## ##      ##        ##       ##  ##      ##      ##  ##   ##   ##  \n ##  ##     ###      ##  ##    ##  ##     ##        ##       ##  ##      ##      ##  ##   ##   ##  \n### ###      ##     ### ###   #### ##     ##       ####     ###  ##     ####    ###  ##    ## ##   \n                                                                                                   \n"}
{"sentence": "If you could go anywhere on vacation, where would you go?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSWYgeW91IGNvdWxkIGdvIGFueXdoZXJlIG9uIHZhY2F0aW9uLCB3aGVyZSB3b3VsZCB5b3UgZ28/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVs lbh pbhyq tb naljurer ba inpngvba, jurer jbhyq lbh tb?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIfyay ouyay ouldcay ogay anywhereyay onyay acationvay, erewhay ouldway ouyay ogay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n1f y0u c0uld g0 4nywh3r3 0n v4c4710n, wh3r3 w0uld y0u g0?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOg upi vpi;f hp smuejrtr pm bsvsyopm, ejrtr epi;f upi hp?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nI\u025f \u028eon \u0254onlp \u0183o \u0250u\u028e\u028d\u0265\u01dd\u0279\u01dd ou \u028c\u0250\u0254\u0250\u0287\u1d09ou, \u028d\u0265\u01dd\u0279\u01dd \u028donlp \u028eon \u0183o?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nfI uoy dluoc og erehwyna no ,noitacav erehw dluow uoy ?og\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - you\n2. ephemeral - go\n3. quixotic - on\n4. serendipity - vacation\n5. mellifluous - anywhere\n\nSentence:\nIf labyrinthine could ephemeral mellifluous quixotic vacation, where would labyrinthine ephemeral?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-a2 e5-e3-a5 c1-e3-a5-b3-d1 b2-e3 a1-d3-e5-c5-c2-e1-c4-e1 e3-d3 b5-a1-c1-a1-e4-d2-e3-d3-, c5-c2-e1-c4-e1 c5-e3-a5-b3-d1 e5-e3-a5 b2-e3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIf [MASK_0] could go anywhere on [MASK_2], where would [MASK_0] go?\n\nMask_0:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_1:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n\n\nMask_2:\n### ###     ##       ## ##      ##      #### ##     ####     ## ##    ###  ##  \n ##  ##      ##     ##   ##      ##     # ## ##      ##     ##   ##     ## ##  \n ##  ##    ## ##    ##         ## ##      ##         ##     ##   ##    # ## #  \n ##  ##    ##  ##   ##         ##  ##     ##         ##     ##   ##    ## ##   \n ### ##    ## ###   ##         ## ###     ##         ##     ##   ##    ##  ##  \n  ###      ##  ##   ##   ##    ##  ##     ##         ##     ##   ##    ##  ##  \n   ##     ###  ##    ## ##    ###  ##    ####       ####     ## ##    ###  ##  \n                                                                               \n"}
{"sentence": "Is there a big market for this kind of thing these days?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXMgdGhlcmUgYSBiaWcgbWFya2V0IGZvciB0aGlzIGtpbmQgb2YgdGhpbmcgdGhlc2UgZGF5cz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVf gurer n ovt znexrg sbe guvf xvaq bs guvat gurfr qnlf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIsyay erethay ayay igbay arketmay orfay isthay indkay ofyay ingthay esethay aysday?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n15 7h3r3 4 b1g m4rk37 f0r 7h15 k1nd 0f 7h1ng 7h353 d4y5?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOd yjrtr s noh ,stlry gpt yjod lomf pg yjomh yjrdr fsud?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIs \u0287\u0265\u01dd\u0279\u01dd \u0250 q\u1d09\u0183 \u026f\u0250\u0279\u029e\u01dd\u0287 \u025fo\u0279 \u0287\u0265\u1d09s \u029e\u1d09up o\u025f \u0287\u0265\u1d09u\u0183 \u0287\u0265\u01dds\u01dd p\u0250\u028es?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsI ereht a gib tekram rof siht dnik fo gniht eseht ?syad\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - days\n2. mellifluous - kind\n3. serendipity - big\n4. ephemeral - this\n5. labyrinthine - thing\n\nSentence:\nIs there a serendipity market for ephemeral mellifluous of labyrinthine these days?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d4 e4-c2-e1-c4-e1 a1 b1-d2-b2 c3-a1-c4-a3-e1-e4 a2-e3-c4 e4-c2-d2-d4 a3-d2-d3-d1 e3-a2 e4-c2-d2-d3-b2 e4-c2-e1-d4-e1 d1-a1-e5-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] there a [MASK_1] market for this kind of thing [MASK_0] days?\n\nMask_0:\n#### ##   ###  ##   ### ###    ## ##    ### ###  \n# ## ##    ##  ##    ##  ##   ##   ##    ##  ##  \n  ##       ##  ##    ##       ####       ##      \n  ##       ## ###    ## ##     #####     ## ##   \n  ##       ##  ##    ##           ###    ##      \n  ##       ##  ##    ##  ##   ##   ##    ##  ##  \n ####     ###  ##   ### ###    ## ##    ### ###  \n                                                 \n\n\nMask_1:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n\n\nMask_2:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n"}
{"sentence": "Would you like a nice warm slice of apple pie?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV291bGQgeW91IGxpa2UgYSBuaWNlIHdhcm0gc2xpY2Ugb2YgYXBwbGUgcGllPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJbhyq lbh yvxr n avpr jnez fyvpr bs nccyr cvr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nouldWay ouyay ikelay ayay icenay armway iceslay ofyay appleyay iepay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nW0uld y0u l1k3 4 n1c3 w4rm 5l1c3 0f 4ppl3 p13?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEpi;f upi ;olr s movr est, d;ovr pg s[[;r [or?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nMonlp \u028eon l\u1d09\u029e\u01dd \u0250 u\u1d09\u0254\u01dd \u028d\u0250\u0279\u026f sl\u1d09\u0254\u01dd o\u025f \u0250ddl\u01dd d\u1d09\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ndluoW uoy ekil a ecin mraw ecils fo elppa ?eip\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - warm\n2. mellifluous - slice\n3. serendipity - a\n4. quixotic - nice\n5. labyrinthine - would\n\nSentence:\nlabyrinthine you like serendipity quixotic ephemeral mellifluous of apple pie?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-e3-a5-b3-d1 e5-e3-a5 b3-d2-a3-e1 a1 d3-d2-c1-e1 c5-a1-c4-c3 d4-b3-d2-c1-e1 e3-a2 a1-a4-a4-b3-e1 a4-d2-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWould you like [MASK_0] nice warm [MASK_2] [MASK_1] apple pie?\n\nMask_0:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_1:\n ## ##    ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n##   ##    ## ##   \n##   ##    ##      \n##   ##    ##      \n ## ##    ####     \n                   \n\n\nMask_2:\n ## ##    ####        ####     ## ##    ### ###  \n##   ##    ##          ##     ##   ##    ##  ##  \n####       ##          ##     ##         ##      \n #####     ##          ##     ##         ## ##   \n    ###    ##          ##     ##         ##      \n##   ##    ##  ##      ##     ##   ##    ##  ##  \n ## ##    ### ###     ####     ## ##    ### ###  \n                                                 \n"}
{"sentence": "What kind of sentence are you looking for anyway?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCBraW5kIG9mIHNlbnRlbmNlIGFyZSB5b3UgbG9va2luZyBmb3IgYW55d2F5Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung xvaq bs fragrapr ner lbh ybbxvat sbe naljnl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay indkay ofyay entencesay areyay ouyay ookinglay orfay anywayyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 k1nd 0f 53n73nc3 4r3 y0u l00k1ng f0r 4nyw4y?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy lomf pg drmyrmvr str upi ;pplomh gpt smuesu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u029e\u1d09up o\u025f s\u01ddu\u0287\u01ddu\u0254\u01dd \u0250\u0279\u01dd \u028eon loo\u029e\u1d09u\u0183 \u025fo\u0279 \u0250u\u028e\u028d\u0250\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW dnik fo ecnetnes era uoy gnikool rof ?yawyna\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - looking\n2. serendipity - you\n3. ephemeral - what\n4. labyrinthine - of\n5. quixotic - sentence\n\nSentence:\nephemeral kind labyrinthine quixotic are serendipity mellifluous for anyway?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 a3-d2-d3-d1 e3-a2 d4-e1-d3-e4-e1-d3-c1-e1 a1-c4-e1 e5-e3-a5 b3-e3-e3-a3-d2-d3-b2 a2-e3-c4 a1-d3-e5-c5-a1-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat kind [MASK_2] sentence are you [MASK_1] [MASK_0] anyway?\n\nMask_0:\n### ###    ## ##    ### ##   \n ##  ##   ##   ##    ##  ##  \n ##       ##   ##    ##  ##  \n ## ##    ##   ##    ## ##   \n ##       ##   ##    ## ##   \n ##       ##   ##    ##  ##  \n####       ## ##    #### ##  \n                             \n\n\nMask_1:\n####       ## ##     ## ##    ##  ###     ####    ###  ##    ## ##   \n ##       ##   ##   ##   ##   ##  ##       ##       ## ##   ##   ##  \n ##       ##   ##   ##   ##   ## ##        ##      # ## #   ##       \n ##       ##   ##   ##   ##   ## ##        ##      ## ##    ##  ###  \n ##       ##   ##   ##   ##   ## ###       ##      ##  ##   ##   ##  \n ##  ##   ##   ##   ##   ##   ##  ##       ##      ##  ##   ##   ##  \n### ###    ## ##     ## ##    ##  ###     ####    ###  ##    ## ##   \n                                                                     \n\n\nMask_2:\n ## ##    ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n##   ##    ## ##   \n##   ##    ##      \n##   ##    ##      \n ## ##    ####     \n                   \n"}
{"sentence": "How long was she on the run before they caught her?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGxvbmcgd2FzIHNoZSBvbiB0aGUgcnVuIGJlZm9yZSB0aGV5IGNhdWdodCBoZXI/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj ybat jnf fur ba gur eha orsber gurl pnhtug ure?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay onglay asway eshay onyay ethay unray eforebay eythay aughtcay erhay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w l0ng w45 5h3 0n 7h3 run b3f0r3 7h3y c4ugh7 h3r?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe ;pmh esd djr pm yjr tim nrgptr yjru vsihjy jrt?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d lou\u0183 \u028d\u0250s s\u0265\u01dd ou \u0287\u0265\u01dd \u0279nu q\u01dd\u025fo\u0279\u01dd \u0287\u0265\u01dd\u028e \u0254\u0250n\u0183\u0265\u0287 \u0265\u01dd\u0279?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH gnol saw ehs no eht nur erofeb yeht thguac ?reh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - before\n2. labyrinthine - long\n3. serendipity - on\n4. ephemeral - how\n5. quixotic - was\n\nSentence:\nephemeral labyrinthine quixotic she serendipity the run mellifluous they caught her?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 b3-e3-d3-b2 c5-a1-d4 d4-c2-e1 e3-d3 e4-c2-e1 c4-a5-d3 b1-e1-a2-e3-c4-e1 e4-c2-e1-e5 c1-a1-a5-b2-c2-e4 c2-e1-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] long [MASK_1] she on the run before they [MASK_0] her?\n\nMask_0:\n ## ##      ##      ##  ###    ## ##    ###  ##   #### ##  \n##   ##      ##     ##   ##   ##   ##    ##  ##   # ## ##  \n##         ## ##    ##   ##   ##         ##  ##     ##     \n##         ##  ##   ##   ##   ##  ###    ## ###     ##     \n##         ## ###   ##   ##   ##   ##    ##  ##     ##     \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##     ##     \n ## ##    ###  ##    ## ##     ## ##    ###  ##    ####    \n                                                           \n\n\nMask_1:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n\n\nMask_2:\n###  ##    ## ##    ##   ##  \n ##  ##   ##   ##   ##   ##  \n ##  ##   ##   ##   ##   ##  \n ## ###   ##   ##   ## # ##  \n ##  ##   ##   ##   # ### #  \n ##  ##   ##   ##    ## ##   \n###  ##    ## ##    ##   ##  \n                             \n"}
{"sentence": "What was I supposed to do, let her throw up on my begonias?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCB3YXMgSSBzdXBwb3NlZCB0byBkbywgbGV0IGhlciB0aHJvdyB1cCBvbiBteSBiZWdvbmlhcz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung jnf V fhccbfrq gb qb, yrg ure guebj hc ba zl ortbavnf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay asway Iyay upposedsay otay oday, etlay erhay owthray upyay onyay myay egoniasbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 w45 1 5upp053d 70 d0, l37 h3r 7hr0w up 0n my b3g0n145?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy esd O di[[pdrf yp fp, ;ry jrt yjtpe i[ pm ,u nrhpmosd?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u028d\u0250s I snddos\u01ddp \u0287o po, l\u01dd\u0287 \u0265\u01dd\u0279 \u0287\u0265\u0279o\u028d nd ou \u026f\u028e q\u01dd\u0183ou\u1d09\u0250s?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW saw I desoppus ot ,od tel reh worht pu no ym ?sainogeb\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - to\n2. serendipity - throw\n3. ephemeral - i\n4. labyrinthine - let\n5. mellifluous - my\n\nSentence:\nWhat was ephemeral supposed quixotic do, labyrinthine her serendipity up on mellifluous begonias?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 c5-a1-d4 d2 d4-a5-a4-a4-e3-d4-e1-d1 e4-e3 d1-e3-, b3-e1-e4 c2-e1-c4 e4-c2-c4-e3-c5 a5-a4 e3-d3 c3-e5 b1-e1-b2-e3-d3-d2-a1-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat [MASK_2] I supposed to do, let her throw up [MASK_1] [MASK_0] begonias?\n\nMask_0:\n##   ##   ##  ##   \n ## ##    ##  ##   \n# ### #   ##  ##   \n## # ##    ## ##   \n##   ##     ##     \n##   ##     ##     \n##   ##     ##     \n                   \n\n\nMask_1:\n ## ##    ###  ##  \n##   ##     ## ##  \n##   ##    # ## #  \n##   ##    ## ##   \n##   ##    ##  ##  \n##   ##    ##  ##  \n ## ##    ###  ##  \n                   \n\n\nMask_2:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n"}
{"sentence": "What should you do if you find a spider on your bed?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCBzaG91bGQgeW91IGRvIGlmIHlvdSBmaW5kIGEgc3BpZGVyIG9uIHlvdXIgYmVkPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung fubhyq lbh qb vs lbh svaq n fcvqre ba lbhe orq?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay ouldshay ouyay oday ifyay ouyay indfay ayay iderspay onyay ouryay edbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 5h0uld y0u d0 1f y0u f1nd 4 5p1d3r 0n y0ur b3d?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy djpi;f upi fp og upi gomf s d[ofrt pm upit nrf?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 s\u0265onlp \u028eon po \u1d09\u025f \u028eon \u025f\u1d09up \u0250 sd\u1d09p\u01dd\u0279 ou \u028eon\u0279 q\u01ddp?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW dluohs uoy od fi uoy dnif a redips no ruoy ?deb\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - spider\n2. serendipity - you\n3. quixotic - find\n4. labyrinthine - a\n5. ephemeral - bed\n\nSentence:\nWhat should serendipity do if serendipity quixotic labyrinthine mellifluous on your bed?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 d4-c2-e3-a5-b3-d1 e5-e3-a5 d1-e3 d2-a2 e5-e3-a5 a2-d2-d3-d1 a1 d4-a4-d2-d1-e1-c4 e3-d3 e5-e3-a5-c4 b1-e1-d1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat should [MASK_2] do if [MASK_2] find a [MASK_0] on [MASK_1] bed?\n\nMask_0:\n ## ##    ### ##      ####    ### ##    ### ###   ### ##   \n##   ##    ##  ##      ##      ##  ##    ##  ##    ##  ##  \n####       ##  ##      ##      ##  ##    ##        ##  ##  \n #####     ##  ##      ##      ##  ##    ## ##     ## ##   \n    ###    ## ##       ##      ##  ##    ##        ## ##   \n##   ##    ##          ##      ##  ##    ##  ##    ##  ##  \n ## ##    ####        ####    ### ##    ### ###   #### ##  \n                                                           \n\n\nMask_1:\n##  ##     ## ##    ##  ###   ### ##   \n##  ##    ##   ##   ##   ##    ##  ##  \n##  ##    ##   ##   ##   ##    ##  ##  \n ## ##    ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ## ##   \n  ##      ##   ##   ##   ##    ##  ##  \n  ##       ## ##     ## ##    #### ##  \n                                       \n\n\nMask_2:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n"}
{"sentence": "What time should I drop the kids off at school?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCB0aW1lIHNob3VsZCBJIGRyb3AgdGhlIGtpZHMgb2ZmIGF0IHNjaG9vbD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung gvzr fubhyq V qebc gur xvqf bss ng fpubby?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay imetay ouldshay Iyay opdray ethay idskay offyay atyay oolschay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 71m3 5h0uld 1 dr0p 7h3 k1d5 0ff 47 5ch00l?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy yo,r djpi;f O ftp[ yjr lofd pgg sy dvjpp;?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u0287\u1d09\u026f\u01dd s\u0265onlp I p\u0279od \u0287\u0265\u01dd \u029e\u1d09ps o\u025f\u025f \u0250\u0287 s\u0254\u0265ool?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW emit dluohs I pord eht sdik ffo ta ?loohcs\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - i\n2. quixotic - what\n3. serendipity - should\n4. mellifluous - kids\n5. labyrinthine - school\n\nSentence:\nquixotic time serendipity ephemeral drop the mellifluous off at school?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 e4-d2-c3-e1 d4-c2-e3-a5-b3-d1 d2 d1-c4-e3-a4 e4-c2-e1 a3-d2-d1-d4 e3-a2-a2 a1-e4 d4-c1-c2-e3-e3-b3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat [MASK_1] [MASK_2] I [MASK_0] the kids off at school?\n\nMask_0:\n### ##    ### ##     ## ##    ### ##   \n ##  ##    ##  ##   ##   ##    ##  ##  \n ##  ##    ##  ##   ##   ##    ##  ##  \n ##  ##    ## ##    ##   ##    ##  ##  \n ##  ##    ## ##    ##   ##    ## ##   \n ##  ##    ##  ##   ##   ##    ##      \n### ##    #### ##    ## ##    ####     \n                                       \n\n\nMask_1:\n#### ##     ####    ##   ##   ### ###  \n# ## ##      ##      ## ##     ##  ##  \n  ##         ##     # ### #    ##      \n  ##         ##     ## # ##    ## ##   \n  ##         ##     ##   ##    ##      \n  ##         ##     ##   ##    ##  ##  \n ####       ####    ##   ##   ### ###  \n                                       \n\n\nMask_2:\n ## ##    ###  ##    ## ##    ##  ###   ####      ### ##   \n##   ##    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n####       ##  ##   ##   ##   ##   ##    ##        ##  ##  \n #####     ## ###   ##   ##   ##   ##    ##        ##  ##  \n    ###    ##  ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##    ###  ##    ## ##     ## ##    ### ###   ### ##   \n                                                           \n"}
{"sentence": "How long does it really take to heal from a bullet wound?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGxvbmcgZG9lcyBpdCByZWFsbHkgdGFrZSB0byBoZWFsIGZyb20gYSBidWxsZXQgd291bmQ/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj ybat qbrf vg ernyyl gnxr gb urny sebz n ohyyrg jbhaq?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay onglay oesday ityay eallyray aketay otay ealhay omfray ayay ulletbay oundway?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w l0ng d035 17 r34lly 74k3 70 h34l fr0m 4 bull37 w0und?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe ;pmh fprd oy trs;;u yslr yp jrs; gtp, s ni;;ry epimf?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d lou\u0183 po\u01dds \u1d09\u0287 \u0279\u01dd\u0250ll\u028e \u0287\u0250\u029e\u01dd \u0287o \u0265\u01dd\u0250l \u025f\u0279o\u026f \u0250 qnll\u01dd\u0287 \u028donup?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH gnol seod ti yllaer ekat ot laeh morf a tellub ?dnuow\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - does\n2. quixotic - really\n3. serendipity - how\n4. labyrinthine - wound\n5. mellifluous - it\n\nSentence:\nserendipity long ephemeral mellifluous quixotic take to heal from a bullet wound?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 b3-e3-d3-b2 d1-e3-e1-d4 d2-e4 c4-e1-a1-b3-b3-e5 e4-a1-a3-e1 e4-e3 c2-e1-a1-b3 a2-c4-e3-c3 a1 b1-a5-b3-b3-e1-e4 c5-e3-a5-d3-d1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] long [MASK_2] it really [MASK_0] to heal from a bullet wound?\n\nMask_0:\n#### ##     ##      ##  ###   ### ###  \n# ## ##      ##     ##  ##     ##  ##  \n  ##       ## ##    ## ##      ##      \n  ##       ##  ##   ## ##      ## ##   \n  ##       ## ###   ## ###     ##      \n  ##       ##  ##   ##  ##     ##  ##  \n ####     ###  ##   ##  ###   ### ###  \n                                       \n\n\nMask_1:\n###  ##    ## ##    ##   ##  \n ##  ##   ##   ##   ##   ##  \n ##  ##   ##   ##   ##   ##  \n ## ###   ##   ##   ## # ##  \n ##  ##   ##   ##   # ### #  \n ##  ##   ##   ##    ## ##   \n###  ##    ## ##    ##   ##  \n                             \n\n\nMask_2:\n### ##     ## ##    ### ###    ## ##   \n ##  ##   ##   ##    ##  ##   ##   ##  \n ##  ##   ##   ##    ##       ####     \n ##  ##   ##   ##    ## ##     #####   \n ##  ##   ##   ##    ##           ###  \n ##  ##   ##   ##    ##  ##   ##   ##  \n### ##     ## ##    ### ###    ## ##   \n                                       \n"}
{"sentence": "How did you know that I was going to have a peanut butter sandwich for lunch?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IGRpZCB5b3Uga25vdyB0aGF0IEkgd2FzIGdvaW5nIHRvIGhhdmUgYSBwZWFudXQgYnV0dGVyIHNhbmR3aWNoIGZvciBsdW5jaD8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj qvq lbh xabj gung V jnf tbvat gb unir n crnahg ohggre fnaqjvpu sbe yhapu?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay idday ouyay owknay atthay Iyay asway oinggay otay avehay ayay eanutpay utterbay andwichsay orfay unchlay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w d1d y0u kn0w 7h47 1 w45 g01ng 70 h4v3 4 p34nu7 bu773r 54ndw1ch f0r lunch?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe fof upi lmpe yjsy O esd hpomh yp jsbr s [rsmiy niyyrt dsmfeovj gpt ;imvj?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d p\u1d09p \u028eon \u029euo\u028d \u0287\u0265\u0250\u0287 I \u028d\u0250s \u0183o\u1d09u\u0183 \u0287o \u0265\u0250\u028c\u01dd \u0250 d\u01dd\u0250un\u0287 qn\u0287\u0287\u01dd\u0279 s\u0250up\u028d\u1d09\u0254\u0265 \u025fo\u0279 lnu\u0254\u0265?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH did uoy wonk taht I saw gniog ot evah a tunaep rettub hciwdnas rof ?hcnul\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - that\n2. labyrinthine - a\n3. quixotic - i\n4. ephemeral - lunch\n5. serendipity - was\n\nSentence:\nHow did you know mellifluous quixotic serendipity going to have labyrinthine peanut butter sandwich for lunch?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 d1-d2-d1 e5-e3-a5 a3-d3-e3-c5 e4-c2-a1-e4 d2 c5-a1-d4 b2-e3-d2-d3-b2 e4-e3 c2-a1-b5-e1 a1 a4-e1-a1-d3-a5-e4 b1-a5-e4-e4-e1-c4 d4-a1-d3-d1-c5-d2-c1-c2 a2-e3-c4 b3-a5-d3-c1-c2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHow did you know that I [MASK_0] going to have a peanut butter [MASK_1] [MASK_2] lunch?\n\nMask_0:\n##   ##     ##       ## ##   \n##   ##      ##     ##   ##  \n##   ##    ## ##    ####     \n## # ##    ##  ##    #####   \n# ### #    ## ###       ###  \n ## ##     ##  ##   ##   ##  \n##   ##   ###  ##    ## ##   \n                             \n\n\nMask_1:\n ## ##      ##      ###  ##   ### ##    ##   ##     ####     ## ##    ###  ##  \n##   ##      ##       ## ##    ##  ##   ##   ##      ##     ##   ##    ##  ##  \n####       ## ##     # ## #    ##  ##   ##   ##      ##     ##         ##  ##  \n #####     ##  ##    ## ##     ##  ##   ## # ##      ##     ##         ## ###  \n    ###    ## ###    ##  ##    ##  ##   # ### #      ##     ##         ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##    ## ##       ##     ##   ##    ##  ##  \n ## ##    ###  ##   ###  ##   ### ##    ##   ##     ####     ## ##    ###  ##  \n                                                                               \n\n\nMask_2:\n### ###    ## ##    ### ##   \n ##  ##   ##   ##    ##  ##  \n ##       ##   ##    ##  ##  \n ## ##    ##   ##    ## ##   \n ##       ##   ##    ## ##   \n ##       ##   ##    ##  ##  \n####       ## ##    #### ##  \n                             \n"}
{"sentence": "What did the taxidermist say she'd charge you?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCBkaWQgdGhlIHRheGlkZXJtaXN0IHNheSBzaGUnZCBjaGFyZ2UgeW91Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung qvq gur gnkvqrezvfg fnl fur'q punetr lbh?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay idday ethay axidermisttay aysay e'dshay argechay ouyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 d1d 7h3 74x1d3rm157 54y 5h3'd ch4rg3 y0u?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy fof yjr yscofrt,ody dsu djr'f vjsthr upi?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 p\u1d09p \u0287\u0265\u01dd \u0287\u0250x\u1d09p\u01dd\u0279\u026f\u1d09s\u0287 s\u0250\u028e s\u0265\u01dd'p \u0254\u0265\u0250\u0279\u0183\u01dd \u028eon?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW did eht tsimredixat yas d'ehs egrahc ?uoy\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - the\n2. quixotic - charge\n3. labyrinthine - you\n4. ephemeral - say\n5. serendipity - what\n\nSentence:\nserendipity did mellifluous taxidermist ephemeral she'd quixotic you?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 d1-d2-d1 e4-c2-e1 e4-a1-d5-d2-d1-e1-c4-c3-d2-d4-e4 d4-a1-e5 d4-c2-e1-'-d1 c1-c2-a1-c4-b2-e1 e5-e3-a5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat did the [MASK_0] [MASK_2] she'd charge you?\n\nMask_0:\n#### ##     ##      ##  ##      ####    ### ##    ### ###   ### ##    ##   ##     ####     ## ##    #### ##  \n# ## ##      ##     ### ##       ##      ##  ##    ##  ##    ##  ##    ## ##       ##     ##   ##   # ## ##  \n  ##       ## ##     ###         ##      ##  ##    ##        ##  ##   # ### #      ##     ####        ##     \n  ##       ##  ##     ###        ##      ##  ##    ## ##     ## ##    ## # ##      ##      #####      ##     \n  ##       ## ###      ###       ##      ##  ##    ##        ## ##    ##   ##      ##         ###     ##     \n  ##       ##  ##   ##  ###      ##      ##  ##    ##  ##    ##  ##   ##   ##      ##     ##   ##     ##     \n ####     ###  ##   ##   ##     ####    ### ##    ### ###   #### ##   ##   ##     ####     ## ##     ####    \n                                                                                                             \n\n\nMask_1:\n ## ##    ###  ##   ### ###   ### ##   \n##   ##    ##  ##    ##  ##    ##  ##  \n####       ##  ##    ##        ##  ##  \n #####     ## ###    ## ##     ##  ##  \n    ###    ##  ##    ##        ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##  \n ## ##    ###  ##   ### ###   ### ##   \n                                       \n\n\nMask_2:\n ## ##      ##      ##  ##   \n##   ##      ##     ##  ##   \n####       ## ##    ##  ##   \n #####     ##  ##    ## ##   \n    ###    ## ###     ##     \n##   ##    ##  ##     ##     \n ## ##    ###  ##     ##     \n                             \n"}
{"sentence": "What are some things you don't like to do and why?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hhdCBhcmUgc29tZSB0aGluZ3MgeW91IGRvbid0IGxpa2UgdG8gZG8gYW5kIHdoeT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJung ner fbzr guvatf lbh qba'g yvxr gb qb naq jul?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\natWhay areyay omesay ingsthay ouyay on'tday ikelay otay oday andyay whyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh47 4r3 50m3 7h1ng5 y0u d0n'7 l1k3 70 d0 4nd why?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjsy str dp,r yjomhd upi fpm'y ;olr yp fp smf eju?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u0250\u0287 \u0250\u0279\u01dd so\u026f\u01dd \u0287\u0265\u1d09u\u0183s \u028eon pou'\u0287 l\u1d09\u029e\u01dd \u0287o po \u0250up \u028d\u0265\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ntahW era emos sgniht uoy t'nod ekil ot od dna ?yhw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - dont\n2. serendipity - why\n3. mellifluous - some\n4. ephemeral - what\n5. quixotic - and\n\nSentence:\nephemeral are mellifluous things you labyrinthine like to do quixotic why?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-a1-e4 a1-c4-e1 d4-e3-c3-e1 e4-c2-d2-d3-b2-d4 e5-e3-a5 d1-e3-d3-'-e4 b3-d2-a3-e1 e4-e3 d1-e3 a1-d3-d1 c5-c2-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhat are [MASK_0] things you don't [MASK_2] [MASK_1] do and why?\n\nMask_0:\n ## ##     ## ##    ##   ##   ### ###  \n##   ##   ##   ##    ## ##     ##  ##  \n####      ##   ##   # ### #    ##      \n #####    ##   ##   ## # ##    ## ##   \n    ###   ##   ##   ##   ##    ##      \n##   ##   ##   ##   ##   ##    ##  ##  \n ## ##     ## ##    ##   ##   ### ###  \n                                       \n\n\nMask_1:\n#### ##    ## ##   \n# ## ##   ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####      ## ##   \n                   \n\n\nMask_2:\n####        ####    ##  ###   ### ###  \n ##          ##     ##  ##     ##  ##  \n ##          ##     ## ##      ##      \n ##          ##     ## ##      ## ##   \n ##          ##     ## ###     ##      \n ##  ##      ##     ##  ##     ##  ##  \n### ###     ####    ##  ###   ### ###  \n                                       \n"}
{"sentence": "Are you honestly saying you believe in ghosts?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSBob25lc3RseSBzYXlpbmcgeW91IGJlbGlldmUgaW4gZ2hvc3RzPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh ubarfgyl fnlvat lbh oryvrir va tubfgf?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay onestlyhay ayingsay ouyay elievebay inyay ostsghay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u h0n357ly 54y1ng y0u b3l13v3 1n gh0575?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi jpmrdy;u dsuomh upi nr;orbr om hjpdyd?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon \u0265ou\u01dds\u0287l\u028e s\u0250\u028e\u1d09u\u0183 \u028eon q\u01ddl\u1d09\u01dd\u028c\u01dd \u1d09u \u0183\u0265os\u0287s?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy yltsenoh gniyas uoy eveileb ni ?stsohg\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - ghosts\n2. quixotic - in\n3. mellifluous - you\n4. labyrinthine - saying\n\nSentence:\nAre mellifluous honestly labyrinthine mellifluous believe quixotic ghosts?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 c2-e3-d3-e1-d4-e4-b3-e5 d4-a1-e5-d2-d3-b2 e5-e3-a5 b1-e1-b3-d2-e1-b5-e1 d2-d3 b2-c2-e3-d4-e4-d4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_2] honestly saying [MASK_2] believe in [MASK_0]?\n\nMask_0:\n ## ##    ###  ##    ## ##     ## ##    #### ##    ## ##   \n##   ##    ##  ##   ##   ##   ##   ##   # ## ##   ##   ##  \n##         ##  ##   ##   ##   ####        ##      ####     \n##  ###    ## ###   ##   ##    #####      ##       #####   \n##   ##    ##  ##   ##   ##       ###     ##          ###  \n##   ##    ##  ##   ##   ##   ##   ##     ##      ##   ##  \n ## ##    ###  ##    ## ##     ## ##     ####      ## ##   \n                                                           \n\n\nMask_1:\n  ##      ### ##    ### ###  \n   ##      ##  ##    ##  ##  \n ## ##     ##  ##    ##      \n ##  ##    ## ##     ## ##   \n ## ###    ## ##     ##      \n ##  ##    ##  ##    ##  ##  \n###  ##   #### ##   ### ###  \n                             \n\n\nMask_2:\n##  ##     ## ##    ##  ###  \n##  ##    ##   ##   ##   ##  \n##  ##    ##   ##   ##   ##  \n ## ##    ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##      ##   ##   ##   ##  \n  ##       ## ##     ## ##   \n                             \n"}
{"sentence": "How old were you when this town had its big fire?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSG93IG9sZCB3ZXJlIHlvdSB3aGVuIHRoaXMgdG93biBoYWQgaXRzIGJpZyBmaXJlPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nUbj byq jrer lbh jura guvf gbja unq vgf ovt sver?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nowHay oldyay ereway ouyay enwhay isthay owntay adhay itsyay igbay irefay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nH0w 0ld w3r3 y0u wh3n 7h15 70wn h4d 175 b1g f1r3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nJpe p;f ertr upi ejrm yjod ypem jsf oyd noh gotr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nHo\u028d olp \u028d\u01dd\u0279\u01dd \u028eon \u028d\u0265\u01ddu \u0287\u0265\u1d09s \u0287o\u028du \u0265\u0250p \u1d09\u0287s q\u1d09\u0183 \u025f\u1d09\u0279\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nwoH dlo erew uoy nehw siht nwot dah sti gib ?erif\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - its\n2. mellifluous - town\n3. labyrinthine - this\n4. quixotic - when\n5. ephemeral - you\n\nSentence:\nHow old were ephemeral quixotic labyrinthine mellifluous had serendipity big fire?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-c5 e3-b3-d1 c5-e1-c4-e1 e5-e3-a5 c5-c2-e1-d3 e4-c2-d2-d4 e4-e3-c5-d3 c2-a1-d1 d2-e4-d4 b1-d2-b2 a2-d2-c4-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nHow old [MASK_2] you [MASK_0] this town [MASK_1] its big fire?\n\nMask_0:\n##   ##   ###  ##   ### ###   ###  ##  \n##   ##    ##  ##    ##  ##     ## ##  \n##   ##    ##  ##    ##        # ## #  \n## # ##    ## ###    ## ##     ## ##   \n# ### #    ##  ##    ##        ##  ##  \n ## ##     ##  ##    ##  ##    ##  ##  \n##   ##   ###  ##   ### ###   ###  ##  \n                                       \n\n\nMask_1:\n###  ##     ##      ### ##   \n ##  ##      ##      ##  ##  \n ##  ##    ## ##     ##  ##  \n ## ###    ##  ##    ##  ##  \n ##  ##    ## ###    ##  ##  \n ##  ##    ##  ##    ##  ##  \n###  ##   ###  ##   ### ##   \n                             \n\n\nMask_2:\n##   ##   ### ###   ### ##    ### ###  \n##   ##    ##  ##    ##  ##    ##  ##  \n##   ##    ##        ##  ##    ##      \n## # ##    ## ##     ## ##     ## ##   \n# ### #    ##        ## ##     ##      \n ## ##     ##  ##    ##  ##    ##  ##  \n##   ##   ### ###   #### ##   ### ###  \n                                       \n"}
{"sentence": "Where can I find a decent sandwich around here?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2hlcmUgY2FuIEkgZmluZCBhIGRlY2VudCBzYW5kd2ljaCBhcm91bmQgaGVyZT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJurer pna V svaq n qrprag fnaqjvpu nebhaq urer?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nereWhay ancay Iyay indfay ayay ecentday andwichsay aroundyay erehay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWh3r3 c4n 1 f1nd 4 d3c3n7 54ndw1ch 4r0und h3r3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEjrtr vsm O gomf s frvrmy dsmfeovj stpimf jrtr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u01dd\u0279\u01dd \u0254\u0250u I \u025f\u1d09up \u0250 p\u01dd\u0254\u01ddu\u0287 s\u0250up\u028d\u1d09\u0254\u0265 \u0250\u0279onup \u0265\u01dd\u0279\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerehW nac I dnif a tneced hciwdnas dnuora ?ereh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - can\n2. quixotic - decent\n3. mellifluous - i\n4. labyrinthine - find\n5. serendipity - sandwich\n\nSentence:\nWhere ephemeral mellifluous labyrinthine a quixotic serendipity around here?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e1-c4-e1 c1-a1-d3 d2 a2-d2-d3-d1 a1 d1-e1-c1-e1-d3-e4 d4-a1-d3-d1-c5-d2-c1-c2 a1-c4-e3-a5-d3-d1 c2-e1-c4-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhere can I [MASK_1] a decent [MASK_2] [MASK_0] here?\n\nMask_0:\n  ##      ### ##     ## ##    ##  ###   ###  ##   ### ##   \n   ##      ##  ##   ##   ##   ##   ##     ## ##    ##  ##  \n ## ##     ##  ##   ##   ##   ##   ##    # ## #    ##  ##  \n ##  ##    ## ##    ##   ##   ##   ##    ## ##     ##  ##  \n ## ###    ## ##    ##   ##   ##   ##    ##  ##    ##  ##  \n ##  ##    ##  ##   ##   ##   ##   ##    ##  ##    ##  ##  \n###  ##   #### ##    ## ##     ## ##    ###  ##   ### ##   \n                                                           \n\n\nMask_1:\n### ###     ####    ###  ##   ### ##   \n ##  ##      ##       ## ##    ##  ##  \n ##          ##      # ## #    ##  ##  \n ## ##       ##      ## ##     ##  ##  \n ##          ##      ##  ##    ##  ##  \n ##          ##      ##  ##    ##  ##  \n####        ####    ###  ##   ### ##   \n                                       \n\n\nMask_2:\n ## ##      ##      ###  ##   ### ##    ##   ##     ####     ## ##    ###  ##  \n##   ##      ##       ## ##    ##  ##   ##   ##      ##     ##   ##    ##  ##  \n####       ## ##     # ## #    ##  ##   ##   ##      ##     ##         ##  ##  \n #####     ##  ##    ## ##     ##  ##   ## # ##      ##     ##         ## ###  \n    ###    ## ###    ##  ##    ##  ##   # ### #      ##     ##         ##  ##  \n##   ##    ##  ##    ##  ##    ##  ##    ## ##       ##     ##   ##    ##  ##  \n ## ##    ###  ##   ###  ##   ### ##    ##   ##     ####     ## ##    ###  ##  \n                                                                               \n"}
{"sentence": "Did you hear about the big earthquake in Japan?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nRGlkIHlvdSBoZWFyIGFib3V0IHRoZSBiaWcgZWFydGhxdWFrZSBpbiBKYXBhbj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nQvq lbh urne nobhg gur ovt rnegudhnxr va Wncna?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nidDay ouyay earhay aboutyay ethay igbay earthquakeyay inyay apanJay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nD1d y0u h34r 4b0u7 7h3 b1g 34r7hqu4k3 1n J4p4n?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nFof upi jrst snpiy yjr noh rstyjwislr om Ks[sm?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u15e1\u1d09p \u028eon \u0265\u01dd\u0250\u0279 \u0250qon\u0287 \u0287\u0265\u01dd q\u1d09\u0183 \u01dd\u0250\u0279\u0287\u0265bn\u0250\u029e\u01dd \u1d09u \u017f\u0250d\u0250u?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ndiD uoy raeh tuoba eht gib ekauqhtrae ni ?napaJ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - japan\n2. serendipity - hear\n3. quixotic - the\n4. labyrinthine - you\n5. mellifluous - earthquake\n\nSentence:\nDid labyrinthine serendipity about quixotic big mellifluous in Japan?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd1-d2-d1 e5-e3-a5 c2-e1-a1-c4 a1-b1-e3-a5-e4 e4-c2-e1 b1-d2-b2 e1-a1-c4-e4-c2-b4-a5-a1-a3-e1 d2-d3 e2-a1-a4-a1-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nDid you [MASK_1] about the [MASK_0] [MASK_2] in Japan?\n\nMask_0:\n### ##      ####     ## ##   \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##       \n ## ##       ##     ##  ###  \n ##  ##      ##     ##   ##  \n ##  ##      ##     ##   ##  \n### ##      ####     ## ##   \n                             \n\n\nMask_1:\n###  ##   ### ###     ##      ### ##   \n ##  ##    ##  ##      ##      ##  ##  \n ##  ##    ##        ## ##     ##  ##  \n ## ###    ## ##     ##  ##    ## ##   \n ##  ##    ##        ## ###    ## ##   \n ##  ##    ##  ##    ##  ##    ##  ##  \n###  ##   ### ###   ###  ##   #### ##  \n                                       \n\n\nMask_2:\n### ###     ##      ### ##    #### ##   ###  ##    ## ##    ##  ###     ##      ##  ###   ### ###  \n ##  ##      ##      ##  ##   # ## ##    ##  ##   ##   ##   ##   ##      ##     ##  ##     ##  ##  \n ##        ## ##     ##  ##     ##       ##  ##   ##   ##   ##   ##    ## ##    ## ##      ##      \n ## ##     ##  ##    ## ##      ##       ## ###   ##   ##   ##   ##    ##  ##   ## ##      ## ##   \n ##        ## ###    ## ##      ##       ##  ##   ##   ##   ##   ##    ## ###   ## ###     ##      \n ##  ##    ##  ##    ##  ##     ##       ##  ##   ##  ##    ##   ##    ##  ##   ##  ##     ##  ##  \n### ###   ###  ##   #### ##    ####     ###  ##    ##  ##    ## ##    ###  ##   ##  ###   ### ###  \n                                                                                                   \n"}
{"sentence": "Are you going to have a blue birthday cake for your next birthday?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nQXJlIHlvdSBnb2luZyB0byBoYXZlIGEgYmx1ZSBiaXJ0aGRheSBjYWtlIGZvciB5b3VyIG5leHQgYmlydGhkYXk/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNer lbh tbvat gb unir n oyhr oveguqnl pnxr sbe lbhe arkg oveguqnl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAreyay ouyay oinggay otay avehay ayay ueblay irthdaybay akecay orfay ouryay extnay irthdaybay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4r3 y0u g01ng 70 h4v3 4 blu3 b1r7hd4y c4k3 f0r y0ur n3x7 b1r7hd4y?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nStr upi hpomh yp jsbr s n;ir notyjfsu vslr gpt upit mrcy notyjfsu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200\u0279\u01dd \u028eon \u0183o\u1d09u\u0183 \u0287o \u0265\u0250\u028c\u01dd \u0250 qln\u01dd q\u1d09\u0279\u0287\u0265p\u0250\u028e \u0254\u0250\u029e\u01dd \u025fo\u0279 \u028eon\u0279 u\u01ddx\u0287 q\u1d09\u0279\u0287\u0265p\u0250\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nerA uoy gniog ot evah a eulb yadhtrib ekac rof ruoy txen ?yadhtrib\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - birthday\n2. mellifluous - for\n3. serendipity - have\n4. labyrinthine - cake\n5. quixotic - birthday\n\nSentence:\nAre you going to serendipity a blue ephemeral labyrinthine mellifluous your next ephemeral?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-c4-e1 e5-e3-a5 b2-e3-d2-d3-b2 e4-e3 c2-a1-b5-e1 a1 b1-b3-a5-e1 b1-d2-c4-e4-c2-d1-a1-e5 c1-a1-a3-e1 a2-e3-c4 e5-e3-a5-c4 d3-e1-d5-e4 b1-d2-c4-e4-c2-d1-a1-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAre you going to [MASK_0] a blue birthday cake [MASK_1] your [MASK_2] birthday?\n\nMask_0:\n###  ##     ##      ### ###   ### ###  \n ##  ##      ##      ##  ##    ##  ##  \n ##  ##    ## ##     ##  ##    ##      \n ## ###    ##  ##    ##  ##    ## ##   \n ##  ##    ## ###    ### ##    ##      \n ##  ##    ##  ##     ###      ##  ##  \n###  ##   ###  ##      ##     ### ###  \n                                       \n\n\nMask_1:\n### ###    ## ##    ### ##   \n ##  ##   ##   ##    ##  ##  \n ##       ##   ##    ##  ##  \n ## ##    ##   ##    ## ##   \n ##       ##   ##    ## ##   \n ##       ##   ##    ##  ##  \n####       ## ##    #### ##  \n                             \n\n\nMask_2:\n###  ##   ### ###   ##  ##    #### ##  \n  ## ##    ##  ##   ### ##    # ## ##  \n # ## #    ##        ###        ##     \n ## ##     ## ##      ###       ##     \n ##  ##    ##          ###      ##     \n ##  ##    ##  ##   ##  ###     ##     \n###  ##   ### ###   ##   ##    ####    \n                                       \n"}
{"sentence": "Is 'Armageddon' really the best name for a goldfish?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nSXMgJ0FybWFnZWRkb24nIHJlYWxseSB0aGUgYmVzdCBuYW1lIGZvciBhIGdvbGRmaXNoPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVf 'Nezntrqqba' ernyyl gur orfg anzr sbe n tbyqsvfu?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIsyay Armageddon'ay' eallyray ethay estbay amenay orfay ayay oldfishgay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n15 '4rm4g3dd0n' r34lly 7h3 b357 n4m3 f0r 4 g0ldf15h?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOd 'St,shrffpm' trs;;u yjr nrdy ms,r gpt s hp;fgodj?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIs '\u2200\u0279\u026f\u0250\u0183\u01ddppou' \u0279\u01dd\u0250ll\u028e \u0287\u0265\u01dd q\u01dds\u0287 u\u0250\u026f\u01dd \u025fo\u0279 \u0250 \u0183olp\u025f\u1d09s\u0265?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsI 'noddegamrA' yllaer eht tseb eman rof a ?hsifdlog\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - the\n2. labyrinthine - is\n3. ephemeral - for\n4. serendipity - really\n5. quixotic - name\n\nSentence:\nlabyrinthine 'Armageddon' serendipity mellifluous best quixotic ephemeral a goldfish?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-d4 '-a1-c4-c3-a1-b2-e1-d1-d1-e3-d3-' c4-e1-a1-b3-b3-e5 e4-c2-e1 b1-e1-d4-e4 d3-a1-c3-e1 a2-e3-c4 a1 b2-e3-b3-d1-a2-d2-d4-c2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] 'Armageddon' [MASK_2] the best name [MASK_1] a goldfish?\n\nMask_0:\n  ####     ## ##   \n   ##     ##   ##  \n   ##     ####     \n   ##      #####   \n   ##         ###  \n   ##     ##   ##  \n  ####     ## ##   \n                   \n\n\nMask_1:\n### ###    ## ##    ### ##   \n ##  ##   ##   ##    ##  ##  \n ##       ##   ##    ##  ##  \n ## ##    ##   ##    ## ##   \n ##       ##   ##    ## ##   \n ##       ##   ##    ##  ##  \n####       ## ##    #### ##  \n                             \n\n\nMask_2:\n### ##    ### ###     ##      ####      ####      ##  ##   \n ##  ##    ##  ##      ##      ##        ##       ##  ##   \n ##  ##    ##        ## ##     ##        ##       ##  ##   \n ## ##     ## ##     ##  ##    ##        ##        ## ##   \n ## ##     ##        ## ###    ##        ##         ##     \n ##  ##    ##  ##    ##  ##    ##  ##    ##  ##     ##     \n#### ##   ### ###   ###  ##   ### ###   ### ###     ##     \n                                                           \n"}
{"sentence": "Why would he go to all that effort for a free pack of ranch dressing?", "long": true, "question": true, "random": false, "base_64": "The following sentence has been encrypted using Base64.\n\nV2h5IHdvdWxkIGhlIGdvIHRvIGFsbCB0aGF0IGVmZm9ydCBmb3IgYSBmcmVlIHBhY2sgb2YgcmFuY2ggZHJlc3Npbmc/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nJul jbhyq ur tb gb nyy gung rssbeg sbe n serr cnpx bs enapu qerffvat?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nWhyay ouldway ehay ogay otay allyay atthay effortyay orfay ayay eefray ackpay ofyay anchray essingdray?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nWhy w0uld h3 g0 70 4ll 7h47 3ff0r7 f0r 4 fr33 p4ck 0f r4nch dr3551ng?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nEju epi;f jr hp yp s;; yjsy rggpty gpt s gtrr [svl pg tsmvj ftrddomh?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nM\u0265\u028e \u028donlp \u0265\u01dd \u0183o \u0287o \u0250ll \u0287\u0265\u0250\u0287 \u01dd\u025f\u025fo\u0279\u0287 \u025fo\u0279 \u0250 \u025f\u0279\u01dd\u01dd d\u0250\u0254\u029e o\u025f \u0279\u0250u\u0254\u0265 p\u0279\u01ddss\u1d09u\u0183?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyhW dluow eh og ot lla taht troffe rof a eerf kcap fo hcnar ?gnisserd\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - effort\n2. labyrinthine - would\n3. ephemeral - of\n4. mellifluous - he\n5. quixotic - free\n\nSentence:\nWhy labyrinthine mellifluous go to all that serendipity for a quixotic pack ephemeral ranch dressing?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc5-c2-e5 c5-e3-a5-b3-d1 c2-e1 b2-e3 e4-e3 a1-b3-b3 e4-c2-a1-e4 e1-a2-a2-e3-c4-e4 a2-e3-c4 a1 a2-c4-e1-e1 a4-a1-c1-a3 e3-a2 c4-a1-d3-c1-c2 d1-c4-e1-d4-d4-d2-d3-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nWhy [MASK_0] he go to all that effort for [MASK_1] [MASK_2] pack of ranch dressing?\n\nMask_0:\n##   ##    ## ##    ##  ###   ####      ### ##   \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n##   ##   ##   ##   ##   ##    ##        ##  ##  \n## # ##   ##   ##   ##   ##    ##        ##  ##  \n# ### #   ##   ##   ##   ##    ##        ##  ##  \n ## ##    ##   ##   ##   ##    ##  ##    ##  ##  \n##   ##    ## ##     ## ##    ### ###   ### ##   \n                                                 \n\n\nMask_1:\n  ##     \n   ##    \n ## ##   \n ##  ##  \n ## ###  \n ##  ##  \n###  ##  \n         \n\n\nMask_2:\n### ###   ### ##    ### ###   ### ###  \n ##  ##    ##  ##    ##  ##    ##  ##  \n ##        ##  ##    ##        ##      \n ## ##     ## ##     ## ##     ## ##   \n ##        ## ##     ##        ##      \n ##        ##  ##    ##  ##    ##  ##  \n####      #### ##   ### ###   ### ###  \n                                       \n"}
{"sentence": "kA SAO sEnYE ZGl GHpYaaxL Bej YWooSc, BVXA NCcvI FSh Pxb?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\na0EgU0FPIHNFbllFIFpHbCBHSHBZYWF4TCBCZWogWVdvb1NjLCBCVlhBIE5DY3ZJIEZTaCBQeGI/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nxN FNB fRaLR MTy TUcLnnkY Orw LJbbFp, OIKN APpiV SFu Cko?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAkay AOSay EnYEsay ZGlay aaxLGHpYay ejBay ooScYWay, ABVXay INCcvay FShay Pxbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nk4 540 53nY3 ZGl GHpY44xL B3j YW005c, BVX4 NCcv1 F5h Pxb?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nlS DSP dRmUR XH; HJ[Ussc; Nrk UEppDv, NBCS MVvbO GDj [cn?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u029e\u2200 S\u2200O s\u018eu\u2144\u018e Z\u2141l \u2141Hd\u2144\u0250\u0250x\u2142 \u15fa\u01dd\u027e \u2144MooS\u0254, \u15fa\u039bX\u2200 N\u0186\u0254\u028cI \u2132S\u0265 \u0500xq?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nAk OAS EYnEs lGZ LxaaYpHG jeB ,cSooWY AXVB IvcCN hSF ?bxP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - ywoosc\n2. labyrinthine - senye\n3. mellifluous - zgl\n4. quixotic - sao\n5. ephemeral - nccvi\n\nSentence:\nkA quixotic labyrinthine mellifluous GHpYaaxL Bej YWooSc, BVXA ephemeral FSh Pxb?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na3-a1 d4-a1-e3 d4-e1-d3-e5-e1 z-b2-b3 b2-c2-a4-e5-a1-a1-d5-b3 b1-e1-e2 e5-c5-e3-e3-d4-c1-, b1-b5-d5-a1 d3-c1-c1-b5-d2 a2-d4-c2 a4-d5-b1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] SAO [MASK_2] ZGl GHpYaaxL Bej YWooSc, BVXA NCcvI [MASK_0] Pxb?\n\nMask_0:\n### ###    ## ##    ###  ##  \n ##  ##   ##   ##    ##  ##  \n ##       ####       ##  ##  \n ## ##     #####     ## ###  \n ##           ###    ##  ##  \n ##       ##   ##    ##  ##  \n####       ## ##    ###  ##  \n                             \n\n\nMask_1:\n##  ###     ##     \n##  ##       ##    \n## ##      ## ##   \n## ##      ##  ##  \n## ###     ## ###  \n##  ##     ##  ##  \n##  ###   ###  ##  \n                   \n\n\nMask_2:\n ## ##    ### ###   ###  ##   ##  ##    ### ###  \n##   ##    ##  ##     ## ##   ##  ##     ##  ##  \n####       ##        # ## #   ##  ##     ##      \n #####     ## ##     ## ##     ## ##     ## ##   \n    ###    ##        ##  ##     ##       ##      \n##   ##    ##  ##    ##  ##     ##       ##  ##  \n ## ##    ### ###   ###  ##     ##      ### ###  \n                                                 \n"}
{"sentence": "jV fhZ bDkJUvzF jlQcEpeX m nRZQWWL Ue h JEJymvjIAsxC?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nalYgZmhaIGJEa0pVdnpGIGpsUWNFcGVYIG0gblJaUVdXTCBVZSBoIEpFSnltdmpJQXN4Qz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nwI suM oQxWHimS wyDpRcrK z aEMDJJY Hr u WRWlziwVNfkP?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\njVay fhZay UvzFbDkJay EpeXjlQcay may nRZQWWLay Ueyay hay EJymvjIAsxCJay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\njV fhZ bDkJUvzF jlQc3p3X m nRZQWWL U3 h J3Jymvj145xC?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nkB gjX nFlKIbxG k;WvR[rC , mTXWEE; Ir j KRKu,bkOSdcV?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u027e\u039b \u025f\u0265Z q\u15e1\u029e\u017f\u2229\u028cz\u2132 \u027el\u10e2\u0254\u018ed\u01ddX \u026f u\u1d1aZ\u10e2MM\u2142 \u2229\u01dd \u0265 \u017f\u018e\u017f\u028e\u026f\u028c\u027eI\u2200sx\u0186?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nVj Zhf FzvUJkDb XepEcQlj m LWWQZRn eU h ?CxsAIjvmyJEJ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - h\n2. labyrinthine - ue\n3. mellifluous - m\n4. quixotic - fhz\n5. ephemeral - nrzqwwl\n\nSentence:\njV quixotic bDkJUvzF jlQcEpeX mellifluous ephemeral labyrinthine serendipity JEJymvjIAsxC?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-b5 a2-c2-z b1-d1-a3-e2-a5-b5-z-a2 e2-b3-b4-c1-e1-a4-e1-d5 c3 d3-c4-z-b4-c5-c5-b3 a5-e1 c2 e2-e1-e2-e5-c3-b5-e2-d2-a1-d4-d5-c1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\njV fhZ bDkJUvzF [MASK_0] [MASK_1] nRZQWWL [MASK_2] h JEJymvjIAsxC?\n\nMask_0:\n   ####   ####       ## ##     ## ##    ### ###   ### ##    ### ###   ##  ##   \n    ##     ##       ##   ##   ##   ##    ##  ##    ##  ##    ##  ##   ### ##   \n    ##     ##       ##   ##   ##         ##        ##  ##    ##        ###     \n    ##     ##       ##   ##   ##         ## ##     ##  ##    ## ##      ###    \n##  ##     ##       ##   ##   ##         ##        ## ##     ##          ###   \n##  ##     ##  ##   ##  ##    ##   ##    ##  ##    ##        ##  ##   ##  ###  \n ## #     ### ###    ##  ##    ## ##    ### ###   ####      ### ###   ##   ##  \n                                                                               \n\n\nMask_1:\n##   ##  \n ## ##   \n# ### #  \n## # ##  \n##   ##  \n##   ##  \n##   ##  \n         \n\n\nMask_2:\n##  ###   ### ###  \n##   ##    ##  ##  \n##   ##    ##      \n##   ##    ## ##   \n##   ##    ##      \n##   ##    ##  ##  \n ## ##    ### ###  \n                   \n"}
{"sentence": "Gyu Fyr bfkT TFaFe JMV HoK MuJNhl QkOwvwWMtp gk elXBxkR?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nR3l1IEZ5ciBiZmtUIFRGYUZlIEpNViBIb0sgTXVKTmhsIFFrT3d2d1dNdHAgZ2sgZWxYQnhrUj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nTlh Sle osxG GSnSr WZI UbX ZhWAuy DxBjijJZgc tx ryKOkxE?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nuGyay Fyray bfkTay aFeTFay JMVay oKHay uJNhlMay OwvwWMtpQkay gkay elXBxkRyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nGyu Fyr bfk7 7F4F3 JMV H0K MuJNhl Qk0wvwWM7p gk 3lXBxkR?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nHui Gut nglY YGsGr K,B JpL ,iKMj; WlPebeE,y[ hl r;CNclT?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2141\u028en \u2132\u028e\u0279 q\u025f\u029e\u22a5 \u22a5\u2132\u0250\u2132\u01dd \u017fW\u039b Ho\ua4d8 Wn\u017fN\u0265l \u10e2\u029eO\u028d\u028c\u028dMW\u0287d \u0183\u029e \u01ddlX\u15fax\u029e\u1d1a?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nuyG ryF Tkfb eFaFT VMJ KoH lhNJuM ptMWwvwOkQ kg ?RkxBXle\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - elxbxkr\n2. mellifluous - gk\n3. labyrinthine - fyr\n4. quixotic - bfkt\n5. serendipity - qkowvwwmtp\n\nSentence:\nGyu labyrinthine quixotic TFaFe JMV HoK MuJNhl serendipity mellifluous elXBxkR?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-e5-a5 a2-e5-c4 b1-a2-a3-e4 e4-a2-a1-a2-e1 e2-c3-b5 c2-e3-a3 c3-a5-e2-d3-c2-b3 b4-a3-e3-c5-b5-c5-c5-c3-e4-a4 b2-a3 e1-b3-d5-b1-d5-a3-c4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nGyu Fyr bfkT TFaFe [MASK_1] HoK MuJNhl [MASK_2] gk [MASK_0]?\n\nMask_0:\n### ###   ####      ##  ##    ### ##    ##  ##    ##  ###   ### ##   \n ##  ##    ##       ### ##     ##  ##   ### ##    ##  ##     ##  ##  \n ##        ##        ###       ##  ##    ###      ## ##      ##  ##  \n ## ##     ##         ###      ## ##      ###     ## ##      ## ##   \n ##        ##          ###     ##  ##      ###    ## ###     ## ##   \n ##  ##    ##  ##   ##  ###    ##  ##   ##  ###   ##  ##     ##  ##  \n### ###   ### ###   ##   ##   ### ##    ##   ##   ##  ###   #### ##  \n                                                                     \n\n\nMask_1:\n   ####   ##   ##   ### ###  \n    ##     ## ##     ##  ##  \n    ##    # ### #    ##  ##  \n    ##    ## # ##    ##  ##  \n##  ##    ##   ##    ### ##  \n##  ##    ##   ##     ###    \n ## #     ##   ##      ##    \n                             \n\n\nMask_2:\n ## ##    ##  ###    ## ##    ##   ##   ### ###   ##   ##   ##   ##   ##   ##   #### ##   ### ##   \n##   ##   ##  ##    ##   ##   ##   ##    ##  ##   ##   ##   ##   ##    ## ##    # ## ##    ##  ##  \n##   ##   ## ##     ##   ##   ##   ##    ##  ##   ##   ##   ##   ##   # ### #     ##       ##  ##  \n##   ##   ## ##     ##   ##   ## # ##    ##  ##   ## # ##   ## # ##   ## # ##     ##       ##  ##  \n##   ##   ## ###    ##   ##   # ### #    ### ##   # ### #   # ### #   ##   ##     ##       ## ##   \n##  ##    ##  ##    ##   ##    ## ##      ###      ## ##     ## ##    ##   ##     ##       ##      \n ##  ##   ##  ###    ## ##    ##   ##      ##     ##   ##   ##   ##   ##   ##    ####     ####     \n                                                                                                   \n"}
{"sentence": "cRH Qp AkV LawF GyQppk JeCZ AXVEdsd qQscApkze?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nY1JIIFFwIEFrViBMYXdGIEd5UXBwayBKZUNaIEFYVkVkc2QgcVFzY0Fwa3plPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\npEU Dc NxI YnjS TlDccx WrPM NKIRqfq dDfpNcxmr?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ncRHay Qpay AkVyay awFLay GyQppkay eCZJay AXVEdsdyay ApkzeqQscay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\ncRH Qp 4kV L4wF GyQppk J3CZ 4XV3d5d qQ5c4pkz3?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nvTJ W[ SlB ;seG HuW[[l KrVX SCBRfdf wWdvS[lxr?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0254\u1d1aH \u10e2d \u2200\u029e\u039b \u2142\u0250\u028d\u2132 \u2141\u028e\u10e2dd\u029e \u017f\u01dd\u0186Z \u2200X\u039b\u018epsp b\u10e2s\u0254\u2200d\u029ez\u01dd?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nHRc pQ VkA FwaL kppQyG ZCeJ dsdEVXA ?ezkpAcsQq\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - axvedsd\n2. serendipity - akv\n3. ephemeral - jecz\n4. labyrinthine - crh\n5. mellifluous - lawf\n\nSentence:\nlabyrinthine Qp serendipity mellifluous GyQppk ephemeral quixotic qQscApkze?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc1-c4-c2 b4-a4 a1-a3-b5 b3-a1-c5-a2 b2-e5-b4-a4-a4-a3 e2-e1-c1-z a1-d5-b5-e1-d1-d4-d1 b4-b4-d4-c1-a1-a4-a3-z-e1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] Qp AkV LawF GyQppk JeCZ [MASK_1] [MASK_0]?\n\nMask_0:\n ## ##     ## ##     ## ##     ## ##      ##      ### ##    ##  ###   ### ##    ### ###  \n##   ##   ##   ##   ##   ##   ##   ##      ##      ##  ##   ##  ##    ##  ##     ##  ##  \n##   ##   ##   ##   ####      ##         ## ##     ##  ##   ## ##        ##      ##      \n##   ##   ##   ##    #####    ##         ##  ##    ##  ##   ## ##       ##       ## ##   \n##   ##   ##   ##       ###   ##         ## ###    ## ##    ## ###     ##        ##      \n##  ##    ##  ##    ##   ##   ##   ##    ##  ##    ##       ##  ##    ##  ##     ##  ##  \n ##  ##    ##  ##    ## ##     ## ##    ###  ##   ####      ##  ###   # ####    ### ###  \n                                                                                         \n\n\nMask_1:\n  ##      ##  ##    ### ###   ### ###   ### ##     ## ##    ### ##   \n   ##     ### ##     ##  ##    ##  ##    ##  ##   ##   ##    ##  ##  \n ## ##     ###       ##  ##    ##        ##  ##   ####       ##  ##  \n ##  ##     ###      ##  ##    ## ##     ##  ##    #####     ##  ##  \n ## ###      ###     ### ##    ##        ##  ##       ###    ##  ##  \n ##  ##   ##  ###     ###      ##  ##    ##  ##   ##   ##    ##  ##  \n###  ##   ##   ##      ##     ### ###   ### ##     ## ##    ### ##   \n                                                                     \n\n\nMask_2:\n ## ##    ### ##    ###  ##  \n##   ##    ##  ##    ##  ##  \n##         ##  ##    ##  ##  \n##         ## ##     ## ###  \n##         ## ##     ##  ##  \n##   ##    ##  ##    ##  ##  \n ## ##    #### ##   ###  ##  \n                             \n"}
{"sentence": "vPj jVU EdqiPHUEb nxYjx MX BFL Eti ILri XUayR iT bqLu PpL?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndlBqIGpWVSBFZHFpUEhVRWIgbnhZanggTVggQkZMIEV0aSBJTHJpIFhVYXlSIGlUIGJxTHUgUHBMPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\niCw wIH RqdvCUHRo akLwk ZK OSY Rgv VYev KHnlE vG odYh CcY?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nvPjay UjVay EdqiPHUEbyay nxYjxay MXay BFLay Etiyay ILriyay UayRXay iTyay ubqLay PpLay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nvPj jVU 3dq1PHU3b nxYjx MX BFL 371 1Lr1 XU4yR 17 bqLu PpL?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nb[k kBI Rfwo[JIRn mcUkc ,C NG; Ryo O;to CIsuT oY nw;i [[;?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u028c\u0500\u027e \u027e\u039b\u2229 \u018epb\u1d09\u0500H\u2229\u018eq ux\u2144\u027ex WX \u15fa\u2132\u2142 \u018e\u0287\u1d09 I\u2142\u0279\u1d09 X\u2229\u0250\u028e\u1d1a \u1d09\u22a5 qb\u2142n \u0500d\u2142?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njPv UVj bEUHPiqdE xjYxn XM LFB itE irLI RyaUX Ti uLqb ?LpP\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - mx\n2. serendipity - bqlu\n3. mellifluous - xuayr\n4. ephemeral - bfl\n5. quixotic - eti\n\nSentence:\nvPj jVU EdqiPHUEb nxYjx labyrinthine ephemeral quixotic ILri mellifluous iT serendipity PpL?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-a4-e2 e2-b5-a5 e1-d1-b4-d2-a4-c2-a5-e1-b1 d3-d5-e5-e2-d5 c3-d5 b1-a2-b3 e1-e4-d2 d2-b3-c4-d2 d5-a5-a1-e5-c4 d2-e4 b1-b4-b3-a5 a4-a4-b3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nvPj jVU EdqiPHUEb [MASK_0] [MASK_2] BFL Eti [MASK_1] XUayR iT bqLu PpL?\n\nMask_0:\n###  ##   ##  ##    ##  ##       ####   ##  ##   \n  ## ##   ### ##    ##  ##        ##    ### ##   \n # ## #    ###      ##  ##        ##     ###     \n ## ##      ###      ## ##        ##      ###    \n ##  ##      ###      ##      ##  ##       ###   \n ##  ##   ##  ###     ##      ##  ##    ##  ###  \n###  ##   ##   ##     ##       ## #     ##   ##  \n                                                 \n\n\nMask_1:\n  ####    ####      ### ##      ####   \n   ##      ##        ##  ##      ##    \n   ##      ##        ##  ##      ##    \n   ##      ##        ## ##       ##    \n   ##      ##        ## ##       ##    \n   ##      ##  ##    ##  ##      ##    \n  ####    ### ###   #### ##     ####   \n                                       \n\n\nMask_2:\n##   ##   ##  ##   \n ## ##    ### ##   \n# ### #    ###     \n## # ##     ###    \n##   ##      ###   \n##   ##   ##  ###  \n##   ##   ##   ##  \n                   \n"}
{"sentence": "AqR zWZi ijg zgl bPCYj ehP sitIu zFo Nkll ymTV JWcM?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nQXFSIHpXWmkgaWpnIHpnbCBiUENZaiBlaFAgc2l0SXUgekZvIE5rbGwgeW1UViBKV2NNPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nNdE mJMv vwt mty oCPLw ruC fvgVh mSb Axyy lzGI WJpZ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nAqRyay izWZay ijgyay zglay bPCYjay ehPyay itIusay ozFay Nkllay ymTVay JWcMay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4qR zWZ1 1jg zgl bPCYj 3hP 5171u zF0 Nkll ym7V JWcM?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nSwT xEXo okh xh; n[VUk rj[ doyOi xGp Ml;; u,YB KEv,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2200b\u1d1a zMZ\u1d09 \u1d09\u027e\u0183 z\u0183l q\u0500\u0186\u2144\u027e \u01dd\u0265\u0500 s\u1d09\u0287In z\u2132o N\u029ell \u028e\u026f\u22a5\u039b \u017fM\u0254W?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nRqA iZWz gji lgz jYCPb Phe uItis oFz llkN VTmy ?McWJ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - sitiu\n2. mellifluous - zwzi\n3. ephemeral - ehp\n4. labyrinthine - aqr\n5. serendipity - jwcm\n\nSentence:\nlabyrinthine mellifluous ijg zgl bPCYj ephemeral quixotic zFo Nkll ymTV JWcM?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-b4-c4 z-c5-z-d2 d2-e2-b2 z-b2-b3 b1-a4-c1-e5-e2 e1-c2-a4 d4-d2-e4-d2-a5 z-a2-e3 d3-a3-b3-b3 e5-c3-e4-b5 e2-c5-c1-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nAqR zWZi [MASK_1] zgl [MASK_2] ehP sitIu zFo Nkll ymTV [MASK_0]?\n\nMask_0:\n   ####   ##   ##    ## ##    ##   ##  \n    ##    ##   ##   ##   ##    ## ##   \n    ##    ##   ##   ##        # ### #  \n    ##    ## # ##   ##        ## # ##  \n##  ##    # ### #   ##        ##   ##  \n##  ##     ## ##    ##   ##   ##   ##  \n ## #     ##   ##    ## ##    ##   ##  \n                                       \n\n\nMask_1:\n  ####       ####    ## ##   \n   ##         ##    ##   ##  \n   ##         ##    ##       \n   ##         ##    ##  ###  \n   ##     ##  ##    ##   ##  \n   ##     ##  ##    ##   ##  \n  ####     ## #      ## ##   \n                             \n\n\nMask_2:\n### ##    ### ##     ## ##    ##  ##       ####  \n ##  ##    ##  ##   ##   ##   ##  ##        ##   \n ##  ##    ##  ##   ##        ##  ##        ##   \n ## ##     ##  ##   ##         ## ##        ##   \n ##  ##    ## ##    ##          ##      ##  ##   \n ##  ##    ##       ##   ##     ##      ##  ##   \n### ##    ####       ## ##      ##       ## #    \n                                                 \n"}
{"sentence": "TGV XdY ayD ezWKlT o qSMuV-cpyjtUs GZJFKg IMdGM?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nVEdWIFhkWSBheUQgZXpXS2xUIG8gcVNNdVYtY3B5anRVcyBHWkpGS2cgSU1kR00/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nGTI KqL nlQ rmJXyG b dFZhI-pclwgHf TMWSXt VZqTZ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nTGVay XdYay ayDyay ezWKlTyay oyay uV-cpyjtUsqSMay GZJFKgay IMdGMyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7GV XdY 4yD 3zWKl7 0 q5MuV-cpyj7U5 GZJFKg 1MdGM?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nYHB CfU suF rxEL;Y p wD,iB-v[ukyId HXKGLh O,fH,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u22a5\u2141\u039b Xp\u2144 \u0250\u028e\u15e1 \u01ddzM\ua4d8l\u22a5 o bSWn\u039b-\u0254d\u028e\u027e\u0287\u2229s \u2141Z\u017f\u2132\ua4d8\u0183 IWp\u2141W?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nVGT YdX Dya TlKWze o sUtjypc-VuMSq gKFJZG ?MGdMI\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - qsmuvcpyjtus\n2. mellifluous - tgv\n3. serendipity - ezwklt\n4. ephemeral - imdgm\n5. labyrinthine - gzjfkg\n\nSentence:\nmellifluous XdY ayD serendipity o quixotic labyrinthine IMdGM?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-b2-b5 d5-d1-e5 a1-e5-d1 e1-z-c5-a3-b3-e4 e3 b4-d4-c3-a5-b5-c1-a4-e5-e2-e4-a5-d4 b2-z-e2-a2-a3-b2 d2-c3-d1-b2-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nTGV [MASK_1] [MASK_0] [MASK_2] o qSMuV-cpyjtUs GZJFKg IMdGM?\n\nMask_0:\n  ##      ##  ##    ### ##   \n   ##     ##  ##     ##  ##  \n ## ##    ##  ##     ##  ##  \n ##  ##    ## ##     ##  ##  \n ## ###     ##       ##  ##  \n ##  ##     ##       ##  ##  \n###  ##     ##      ### ##   \n                             \n\n\nMask_1:\n##  ##    ### ##    ##  ##   \n### ##     ##  ##   ##  ##   \n ###       ##  ##   ##  ##   \n  ###      ##  ##    ## ##   \n   ###     ##  ##     ##     \n##  ###    ##  ##     ##     \n##   ##   ### ##      ##     \n                             \n\n\nMask_2:\n### ###   ### ##    ##   ##   ##  ###   ####      #### ##  \n ##  ##   ##  ##    ##   ##   ##  ##     ##       # ## ##  \n ##          ##     ##   ##   ## ##      ##         ##     \n ## ##      ##      ## # ##   ## ##      ##         ##     \n ##        ##       # ### #   ## ###     ##         ##     \n ##  ##   ##  ##     ## ##    ##  ##     ##  ##     ##     \n### ###   # ####    ##   ##   ##  ###   ### ###    ####    \n                                                           \n"}
{"sentence": "VuH t sSNH WJm eNumwe uQ Age PeO ZWCGN bRPTCEHGy?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nVnVIIHQgc1NOSCBXSm0gZU51bXdlIHVRIEFnZSBQZU8gWldDR04gYlJQVENFSEd5Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nIhU g fFAU JWz rAhzjr hD Ntr CrB MJPTA oECGPRUTl?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nuHVay tay sSNHay WJmay eNumweyay uQyay Ageyay eOPay ZWCGNay EHGybRPTCay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nVuH 7 55NH WJm 3Numw3 uQ 4g3 P30 ZWCGN bRP7C3HGy?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nBiJ y dDMJ EK, rMi,er iW Shr [rP XEVHM nT[YVRJHu?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u039bnH \u0287 sSNH M\u017f\u026f \u01ddNn\u026f\u028d\u01dd n\u10e2 \u2200\u0183\u01dd \u0500\u01ddO ZM\u0186\u2141N q\u1d1a\u0500\u22a5\u0186\u018eH\u2141\u028e?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nHuV t HNSs mJW ewmuNe Qu egA OeP NGCWZ ?yGHECTPRb\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - brptcehgy\n2. quixotic - peo\n3. serendipity - t\n4. mellifluous - ssnh\n5. ephemeral - wjm\n\nSentence:\nVuH serendipity mellifluous ephemeral eNumwe uQ Age quixotic ZWCGN bRPTCEHGy?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb5-a5-c2 e4 d4-d4-d3-c2 c5-e2-c3 e1-d3-a5-c3-c5-e1 a5-b4 a1-b2-e1 a4-e1-e3 z-c5-c1-b2-d3 b1-c4-a4-e4-c1-e1-c2-b2-e5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nVuH [MASK_0] sSNH WJm eNumwe uQ [MASK_1] PeO ZWCGN [MASK_2]?\n\nMask_0:\n#### ##  \n# ## ##  \n  ##     \n  ##     \n  ##     \n  ##     \n ####    \n         \n\n\nMask_1:\n  ##       ## ##    ### ###  \n   ##     ##   ##    ##  ##  \n ## ##    ##         ##      \n ##  ##   ##  ###    ## ##   \n ## ###   ##   ##    ##      \n ##  ##   ##   ##    ##  ##  \n###  ##    ## ##    ### ###  \n                             \n\n\nMask_2:\n### ##    ### ##    ### ##    #### ##    ## ##    ### ###   ###  ##    ## ##    ##  ##   \n ##  ##    ##  ##    ##  ##   # ## ##   ##   ##    ##  ##    ##  ##   ##   ##   ##  ##   \n ##  ##    ##  ##    ##  ##     ##      ##         ##        ##  ##   ##        ##  ##   \n ## ##     ## ##     ##  ##     ##      ##         ## ##     ## ###   ##  ###    ## ##   \n ##  ##    ## ##     ## ##      ##      ##         ##        ##  ##   ##   ##     ##     \n ##  ##    ##  ##    ##         ##      ##   ##    ##  ##    ##  ##   ##   ##     ##     \n### ##    #### ##   ####       ####      ## ##    ### ###   ###  ##    ## ##      ##     \n                                                                                         \n"}
{"sentence": "zeob dQBcp rTL zUBDZp zyuFo OPfcElFx TM nXC OOWNQ UMSRqp EFy tNyHT?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nemVvYiBkUUJjcCByVEwgelVCRFpwIHp5dUZvIE9QZmNFbEZ4IFRNIG5YQyBPT1dOUSBVTVNScXAgRUZ5IHROeUhUPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nmrbo qDOpc eGY mHOQMc mlhSb BCspRySk GZ aKP BBJAD HZFEdc RSl gAlUG?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neobzay dQBcpay rTLay UBDZpzay uFozyay OPfcElFxyay TMay nXCay OOWNQyay UMSRqpyay EFyyay tNyHTay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nz30b dQBcp r7L zUBDZp zyuF0 0Pfc3lFx 7M nXC 00WNQ UM5Rqp 3Fy 7NyH7?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nxrpn fWNv[ tY; xINFX[ xuiGp P[gvR;Gc Y, mCV PPEMW I,DTw[ RGu yMuJY?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nz\u01ddoq p\u10e2\u15fa\u0254d \u0279\u22a5\u2142 z\u2229\u15fa\u15e1Zd z\u028en\u2132o O\u0500\u025f\u0254\u018el\u2132x \u22a5W uX\u0186 OOMN\u10e2 \u2229WS\u1d1abd \u018e\u2132\u028e \u0287N\u028eH\u22a5?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nboez pcBQd LTr pZDBUz oFuyz xFlEcfPO MT CXn QNWOO pqRSMU yFE ?THyNt\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - zyufo\n2. quixotic - opfcelfx\n3. labyrinthine - tnyht\n4. ephemeral - dqbcp\n5. serendipity - zubdzp\n\nSentence:\nzeob ephemeral rTL serendipity mellifluous quixotic TM nXC OOWNQ UMSRqp EFy tNyHT?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-e1-e3-b1 d1-b4-b1-c1-a4 c4-e4-b3 z-a5-b1-d1-z-a4 z-e5-a5-a2-e3 e3-a4-a2-c1-e1-b3-a2-d5 e4-c3 d3-d5-c1 e3-e3-c5-d3-b4 a5-c3-d4-c4-b4-a4 e1-a2-e5 e4-d3-e5-c2-e4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nzeob dQBcp [MASK_0] zUBDZp [MASK_2] OPfcElFx TM [MASK_1] OOWNQ UMSRqp EFy tNyHT?\n\nMask_0:\n### ##    #### ##   ####     \n ##  ##   # ## ##    ##      \n ##  ##     ##       ##      \n ## ##      ##       ##      \n ## ##      ##       ##      \n ##  ##     ##       ##  ##  \n#### ##    ####     ### ###  \n                             \n\n\nMask_1:\n###  ##   ##  ##     ## ##   \n  ## ##   ### ##    ##   ##  \n # ## #    ###      ##       \n ## ##      ###     ##       \n ##  ##      ###    ##       \n ##  ##   ##  ###   ##   ##  \n###  ##   ##   ##    ## ##   \n                             \n\n\nMask_2:\n### ##    ##  ##    ##  ###   ### ###    ## ##   \n##  ##    ##  ##    ##   ##    ##  ##   ##   ##  \n   ##     ##  ##    ##   ##    ##       ##   ##  \n  ##       ## ##    ##   ##    ## ##    ##   ##  \n ##         ##      ##   ##    ##       ##   ##  \n##  ##      ##      ##   ##    ##       ##   ##  \n# ####      ##       ## ##    ####       ## ##   \n                                                 \n"}
{"sentence": "aku'm tzTjfJl fH tNy VVDgk TBnR vxPL Rm qfbuG?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nYWt1J20gdHpUamZKbCBmSCB0TnkgVlZEZ2sgVEJuUiB2eFBMIFJtIHFmYnVHPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nnxh'z gmGwsWy sU gAl IIQtx GOaE ikCY Ez dsohT?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\naku'myay tzTjfJlay fHay tNyay VVDgkay TBnRay vxPLay Rmay uGqfbay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n4ku'm 7z7jfJl fH 7Ny VVDgk 7BnR vxPL Rm qfbuG?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nsli', yxYkgK; gJ yMu BBFhl YNmT bc[; T, wgniH?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0250\u029en'\u026f \u0287z\u22a5\u027e\u025f\u017fl \u025fH \u0287N\u028e \u039b\u039b\u15e1\u0183\u029e \u22a5\u15fau\u1d1a \u028cx\u0500\u2142 \u1d1a\u026f b\u025fqn\u2141?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nm'uka lJfjTzt Hf yNt kgDVV RnBT LPxv mR ?Gubfq\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - tztjfjl\n2. labyrinthine - vvdgk\n3. serendipity - qfbug\n4. quixotic - tny\n5. mellifluous - vxpl\n\nSentence:\naku'm ephemeral fH quixotic labyrinthine TBnR mellifluous Rm qfbuG?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na1-a3-a5-'-c3 e4-z-e4-e2-a2-e2-b3 a2-c2 e4-d3-e5 b5-b5-d1-b2-a3 e4-b1-d3-c4 b5-d5-a4-b3 c4-c3 b4-a2-b1-a5-b2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\naku'm tzTjfJl fH [MASK_0] [MASK_2] TBnR [MASK_1] Rm qfbuG?\n\nMask_0:\n#### ##   ###  ##   ##  ##   \n# ## ##     ## ##   ##  ##   \n  ##       # ## #   ##  ##   \n  ##       ## ##     ## ##   \n  ##       ##  ##     ##     \n  ##       ##  ##     ##     \n ####     ###  ##     ##     \n                             \n\n\nMask_1:\n### ###   ##  ##    ### ##    ####     \n ##  ##   ### ##     ##  ##    ##      \n ##  ##    ###       ##  ##    ##      \n ##  ##     ###      ##  ##    ##      \n ### ##      ###     ## ##     ##      \n  ###     ##  ###    ##        ##  ##  \n   ##     ##   ##   ####      ### ###  \n                                       \n\n\nMask_2:\n### ###   ### ###   ### ##     ## ##    ##  ###  \n ##  ##    ##  ##    ##  ##   ##   ##   ##  ##   \n ##  ##    ##  ##    ##  ##   ##        ## ##    \n ##  ##    ##  ##    ##  ##   ##  ###   ## ##    \n ### ##    ### ##    ##  ##   ##   ##   ## ###   \n  ###       ###      ##  ##   ##   ##   ##  ##   \n   ##        ##     ### ##     ## ##    ##  ###  \n                                                 \n"}
{"sentence": "qjR Gmp MSrTyk zDzBD NQ rQlQyN rg, mncwZ OTxbeGLczM CSCp aIjgtmDx axkiKYBHd?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncWpSIEdtcCBNU3JUeWsgekR6QkQgTlEgclFsUXlOIHJnLCBtbmN3WiBPVHhiZUdMY3pNIENTQ3AgYUlqZ3RtRHggYXhraUtZQkhkPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ndwE Tzc ZFeGlx mQmOQ AD eDyDlA et, zapjM BGkorTYpmZ PFPc nVwtgzQk nkxvXLOUq?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nqjRay Gmpay MSrTykay zDzBDay NQay rQlQyNay rgay, mncwZay OTxbeGLczMyay CSCpay aIjgtmDxyay axkiKYBHdyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nqjR Gmp M5r7yk zDzBD NQ rQlQyN rg, mncwZ 07xb3GLczM C5Cp 41jg7mDx 4xk1KYBHd?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nwkT H,[ ,DtYul xFxNF MW tW;WuM th, ,mveX PYcnrH;vx, VDV[ sOkhy,Fc scloLUNJf?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nb\u027e\u1d1a \u2141\u026fd WS\u0279\u22a5\u028e\u029e z\u15e1z\u15fa\u15e1 N\u10e2 \u0279\u10e2l\u10e2\u028eN \u0279\u0183, \u026fu\u0254\u028dZ O\u22a5xq\u01dd\u2141\u2142\u0254zW \u0186S\u0186d \u0250I\u027e\u0183\u0287\u026f\u15e1x \u0250x\u029e\u1d09\ua4d8\u2144\u15faHp?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nRjq pmG kyTrSM DBzDz QN NyQlQr ,gr Zwcnm MzcLGebxTO pCSC xDmtgjIa ?dHBYKikxa\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - rg\n2. ephemeral - otxbeglczm\n3. quixotic - mncwz\n4. mellifluous - msrtyk\n5. labyrinthine - zdzbd\n\nSentence:\nqjR Gmp mellifluous labyrinthine NQ rQlQyN rg, quixotic ephemeral CSCp aIjgtmDx axkiKYBHd?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb4-e2-c4 b2-c3-a4 c3-d4-c4-e4-e5-a3 z-d1-z-b1-d1 d3-b4 c4-b4-b3-b4-e5-d3 c4-b2-, c3-d3-c1-c5-z e3-e4-d5-b1-e1-b2-b3-c1-z-c3 c1-d4-c1-a4 a1-d2-e2-b2-e4-c3-d1-d5 a1-d5-a3-d2-a3-e5-b1-c2-d1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nqjR [MASK_0] MSrTyk zDzBD [MASK_2] rQlQyN rg, mncwZ OTxbeGLczM [MASK_1] aIjgtmDx axkiKYBHd?\n\nMask_0:\n ## ##    ##   ##   ### ##   \n##   ##    ## ##     ##  ##  \n##        # ### #    ##  ##  \n##  ###   ## # ##    ##  ##  \n##   ##   ##   ##    ## ##   \n##   ##   ##   ##    ##      \n ## ##    ##   ##   ####     \n                             \n\n\nMask_1:\n ## ##     ## ##     ## ##    ### ##   \n##   ##   ##   ##   ##   ##    ##  ##  \n##        ####      ##         ##  ##  \n##         #####    ##         ##  ##  \n##            ###   ##         ## ##   \n##   ##   ##   ##   ##   ##    ##      \n ## ##     ## ##     ## ##    ####     \n                                       \n\n\nMask_2:\n###  ##    ## ##   \n  ## ##   ##   ##  \n # ## #   ##   ##  \n ## ##    ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##  ##   \n###  ##    ##  ##  \n                   \n"}
{"sentence": "tm AzJ poKZL DY bQLefBVW Qm jdFHMINF, ERZRv jrjws tOO aZ?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ndG0gQXpKIHBvS1pMIERZIGJRTGVmQlZXIFFtIGpkRkhNSU5GLCBFUlpSdiBqcmp3cyB0T08gYVo/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ngz NmW cbXMY QL oDYrsOIJ Dz wqSUZVAS, REMEi wewjf gBB nM?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ntmay AzJyay oKZLpay DYay efBVWbQLay Qmay INFjdFHMay, ERZRvyay jrjwsay OOtay aZyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n7m 4zJ p0KZL DY bQL3fBVW Qm jdFHM1NF, 3RZRv jrjw5 700 4Z?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ny, SxK [pLX; FU nW;rgNBE W, kfGJ,OMG, RTXTb ktked yPP sX?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0287\u026f \u2200z\u017f do\ua4d8Z\u2142 \u15e1\u2144 q\u10e2\u2142\u01dd\u025f\u15fa\u039bM \u10e2\u026f \u027ep\u2132HWIN\u2132, \u018e\u1d1aZ\u1d1a\u028c \u027e\u0279\u027e\u028ds \u0287OO \u0250Z?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nmt JzA LZKop YD WVBfeLQb mQ ,FNIMHFdj vRZRE swjrj OOt ?Za\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - too\n2. labyrinthine - azj\n3. ephemeral - bqlefbvw\n4. mellifluous - dy\n5. quixotic - az\n\nSentence:\ntm labyrinthine poKZL mellifluous ephemeral Qm jdFHMINF, ERZRv jrjws serendipity aZ?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne4-c3 a1-z-e2 a4-e3-a3-z-b3 d1-e5 b1-b4-b3-e1-a2-b1-b5-c5 b4-c3 e2-d1-a2-c2-c3-d2-d3-a2-, e1-c4-z-c4-b5 e2-c4-e2-c5-d4 e4-e3-e3 a1-z-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] [MASK_2] poKZL DY bQLefBVW Qm jdFHMINF, [MASK_1] jrjws tOO aZ?\n\nMask_0:\n#### ##   ##   ##  \n# ## ##    ## ##   \n  ##      # ### #  \n  ##      ## # ##  \n  ##      ##   ##  \n  ##      ##   ##  \n ####     ##   ##  \n                   \n\n\nMask_1:\n### ###   ### ##    ### ##    ### ##    ### ###  \n ##  ##    ##  ##   ##  ##     ##  ##    ##  ##  \n ##        ##  ##      ##      ##  ##    ##  ##  \n ## ##     ## ##      ##       ## ##     ##  ##  \n ##        ## ##     ##        ## ##     ### ##  \n ##  ##    ##  ##   ##  ##     ##  ##     ###    \n### ###   #### ##   # ####    #### ##      ##    \n                                                 \n\n\nMask_2:\n  ##      ### ##       ####  \n   ##     ##  ##        ##   \n ## ##       ##         ##   \n ##  ##     ##          ##   \n ## ###    ##       ##  ##   \n ##  ##   ##  ##    ##  ##   \n###  ##   # ####     ## #    \n                             \n"}
{"sentence": "eQ elGgR m xrw dkcLFr RYP zkcg owIq Am SmUHB fuonG cUwM?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZVEgZWxHZ1IgbSB4cncgZGtjTEZyIFJZUCB6a2NnIG93SXEgQW0gU21VSEIgZnVvbkcgY1V3TT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nrD ryTtE z kej qxpYSe ELC mxpt bjVd Nz FzHUO shbaT pHjZ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neQyay elGgRyay may xrway dkcLFray RYPay zkcgay owIqyay Amyay UHBSmay uonGfay UwMcay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3Q 3lGgR m xrw dkcLFr RYP zkcg 0w1q 4m 5mUHB fu0nG cUwM?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nrW r;HhT , cte flv;Gt TU[ xlvh peOw S, D,IJN gipmH vIe,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u01dd\u10e2 \u01ddl\u2141\u0183\u1d1a \u026f x\u0279\u028d p\u029e\u0254\u2142\u2132\u0279 \u1d1a\u2144\u0500 z\u029e\u0254\u0183 o\u028dIb \u2200\u026f S\u026f\u2229H\u15fa \u025fnou\u2141 \u0254\u2229\u028dW?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nQe RgGle m wrx rFLckd PYR gckz qIwo mA BHUmS Gnouf ?MwUc\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - am\n2. mellifluous - ryp\n3. ephemeral - cuwm\n4. labyrinthine - smuhb\n5. serendipity - elggr\n\nSentence:\neQ serendipity m xrw dkcLFr mellifluous zkcg owIq quixotic labyrinthine fuonG cUwM?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-b4 e1-b3-b2-b2-c4 c3 d5-c4-c5 d1-a3-c1-b3-a2-c4 c4-e5-a4 z-a3-c1-b2 e3-c5-d2-b4 a1-c3 d4-c3-a5-c2-b1 a2-a5-e3-d3-b2 c1-a5-c5-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\neQ elGgR m xrw dkcLFr [MASK_0] zkcg [MASK_2] Am [MASK_1] fuonG cUwM?\n\nMask_0:\n### ##    ##  ##    ### ##   \n ##  ##   ##  ##     ##  ##  \n ##  ##   ##  ##     ##  ##  \n ## ##     ## ##     ##  ##  \n ## ##      ##       ## ##   \n ##  ##     ##       ##      \n#### ##     ##      ####     \n                             \n\n\nMask_1:\n ## ##    ##   ##   ##  ###   ###  ##   ### ##   \n##   ##    ## ##    ##   ##    ##  ##    ##  ##  \n####      # ### #   ##   ##    ##  ##    ##  ##  \n #####    ## # ##   ##   ##    ## ###    ## ##   \n    ###   ##   ##   ##   ##    ##  ##    ##  ##  \n##   ##   ##   ##   ##   ##    ##  ##    ##  ##  \n ## ##    ##   ##    ## ##    ###  ##   ### ##   \n                                                 \n\n\nMask_2:\n ## ##    ##   ##     ####     ## ##   \n##   ##   ##   ##      ##     ##   ##  \n##   ##   ##   ##      ##     ##   ##  \n##   ##   ## # ##      ##     ##   ##  \n##   ##   # ### #      ##     ##   ##  \n##   ##    ## ##       ##     ##  ##   \n ## ##    ##   ##     ####     ##  ##  \n                                       \n"}
{"sentence": "IOOPl bTx FEkC Z brRd nRXP NIMht yn DSYxa wlN?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSU9PUGwgYlR4IEZFa0MgWiBiclJkIG5SWFAgTklNaHQgeW4gRFNZeGEgd2xOPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nVBBCy oGk SRxP M oeEq aEKC AVZug la QFLkn jyA?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nIOOPlyay bTxay EkCFay Zay brRday nRXPay IMhtNay ynay aDSYxay wlNay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n100Pl b7x F3kC Z brRd nRXP N1Mh7 yn D5Yx4 wlN?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nOPP[; nYc GRlV X ntTf mTC[ MO,jy um FDUcs e;M?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nIOO\u0500l q\u22a5x \u2132\u018e\u029e\u0186 Z q\u0279\u1d1ap u\u1d1aX\u0500 NIW\u0265\u0287 \u028eu \u15e1S\u2144x\u0250 \u028dlN?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nlPOOI xTb CkEF Z dRrb PXRn thMIN ny axYSD ?Nlw\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - fekc\n2. ephemeral - nimht\n3. serendipity - ioopl\n4. quixotic - dsyxa\n5. mellifluous - btx\n\nSentence:\nserendipity mellifluous labyrinthine Z brRd nRXP ephemeral yn quixotic wlN?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd2-e3-e3-a4-b3 b1-e4-d5 a2-e1-a3-c1 z b1-c4-c4-d1 d3-c4-d5-a4 d3-d2-c3-c2-e4 e5-d3 d1-d4-e5-d5-a1 c5-b3-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nIOOPl bTx [MASK_2] [MASK_1] [MASK_0] nRXP NIMht yn DSYxa wlN?\n\nMask_0:\n### ##    ### ##    ### ##    ### ##   \n ##  ##    ##  ##    ##  ##    ##  ##  \n ##  ##    ##  ##    ##  ##    ##  ##  \n ## ##     ## ##     ## ##     ##  ##  \n ##  ##    ## ##     ## ##     ##  ##  \n ##  ##    ##  ##    ##  ##    ##  ##  \n### ##    #### ##   #### ##   ### ##   \n                                       \n\n\nMask_1:\n### ##   \n##  ##   \n   ##    \n  ##     \n ##      \n##  ##   \n# ####   \n         \n\n\nMask_2:\n### ###   ### ###   ##  ###    ## ##   \n ##  ##    ##  ##   ##  ##    ##   ##  \n ##        ##       ## ##     ##       \n ## ##     ## ##    ## ##     ##       \n ##        ##       ## ###    ##       \n ##        ##  ##   ##  ##    ##   ##  \n####      ### ###   ##  ###    ## ##   \n                                       \n"}
{"sentence": "qMbW yPVk lI GAnoGJsX CVX xfp zMlwIQx Kib BLWbQV?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncU1iVyB5UFZrIGxJIEdBbm9HSnNYIENWWCB4ZnAgek1sd0lReCBLaWIgQkxXYlFWPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ndZoJ lCIx yV TNabTWfK PIK ksc mZyjVDk Xvo OYJoDI?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nqMbWay yPVkay Ilay AnoGJsXGay CVXay xfpay IQxzMlway ibKay BLWbQVay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nqMbW yPVk l1 G4n0GJ5X CVX xfp zMlw1Qx K1b BLWbQV?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nw,nE u[Bl ;O HSmpHKdC VBC cg[ x,;eOWc Lon N;EnWB?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nbWqM \u028e\u0500\u039b\u029e lI \u2141\u2200uo\u2141\u017fsX \u0186\u039bX x\u025fd zWl\u028dI\u10e2x \ua4d8\u1d09q \u15fa\u2142Mq\u10e2\u039b?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nWbMq kVPy Il XsJGonAG XVC pfx xQIwlMz biK ?VQbWLB\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - ganogjsx\n2. ephemeral - li\n3. mellifluous - ypvk\n4. labyrinthine - kib\n5. serendipity - xfp\n\nSentence:\nqMbW mellifluous ephemeral quixotic CVX serendipity zMlwIQx labyrinthine BLWbQV?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb4-c3-b1-c5 e5-a4-b5-a3 b3-d2 b2-a1-d3-e3-b2-e2-d4-d5 c1-b5-d5 d5-a2-a4 z-c3-b3-c5-d2-b4-d5 a3-d2-b1 b1-b3-c5-b1-b4-b5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nqMbW [MASK_1] lI GAnoGJsX CVX xfp [MASK_2] Kib [MASK_0]?\n\nMask_0:\n### ##    ####      ##   ##   ### ##     ## ##    ### ###  \n ##  ##    ##       ##   ##    ##  ##   ##   ##    ##  ##  \n ##  ##    ##       ##   ##    ##  ##   ##   ##    ##  ##  \n ## ##     ##       ## # ##    ## ##    ##   ##    ##  ##  \n ##  ##    ##       # ### #    ##  ##   ##   ##    ### ##  \n ##  ##    ##  ##    ## ##     ##  ##   ##  ##      ###    \n### ##    ### ###   ##   ##   ### ##     ##  ##      ##    \n                                                           \n\n\nMask_1:\n##  ##    ### ##    ### ###   ##  ###  \n##  ##     ##  ##    ##  ##   ##  ##   \n##  ##     ##  ##    ##  ##   ## ##    \n ## ##     ##  ##    ##  ##   ## ##    \n  ##       ## ##     ### ##   ## ###   \n  ##       ##         ###     ##  ##   \n  ##      ####         ##     ##  ###  \n                                       \n\n\nMask_2:\n### ##    ##   ##   ####      ##   ##     ####     ## ##    ##  ##   \n##  ##     ## ##     ##       ##   ##      ##     ##   ##   ### ##   \n   ##     # ### #    ##       ##   ##      ##     ##   ##    ###     \n  ##      ## # ##    ##       ## # ##      ##     ##   ##     ###    \n ##       ##   ##    ##       # ### #      ##     ##   ##      ###   \n##  ##    ##   ##    ##  ##    ## ##       ##     ##  ##    ##  ###  \n# ####    ##   ##   ### ###   ##   ##     ####     ##  ##   ##   ##  \n                                                                     \n"}
{"sentence": "nVg nIHx Gsh kpQ BN PDX FWm PnqlBy oFEq cIDncY vLC?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nblZnIG5JSHggR3NoIGtwUSBCTiBQRFggRldtIFBucWxCeSBvRkVxIGNJRG5jWSB2TEM/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\naIt aVUk Tfu xcD OA CQK SJz CadyOl bSRd pVQapL iYP?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nnVgay IHxnay Gshay kpQay BNay PDXay FWmay PnqlByay oFEqyay IDncYcay vLCay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nnVg n1Hx G5h kpQ BN PDX FWm PnqlBy 0F3q c1DncY vLC?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nmBh mOJc Hdj l[W NM [FC GE, [mw;Nu pGRw vOFmvU b;V?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nu\u039b\u0183 uIHx \u2141s\u0265 \u029ed\u10e2 \u15faN \u0500\u15e1X \u2132M\u026f \u0500ubl\u15fa\u028e o\u2132\u018eb \u0254I\u15e1u\u0254\u2144 \u028c\u2142\u0186?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\ngVn xHIn hsG Qpk NB XDP mWF yBlqnP qEFo YcnDIc ?CLv\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - kpq\n2. quixotic - fwm\n3. ephemeral - nihx\n4. labyrinthine - pnqlby\n5. serendipity - nvg\n\nSentence:\nserendipity ephemeral Gsh mellifluous BN PDX quixotic labyrinthine oFEq cIDncY vLC?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd3-b5-b2 d3-d2-c2-d5 b2-d4-c2 a3-a4-b4 b1-d3 a4-d1-d5 a2-c5-c3 a4-d3-b4-b3-b1-e5 e3-a2-e1-b4 c1-d2-d1-d3-c1-e5 b5-b3-c1-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nnVg nIHx Gsh kpQ BN PDX FWm [MASK_2] [MASK_0] [MASK_1] vLC?\n\nMask_0:\n ## ##    ### ###   ### ###    ## ##   \n##   ##    ##  ##    ##  ##   ##   ##  \n##   ##    ##        ##       ##   ##  \n##   ##    ## ##     ## ##    ##   ##  \n##   ##    ##        ##       ##   ##  \n##   ##    ##        ##  ##   ##  ##   \n ## ##    ####      ### ###    ##  ##  \n                                       \n\n\nMask_1:\n ## ##      ####    ### ##    ###  ##    ## ##    ##  ##   \n##   ##      ##      ##  ##     ## ##   ##   ##   ##  ##   \n##           ##      ##  ##    # ## #   ##        ##  ##   \n##           ##      ##  ##    ## ##    ##         ## ##   \n##           ##      ##  ##    ##  ##   ##          ##     \n##   ##      ##      ##  ##    ##  ##   ##   ##     ##     \n ## ##      ####    ### ##    ###  ##    ## ##      ##     \n                                                           \n\n\nMask_2:\n### ##    ###  ##    ## ##    ####      ### ##    ##  ##   \n ##  ##     ## ##   ##   ##    ##        ##  ##   ##  ##   \n ##  ##    # ## #   ##   ##    ##        ##  ##   ##  ##   \n ##  ##    ## ##    ##   ##    ##        ## ##     ## ##   \n ## ##     ##  ##   ##   ##    ##        ##  ##     ##     \n ##        ##  ##   ##  ##     ##  ##    ##  ##     ##     \n####      ###  ##    ##  ##   ### ###   ### ##      ##     \n                                                           \n"}
{"sentence": "ZtVi Uok y jzcaXQLs KD mF, oUJ ZWE Rdbxi Fv Dw yK OCMTSeqW?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nWnRWaSBVb2sgeSBqemNhWFFMcyBLRCBtRiwgb1VKIFpXRSBSZGJ4aSBGdiBEdyB5SyBPQ01UU2VxVz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nMgIv Hbx l wmpnKDYf XQ zS, bHW MJR Eqokv Si Qj lX BPZGFrdJ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\niZtVay Uokyay yay aXQLsjzcay KDay mFay, oUJyay EZWay iRdbxay Fvay Dway yKay OCMTSeqWyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nZ7V1 U0k y jzc4XQL5 KD mF, 0UJ ZW3 Rdbx1 Fv Dw yK 0CM753qW?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nXyBo Ipl u kxvsCW;d LF ,G, pIK XER Tfnco Gb Fe uL PV,YDrwE?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nZ\u0287\u039b\u1d09 \u2229o\u029e \u028e \u027ez\u0254\u0250X\u10e2\u2142s \ua4d8\u15e1 \u026f\u2132, o\u2229\u017f ZM\u018e \u1d1apqx\u1d09 \u2132\u028c \u15e1\u028d \u028e\ua4d8 O\u0186W\u22a5S\u01ddbM?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\niVtZ koU y sLQXaczj DK ,Fm JUo EWZ ixbdR vF wD Ky ?WqeSTMCO\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - y\n2. serendipity - uok\n3. mellifluous - mf\n4. labyrinthine - ztvi\n5. quixotic - fv\n\nSentence:\nlabyrinthine serendipity ephemeral jzcaXQLs KD mF, oUJ ZWE Rdbxi quixotic Dw yK OCMTSeqW?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nz-e4-b5-d2 a5-e3-a3 e5 e2-z-c1-a1-d5-b4-b3-d4 a3-d1 c3-a2-, e3-a5-e2 z-c5-e1 c4-d1-b1-d5-d2 a2-b5 d1-c5 e5-a3 e3-c1-c3-e4-d4-e1-b4-c5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nZtVi Uok [MASK_1] jzcaXQLs [MASK_2] mF, oUJ ZWE Rdbxi Fv [MASK_0] yK OCMTSeqW?\n\nMask_0:\n### ##    ##   ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n ##  ##   ## # ##  \n ##  ##   # ### #  \n ##  ##    ## ##   \n### ##    ##   ##  \n                   \n\n\nMask_1:\n##  ##   \n##  ##   \n##  ##   \n ## ##   \n  ##     \n  ##     \n  ##     \n         \n\n\nMask_2:\n##  ###   ### ##   \n##  ##     ##  ##  \n## ##      ##  ##  \n## ##      ##  ##  \n## ###     ##  ##  \n##  ##     ##  ##  \n##  ###   ### ##   \n                   \n"}
{"sentence": "gxPq UYDYhm Mve Vt pO ijW qgRN s PnGniF XT FncR vPH?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZ3hQcSBVWURZaG0gTXZlIFZ0IHBPIGlqVyBxZ1JOIHMgUG5HbmlGIFhUIEZuY1IgdlBIPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ntkCd HLQLuz Zir Ig cB vwJ dtEA f CaTavS KG SapE iCU?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\ngxPqay UYDYhmyay eMvay Vtay Opay ijWyay qgRNay say iFPnGnay XTay FncRay vPHay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\ngxPq UYDYhm Mv3 V7 p0 1jW qgRN 5 PnGn1F X7 FncR vPH?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nhc[w IUFUj, ,br By [P okE whTM d [mHmoG CY GmvT b[J?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0183x\u0500b \u2229\u2144\u15e1\u2144\u0265\u026f W\u028c\u01dd \u039b\u0287 dO \u1d09\u027eM b\u0183\u1d1aN s \u0500u\u2141u\u1d09\u2132 X\u22a5 \u2132u\u0254\u1d1a \u028c\u0500H?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nqPxg mhYDYU evM tV Op Wji NRgq s FinGnP TX RcnF ?HPv\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - vph\n2. mellifluous - po\n3. labyrinthine - fncr\n4. ephemeral - ijw\n5. serendipity - mve\n\nSentence:\ngxPq UYDYhm serendipity Vt mellifluous ephemeral qgRN s PnGniF XT labyrinthine vPH?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb2-d5-a4-b4 a5-e5-d1-e5-c2-c3 c3-b5-e1 b5-e4 a4-e3 d2-e2-c5 b4-b2-c4-d3 d4 a4-d3-b2-d3-d2-a2 d5-e4 a2-d3-c1-c4 b5-a4-c2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] UYDYhm Mve Vt pO [MASK_0] qgRN s PnGniF [MASK_2] FncR vPH?\n\nMask_0:\n  ####       ####   ##   ##  \n   ##         ##    ##   ##  \n   ##         ##    ##   ##  \n   ##         ##    ## # ##  \n   ##     ##  ##    # ### #  \n   ##     ##  ##     ## ##   \n  ####     ## #     ##   ##  \n                             \n\n\nMask_1:\n ## ##    ##  ##    ### ##     ## ##   \n##   ##   ### ##     ##  ##   ##   ##  \n##         ###       ##  ##   ##   ##  \n##  ###     ###      ##  ##   ##   ##  \n##   ##      ###     ## ##    ##   ##  \n##   ##   ##  ###    ##       ##  ##   \n ## ##    ##   ##   ####       ##  ##  \n                                       \n\n\nMask_2:\n##  ##    #### ##  \n### ##    # ## ##  \n ###        ##     \n  ###       ##     \n   ###      ##     \n##  ###     ##     \n##   ##    ####    \n                   \n"}
{"sentence": "xamj sdqS AdhWMP G bUoM TCF GIJx BOb Ox jwzWCO?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\neGFtaiBzZHFTIEFkaFdNUCBHIGJVb00gVENGIEdJSnggQk9iIE94IGp3eldDTz8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nknzw fqdF NquJZC T oHbZ GPS TVWk OBo Bk wjmJPB?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\namjxay sdqSay AdhWMPyay Gay UoMbay TCFay IJxGay ObBay Oxyay OjwzWCay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nx4mj 5dq5 4dhWMP G bU0M 7CF G1Jx B0b 0x jwzWC0?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ncs,k dfwD SfjE,[ H nIp, YVG HOKc NPn Pc kexEVP?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nx\u0250\u026f\u027e spbS \u2200p\u0265MW\u0500 \u2141 q\u2229oW \u22a5\u0186\u2132 \u2141I\u017fx \u15faOq Ox \u027e\u028dzM\u0186O?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\njmax Sqds PMWhdA G MoUb FCT xJIG bOB xO ?OCWzwj\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - gijx\n2. mellifluous - bob\n3. serendipity - tcf\n4. quixotic - xamj\n5. ephemeral - buom\n\nSentence:\nquixotic sdqS AdhWMP G ephemeral serendipity labyrinthine mellifluous Ox jwzWCO?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd5-a1-c3-e2 d4-d1-b4-d4 a1-d1-c2-c5-c3-a4 b2 b1-a5-e3-c3 e4-c1-a2 b2-d2-e2-d5 b1-e3-b1 e3-d5 e2-c5-z-c5-c1-e3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] sdqS AdhWMP G bUoM TCF GIJx [MASK_2] [MASK_1] jwzWCO?\n\nMask_0:\n##  ##      ##      ##   ##      ####  \n### ##       ##      ## ##        ##   \n ###       ## ##    # ### #       ##   \n  ###      ##  ##   ## # ##       ##   \n   ###     ## ###   ##   ##   ##  ##   \n##  ###    ##  ##   ##   ##   ##  ##   \n##   ##   ###  ##   ##   ##    ## #    \n                                       \n\n\nMask_1:\n ## ##    ##  ##   \n##   ##   ### ##   \n##   ##    ###     \n##   ##     ###    \n##   ##      ###   \n##   ##   ##  ###  \n ## ##    ##   ##  \n                   \n\n\nMask_2:\n### ##     ## ##    ### ##   \n ##  ##   ##   ##    ##  ##  \n ##  ##   ##   ##    ##  ##  \n ## ##    ##   ##    ## ##   \n ##  ##   ##   ##    ##  ##  \n ##  ##   ##   ##    ##  ##  \n### ##     ## ##    ### ##   \n                             \n"}
{"sentence": "PDU GLoC YobP Do XLLVfw Fjka Zr uSvt ndDl m jaNkjo JhkIP?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nUERVIEdMb0MgWW9iUCBEbyBYTExWZncgRmprYSBaciB1U3Z0IG5kRGwgbSBqYU5ram8gSmhrSVA/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nCQH TYbP LboC Qb KYYIsj Swxn Me hFig aqQy z wnAxwb WuxVC?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nUPDay oCGLay obPYay oDay XLLVfway aFjkay Zray uSvtyay ndDlay may aNkjojay IPJhkay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nPDU GL0C Y0bP D0 XLLVfw Fjk4 Zr u5v7 ndDl m j4Nkj0 Jhk1P?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n[FI H;pV Upn[ Fp C;;Bge Gkls Xt iDby mfF; , ksMlkp KjlO[?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0500\u15e1\u2229 \u2141\u2142o\u0186 \u2144oq\u0500 \u15e1o X\u2142\u2142\u039b\u025f\u028d \u2132\u027e\u029e\u0250 Z\u0279 nS\u028c\u0287 up\u15e1l \u026f \u027e\u0250N\u029e\u027eo \u017f\u0265\u029eI\u0500?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nUDP CoLG PboY oD wfVLLX akjF rZ tvSu lDdn m ojkNaj ?PIkhJ\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. serendipity - usvt\n2. quixotic - xllvfw\n3. labyrinthine - zr\n4. mellifluous - do\n5. ephemeral - gloc\n\nSentence:\nPDU ephemeral YobP mellifluous quixotic Fjka labyrinthine serendipity ndDl m jaNkjo JhkIP?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na4-d1-a5 b2-b3-e3-c1 e5-e3-b1-a4 d1-e3 d5-b3-b3-b5-a2-c5 a2-e2-a3-a1 z-c4 a5-d4-b5-e4 d3-d1-d1-b3 c3 e2-a1-d3-a3-e2-e3 e2-c2-a3-d2-a4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_1] [MASK_0] YobP Do XLLVfw Fjka Zr [MASK_2] ndDl m jaNkjo JhkIP?\n\nMask_0:\n ## ##    ####       ## ##     ## ##   \n##   ##    ##       ##   ##   ##   ##  \n##         ##       ##   ##   ##       \n##  ###    ##       ##   ##   ##       \n##   ##    ##       ##   ##   ##       \n##   ##    ##  ##   ##   ##   ##   ##  \n ## ##    ### ###    ## ##     ## ##   \n                                       \n\n\nMask_1:\n### ##    ### ##    ##  ###  \n ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##   ##   ##  \n ## ##     ##  ##   ##   ##  \n ##        ##  ##   ##   ##  \n####      ### ##     ## ##   \n                             \n\n\nMask_2:\n##  ###    ## ##    ### ###   #### ##  \n##   ##   ##   ##    ##  ##   # ## ##  \n##   ##   ####       ##  ##     ##     \n##   ##    #####     ##  ##     ##     \n##   ##       ###    ### ##     ##     \n##   ##   ##   ##     ###       ##     \n ## ##     ## ##       ##      ####    \n                                       \n"}
{"sentence": "hOz hWh nSS nIbf XpoM K gpn BKYHS Qa ztuZ R wYAcKF czXZLE lcOfXqXE UqH ksvxQ?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\naE96IGhXaCBuU1MgbkliZiBYcG9NIEsgZ3BuIEJLWUhTIFFhIHp0dVogUiB3WUFjS0YgY3pYWkxFIGxjT2ZYcVhFIFVxSCBrc3Z4UT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nuBm uJu aFF aVos KcbZ X tca OXLUF Dn mghM E jLNpXS pmKMYR ypBsKdKR HdU xfikD?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nOzhay hWhay nSSay Ibfnay oMXpay Kay gpnay BKYHSay aQay uZztay Ray AcKFwYay EczXZLay OfXqXElcay UqHyay ksvxQay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nh0z hWh n55 n1bf Xp0M K gpn BKYH5 Q4 z7uZ R wY4cKF czXZL3 lc0fXqX3 UqH k5vxQ?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\njPx jEj mDD mOng C[p, L h[m NLUJD Ws xyiX T eUSvLG vxCX;R ;vPgCwCR IwJ ldbcW?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0265Oz \u0265M\u0265 uSS uIq\u025f XdoW \ua4d8 \u0183du \u15fa\ua4d8\u2144HS \u10e2\u0250 z\u0287nZ \u1d1a \u028d\u2144\u2200\u0254\ua4d8\u2132 \u0254zXZ\u2142\u018e l\u0254O\u025fXbX\u018e \u2229bH \u029es\u028cx\u10e2?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nzOh hWh SSn fbIn MopX K npg SHYKB aQ Zutz R FKcAYw ELZXzc EXqXfOcl HqU ?Qxvsk\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - uqh\n2. labyrinthine - r\n3. quixotic - ztuz\n4. serendipity - xpom\n5. mellifluous - gpn\n\nSentence:\nhOz hWh nSS nIbf serendipity K mellifluous BKYHS Qa quixotic labyrinthine wYAcKF czXZLE lcOfXqXE ephemeral ksvxQ?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-e3-z c2-c5-c2 d3-d4-d4 d3-d2-b1-a2 d5-a4-e3-c3 a3 b2-a4-d3 b1-a3-e5-c2-d4 b4-a1 z-e4-a5-z c4 c5-e5-a1-c1-a3-a2 c1-z-d5-z-b3-e1 b3-c1-e3-a2-d5-b4-d5-e1 a5-b4-c2 a3-d4-b5-d5-b4-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nhOz hWh nSS [MASK_0] XpoM K gpn BKYHS Qa [MASK_1] R wYAcKF czXZLE lcOfXqXE UqH [MASK_2]?\n\nMask_0:\n###  ##     ####    ### ##    ### ###  \n  ## ##      ##      ##  ##    ##  ##  \n # ## #      ##      ##  ##    ##      \n ## ##       ##      ## ##     ## ##   \n ##  ##      ##      ##  ##    ##      \n ##  ##      ##      ##  ##    ##      \n###  ##     ####    ### ##    ####     \n                                       \n\n\nMask_1:\n### ##    #### ##   ##  ###   ### ##   \n##  ##    # ## ##   ##   ##   ##  ##   \n   ##       ##      ##   ##      ##    \n  ##        ##      ##   ##     ##     \n ##         ##      ##   ##    ##      \n##  ##      ##      ##   ##   ##  ##   \n# ####     ####      ## ##    # ####   \n                                       \n\n\nMask_2:\n##  ###    ## ##    ### ###   ##  ##     ## ##   \n##  ##    ##   ##    ##  ##   ### ##    ##   ##  \n## ##     ####       ##  ##    ###      ##   ##  \n## ##      #####     ##  ##     ###     ##   ##  \n## ###        ###    ### ##      ###    ##   ##  \n##  ##    ##   ##     ###     ##  ###   ##  ##   \n##  ###    ## ##       ##     ##   ##    ##  ##  \n                                                 \n"}
{"sentence": "FPqy Zsd hsL fFuYiWUjtty hrQ RCo'd xVBGSg OEn?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nRlBxeSBac2QgaHNMIGZGdVlpV1VqdHR5IGhyUSBSQ28nZCB4VkJHU2cgT0VuPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nSCdl Mfq ufY sShLvJHwggl ueD EPb'q kIOTFt BRa?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nFPqyay Zsday hsLay uYiWUjttyfFay hrQay o'dRCay xVBGSgay OEnyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nFPqy Z5d h5L fFuY1WUj77y hrQ RC0'd xVBG5g 03n?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nG[wu Xdf jd; gGiUoEIkyyu jtW TVp'f cBNHDh PRm?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u2132\u0500b\u028e Zsp \u0265s\u2142 \u025f\u2132n\u2144\u1d09M\u2229\u027e\u0287\u0287\u028e \u0265\u0279\u10e2 \u1d1a\u0186o'p x\u039b\u15fa\u2141S\u0183 O\u018eu?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nyqPF dsZ Lsh yttjUWiYuFf Qrh d'oCR gSGBVx ?nEO\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - zsd\n2. labyrinthine - hrq\n3. mellifluous - oen\n4. serendipity - ffuyiwujtty\n5. ephemeral - hsl\n\nSentence:\nFPqy quixotic ephemeral serendipity labyrinthine RCo'd xVBGSg OEn?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na2-a4-b4-e5 z-d4-d1 c2-d4-b3 a2-a2-a5-e5-d2-c5-a5-e2-e4-e4-e5 c2-c4-b4 c4-c1-e3-'-d1 d5-b5-b1-b2-d4-b2 e3-e1-d3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nFPqy [MASK_0] hsL [MASK_1] hrQ RCo'd xVBGSg [MASK_2]?\n\nMask_0:\n### ##     ## ##    ### ##   \n##  ##    ##   ##    ##  ##  \n   ##     ####       ##  ##  \n  ##       #####     ##  ##  \n ##           ###    ##  ##  \n##  ##    ##   ##    ##  ##  \n# ####     ## ##    ### ##   \n                             \n\n\nMask_1:\n### ###   ### ###   ##  ###   ##  ##      ####    ##   ##   ##  ###      ####   #### ##   #### ##   ##  ##   \n ##  ##    ##  ##   ##   ##   ##  ##       ##     ##   ##   ##   ##       ##    # ## ##   # ## ##   ##  ##   \n ##        ##       ##   ##   ##  ##       ##     ##   ##   ##   ##       ##      ##        ##      ##  ##   \n ## ##     ## ##    ##   ##    ## ##       ##     ## # ##   ##   ##       ##      ##        ##       ## ##   \n ##        ##       ##   ##     ##         ##     # ### #   ##   ##   ##  ##      ##        ##        ##     \n ##        ##       ##   ##     ##         ##      ## ##    ##   ##   ##  ##      ##        ##        ##     \n####      ####       ## ##      ##        ####    ##   ##    ## ##     ## #      ####      ####       ##     \n                                                                                                             \n\n\nMask_2:\n ## ##    ### ###   ###  ##  \n##   ##    ##  ##     ## ##  \n##   ##    ##        # ## #  \n##   ##    ## ##     ## ##   \n##   ##    ##        ##  ##  \n##   ##    ##  ##    ##  ##  \n ## ##    ### ###   ###  ##  \n                             \n"}
{"sentence": "JxUm cFO tMvB lXbBGm kcn nkv'a QXoP Cp Vw Hym rSM?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nSnhVbSBjRk8gdE12QiBsWGJCR20ga2NuIG5rdidhIFFYb1AgQ3AgVncgSHltIHJTTT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nWkHz pSB gZiO yKoOTz xpa axi'n DKbC Pc Ij Ulz eFZ?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nUmJxay OcFay tMvBay lXbBGmay kcnay ankv'ay oPQXay Cpay Vway Hymay rSMay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nJxUm cF0 7MvB lXbBGm kcn nkv'4 QX0P Cp Vw Hym r5M?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nKcI, vGP y,bN ;CnNH, lvm mlb's WCp[ V[ Be Ju, tD,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u017fx\u2229\u026f \u0254\u2132O \u0287W\u028c\u15fa lXq\u15fa\u2141\u026f \u029e\u0254u u\u029e\u028c'\u0250 \u10e2Xo\u0500 \u0186d \u039b\u028d H\u028e\u026f \u0279SW?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nmUxJ OFc BvMt mGBbXl nck a'vkn PoXQ pC wV myH ?MSr\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - qxop\n2. ephemeral - rsm\n3. serendipity - jxum\n4. mellifluous - lxbbgm\n5. quixotic - tmvb\n\nSentence:\nserendipity cFO quixotic mellifluous kcn nkv'a labyrinthine Cp Vw Hym rSM?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne2-d5-a5-c3 c1-a2-e3 e4-c3-b5-b1 b3-d5-b1-b1-b2-c3 a3-c1-d3 d3-a3-b5-'-a1 b4-d5-e3-a4 c1-a4 b5-c5 c2-e5-c3 c4-d4-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nJxUm cFO tMvB [MASK_2] kcn nkv'a [MASK_1] [MASK_0] Vw Hym rSM?\n\nMask_0:\n ## ##    ### ##   \n##   ##    ##  ##  \n##         ##  ##  \n##         ##  ##  \n##         ## ##   \n##   ##    ##      \n ## ##    ####     \n                   \n\n\nMask_1:\n ## ##    ##  ##     ## ##    ### ##   \n##   ##   ### ##    ##   ##    ##  ##  \n##   ##    ###      ##   ##    ##  ##  \n##   ##     ###     ##   ##    ##  ##  \n##   ##      ###    ##   ##    ## ##   \n##  ##    ##  ###   ##   ##    ##      \n ##  ##   ##   ##    ## ##    ####     \n                                       \n\n\nMask_2:\n####      ##  ##    ### ##    ### ##     ## ##    ##   ##  \n ##       ### ##     ##  ##    ##  ##   ##   ##    ## ##   \n ##        ###       ##  ##    ##  ##   ##        # ### #  \n ##         ###      ## ##     ## ##    ##  ###   ## # ##  \n ##          ###     ##  ##    ##  ##   ##   ##   ##   ##  \n ##  ##   ##  ###    ##  ##    ##  ##   ##   ##   ##   ##  \n### ###   ##   ##   ### ##    ### ##     ## ##    ##   ##  \n                                                           \n"}
{"sentence": "lSx Ejv xPjsRWXS RVfdpU tuJ yYkUzbO Kr rnYNXV?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nbFN4IEVqdiB4UGpzUldYUyBSVmZkcFUgdHVKIHlZa1V6Yk8gS3Igcm5ZTlhWPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nyFk Rwi kCwfEJKF EIsqcH ghW lLxHmoB Xe eaLAKI?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nlSxay Ejvyay xPjsRWXSay URVfdpay uJtay UzbOyYkay Kray rnYNXVay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nl5x 3jv xPj5RWX5 RVfdpU 7uJ yYkUzb0 Kr rnYNXV?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n;Dc Rkb c[kdTECD TBgf[I yiK uUlIxnP Lt tmUMCB?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nlSx \u018e\u027e\u028c x\u0500\u027es\u1d1aMXS \u1d1a\u039b\u025fpd\u2229 \u0287n\u017f \u028e\u2144\u029e\u2229zqO \ua4d8\u0279 \u0279u\u2144NX\u039b?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nxSl vjE SXWRsjPx UpdfVR Jut ObzUkYy rK ?VXNYnr\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - lsx\n2. labyrinthine - tuj\n3. serendipity - ejv\n4. mellifluous - rnynxv\n5. quixotic - kr\n\nSentence:\nephemeral serendipity xPjsRWXS RVfdpU labyrinthine yYkUzbO quixotic rnYNXV?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nb3-d4-d5 e1-e2-b5 d5-a4-e2-d4-c4-c5-d5-d4 c4-b5-a2-d1-a4-a5 e4-a5-e2 e5-e5-a3-a5-z-b1-e3 a3-c4 c4-d3-e5-d3-d5-b5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_0] Ejv xPjsRWXS [MASK_1] tuJ yYkUzbO Kr [MASK_2]?\n\nMask_0:\n####       ## ##    ##  ##   \n ##       ##   ##   ### ##   \n ##       ####       ###     \n ##        #####      ###    \n ##           ###      ###   \n ##  ##   ##   ##   ##  ###  \n### ###    ## ##    ##   ##  \n                             \n\n\nMask_1:\n### ##    ### ###   ### ###   ### ##    ### ##    ##  ###  \n ##  ##    ##  ##    ##  ##    ##  ##    ##  ##   ##   ##  \n ##  ##    ##  ##    ##        ##  ##    ##  ##   ##   ##  \n ## ##     ##  ##    ## ##     ##  ##    ##  ##   ##   ##  \n ## ##     ### ##    ##        ##  ##    ## ##    ##   ##  \n ##  ##     ###      ##        ##  ##    ##       ##   ##  \n#### ##      ##     ####      ### ##    ####       ## ##   \n                                                           \n\n\nMask_2:\n### ##    ###  ##   ##  ##    ###  ##   ##  ##    ### ###  \n ##  ##     ## ##   ##  ##      ## ##   ### ##     ##  ##  \n ##  ##    # ## #   ##  ##     # ## #    ###       ##  ##  \n ## ##     ## ##     ## ##     ## ##      ###      ##  ##  \n ## ##     ##  ##     ##       ##  ##      ###     ### ##  \n ##  ##    ##  ##     ##       ##  ##   ##  ###     ###    \n#### ##   ###  ##     ##      ###  ##   ##   ##      ##    \n                                                           \n"}
{"sentence": "oYh bny mFPS QGn kPBy QsXi Hydi TaW fkD hWE deOu?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nb1loIGJueSBtRlBTIFFHbiBrUEJ5IFFzWGkgSHlkaSBUYVcgZmtEIGhXRSBkZU91Pw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nbLu oal zSCF DTa xCOl DfKv Ulqv GnJ sxQ uJR qrBh?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\noYhyay bnyay mFPSay QGnay kPByay iQsXay iHyday aWTay fkDay EhWay eOuday?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n0Yh bny mFP5 QGn kPBy Q5X1 Hyd1 74W fkD hW3 d30u?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\npUj nmu ,G[D WHm l[Nu WdCo Jufo YsE glF jER frPi?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\no\u2144\u0265 qu\u028e \u026f\u2132\u0500S \u10e2\u2141u \u029e\u0500\u15fa\u028e \u10e2sX\u1d09 H\u028ep\u1d09 \u22a5\u0250M \u025f\u029e\u15e1 \u0265M\u018e p\u01ddOn?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nhYo ynb SPFm nGQ yBPk iXsQ idyH WaT Dkf EWh ?uOed\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - kpby\n2. serendipity - mfps\n3. mellifluous - bny\n4. labyrinthine - qgn\n5. ephemeral - deou\n\nSentence:\noYh mellifluous serendipity labyrinthine quixotic QsXi Hydi TaW fkD hWE deOu?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne3-e5-c2 b1-d3-e5 c3-a2-a4-d4 b4-b2-d3 a3-a4-b1-e5 b4-d4-d5-d2 c2-e5-d1-d2 e4-a1-c5 a2-a3-d1 c2-c5-e1 d1-e1-e3-a5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\noYh bny mFPS QGn kPBy QsXi Hydi [MASK_2] [MASK_1] hWE [MASK_0]?\n\nMask_0:\n### ##    ### ###    ## ##    ##  ###  \n ##  ##    ##  ##   ##   ##   ##   ##  \n ##  ##    ##       ##   ##   ##   ##  \n ##  ##    ## ##    ##   ##   ##   ##  \n ##  ##    ##       ##   ##   ##   ##  \n ##  ##    ##  ##   ##   ##   ##   ##  \n### ##    ### ###    ## ##     ## ##   \n                                       \n\n\nMask_1:\n### ###   ##  ###   ### ##   \n ##  ##   ##  ##     ##  ##  \n ##       ## ##      ##  ##  \n ## ##    ## ##      ##  ##  \n ##       ## ###     ##  ##  \n ##       ##  ##     ##  ##  \n####      ##  ###   ### ##   \n                             \n\n\nMask_2:\n#### ##     ##      ##   ##  \n# ## ##      ##     ##   ##  \n  ##       ## ##    ##   ##  \n  ##       ##  ##   ## # ##  \n  ##       ## ###   # ### #  \n  ##       ##  ##    ## ##   \n ####     ###  ##   ##   ##  \n                             \n"}
{"sentence": "hlGLs PCT s AXzU J hrwaSA YqDOuSqw iHwPOw nOkf?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\naGxHTHMgUENUIHMgQVh6VSBKIGhyd2FTQSBZcURPdVNxdyBpSHdQT3cgbk9rZj8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nuyTYf CPG f NKmH W uejnFN LdQBhFdj vUjCBj aBxs?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nhlGLsay PCTay say AXzUyay Jay aSAhrway OuSqwYqDay iHwPOwyay Okfnay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nhlGL5 PC7 5 4XzU J hrw454 YqD0u5qw 1HwP0w n0kf?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nj;H;d [VY d SCxI K jtesDS UwFPiDwe oJe[Pe mPlg?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0265l\u2141\u2142s \u0500\u0186\u22a5 s \u2200Xz\u2229 \u017f \u0265\u0279\u028d\u0250S\u2200 \u2144b\u15e1OnSb\u028d \u1d09H\u028d\u0500O\u028d uO\u029e\u025f?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nsLGlh TCP s UzXA J ASawrh wqSuODqY wOPwHi ?fkOn\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. ephemeral - axzu\n2. mellifluous - nokf\n3. quixotic - hlgls\n4. labyrinthine - yqdousqw\n5. serendipity - j\n\nSentence:\nquixotic PCT s ephemeral serendipity hrwaSA labyrinthine iHwPOw nOkf?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc2-b3-b2-b3-d4 a4-c1-e4 d4 a1-d5-z-a5 e2 c2-c4-c5-a1-d4-a1 e5-b4-d1-e3-a5-d4-b4-c5 d2-c2-c5-a4-e3-c5 d3-e3-a3-a2-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nhlGLs PCT s [MASK_1] J [MASK_2] YqDOuSqw iHwPOw [MASK_0]?\n\nMask_0:\n###  ##    ## ##    ##  ###   ### ###  \n  ## ##   ##   ##   ##  ##     ##  ##  \n # ## #   ##   ##   ## ##      ##      \n ## ##    ##   ##   ## ##      ## ##   \n ##  ##   ##   ##   ## ###     ##      \n ##  ##   ##   ##   ##  ##     ##      \n###  ##    ## ##    ##  ###   ####     \n                                       \n\n\nMask_1:\n  ##      ##  ##    ### ##    ##  ###  \n   ##     ### ##    ##  ##    ##   ##  \n ## ##     ###         ##     ##   ##  \n ##  ##     ###       ##      ##   ##  \n ## ###      ###     ##       ##   ##  \n ##  ##   ##  ###   ##  ##    ##   ##  \n###  ##   ##   ##   # ####     ## ##   \n                                       \n\n\nMask_2:\n###  ##   ### ##    ##   ##     ##       ## ##      ##     \n ##  ##    ##  ##   ##   ##      ##     ##   ##      ##    \n ##  ##    ##  ##   ##   ##    ## ##    ####       ## ##   \n ## ###    ## ##    ## # ##    ##  ##    #####     ##  ##  \n ##  ##    ## ##    # ### #    ## ###       ###    ## ###  \n ##  ##    ##  ##    ## ##     ##  ##   ##   ##    ##  ##  \n###  ##   #### ##   ##   ##   ###  ##    ## ##    ###  ##  \n                                                           \n"}
{"sentence": "rYY kav ckYw SnGbc Zbl uKR JoiuNTkMWm gl UtAqu?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncllZIGthdiBja1l3IFNuR2JjIFpibCB1S1IgSm9pdU5Ua01XbSBnbCBVdEFxdT8=\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\neLL xni pxLj FaTop Moy hXE WbvhAGxZJz ty HgNdh?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nrYYay avkay ckYway SnGbcay Zblay uKRyay oiuNTkMWmJay glay UtAquyay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nrYY k4v ckYw 5nGbc Zbl uKR J01uN7kMWm gl U74qu?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\ntUU lsb vlUe DmHnv Xn; iLT KpoiMYl,E, h; IySwi?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u0279\u2144\u2144 \u029e\u0250\u028c \u0254\u029e\u2144\u028d Su\u2141q\u0254 Zql n\ua4d8\u1d1a \u017fo\u1d09nN\u22a5\u029eWM\u026f \u0183l \u2229\u0287\u2200bn?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nYYr vak wYkc cbGnS lbZ RKu mWMkTNuioJ lg ?uqAtU\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. mellifluous - ukr\n2. ephemeral - utaqu\n3. serendipity - ckyw\n4. labyrinthine - zbl\n5. quixotic - sngbc\n\nSentence:\nrYY kav serendipity quixotic labyrinthine mellifluous JoiuNTkMWm gl UtAqu?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nc4-e5-e5 a3-a1-b5 c1-a3-e5-c5 d4-d3-b2-b1-c1 z-b1-b3 a5-a3-c4 e2-e3-d2-a5-d3-e4-a3-c3-c5-c3 b2-b3 a5-e4-a1-b4-a5-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nrYY [MASK_1] ckYw SnGbc Zbl [MASK_0] [MASK_2] gl UtAqu?\n\nMask_0:\n##  ###   ##  ###   ### ##   \n##   ##   ##  ##     ##  ##  \n##   ##   ## ##      ##  ##  \n##   ##   ## ##      ## ##   \n##   ##   ## ###     ## ##   \n##   ##   ##  ##     ##  ##  \n ## ##    ##  ###   #### ##  \n                             \n\n\nMask_1:\n##  ###     ##      ### ###  \n##  ##       ##      ##  ##  \n## ##      ## ##     ##  ##  \n## ##      ##  ##    ##  ##  \n## ###     ## ###    ### ##  \n##  ##     ##  ##     ###    \n##  ###   ###  ##      ##    \n                             \n\n\nMask_2:\n   ####    ## ##      ####    ##  ###   ###  ##   #### ##   ##  ###   ##   ##   ##   ##   ##   ##  \n    ##    ##   ##      ##     ##   ##     ## ##   # ## ##   ##  ##     ## ##    ##   ##    ## ##   \n    ##    ##   ##      ##     ##   ##    # ## #     ##      ## ##     # ### #   ##   ##   # ### #  \n    ##    ##   ##      ##     ##   ##    ## ##      ##      ## ##     ## # ##   ## # ##   ## # ##  \n##  ##    ##   ##      ##     ##   ##    ##  ##     ##      ## ###    ##   ##   # ### #   ##   ##  \n##  ##    ##   ##      ##     ##   ##    ##  ##     ##      ##  ##    ##   ##    ## ##    ##   ##  \n ## #      ## ##      ####     ## ##    ###  ##    ####     ##  ###   ##   ##   ##   ##   ##   ##  \n                                                                                                   \n"}
{"sentence": "nUz yYY sVUcp tu otBX m fNDD TSYllUNC dyFf TJF kJhN ZaUX btHjUOaO?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nblV6IHlZWSBzVlVjcCB0dSBvdEJYIG0gZk5ERCBUU1lsbFVOQyBkeUZmIFRKRiBrSmhOIFphVVggYnRIalVPYU8/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\naHm lLL fIHpc gh bgOK z sAQQ GFLyyHAP qlSs GWS xWuA MnHK ogUwHBnB?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\nUznay yYYay UcpsVay utay otBXyay may fNDDay UNCTSYllay dyFfay TJFay kJhNay aUXZay UOaObtHjay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\nnUz yYY 5VUcp 7u 07BX m fNDD 75YllUNC dyFf 7JF kJhN Z4UX b7HjU040?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nmIx uUU dBIv[ yi pyNC , gMFF YDU;;IMV fuGg YKG lKjM XsIC nyJkIPsP?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nu\u2229z \u028e\u2144\u2144 s\u039b\u2229\u0254d \u0287n o\u0287\u15faX \u026f \u025fN\u15e1\u15e1 \u22a5S\u2144ll\u2229N\u0186 p\u028e\u2132\u025f \u22a5\u017f\u2132 \u029e\u017f\u0265N Z\u0250\u2229X q\u0287H\u027e\u2229O\u0250O?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nzUn YYy pcUVs ut XBto m DDNf CNUllYST fFyd FJT NhJk XUaZ ?OaOUjHtb\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - m\n2. serendipity - otbx\n3. ephemeral - svucp\n4. quixotic - fndd\n5. mellifluous - zaux\n\nSentence:\nnUz yYY ephemeral tu serendipity labyrinthine quixotic TSYllUNC dyFf TJF kJhN mellifluous btHjUOaO?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\nd3-a5-z e5-e5-e5 d4-b5-a5-c1-a4 e4-a5 e3-e4-b1-d5 c3 a2-d3-d1-d1 e4-d4-e5-b3-b3-a5-d3-c1 d1-e5-a2-a2 e4-e2-a2 a3-e2-c2-d3 z-a1-a5-d5 b1-e4-c2-e2-a5-e3-a1-e3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\nnUz yYY sVUcp tu [MASK_1] m fNDD [MASK_2] dyFf TJF [MASK_0] ZaUX btHjUOaO?\n\nMask_0:\n##  ###      ####   ###  ##   ###  ##  \n##  ##        ##     ##  ##     ## ##  \n## ##         ##     ##  ##    # ## #  \n## ##         ##     ## ###    ## ##   \n## ###    ##  ##     ##  ##    ##  ##  \n##  ##    ##  ##     ##  ##    ##  ##  \n##  ###    ## #     ###  ##   ###  ##  \n                                       \n\n\nMask_1:\n ## ##    #### ##   ### ##    ##  ##   \n##   ##   # ## ##    ##  ##   ### ##   \n##   ##     ##       ##  ##    ###     \n##   ##     ##       ## ##      ###    \n##   ##     ##       ##  ##      ###   \n##   ##     ##       ##  ##   ##  ###  \n ## ##     ####     ### ##    ##   ##  \n                                       \n\n\nMask_2:\n#### ##    ## ##    ##  ##    ####      ####      ##  ###   ###  ##    ## ##   \n# ## ##   ##   ##   ##  ##     ##        ##       ##   ##     ## ##   ##   ##  \n  ##      ####      ##  ##     ##        ##       ##   ##    # ## #   ##       \n  ##       #####     ## ##     ##        ##       ##   ##    ## ##    ##       \n  ##          ###     ##       ##        ##       ##   ##    ##  ##   ##       \n  ##      ##   ##     ##       ##  ##    ##  ##   ##   ##    ##  ##   ##   ##  \n ####      ## ##      ##      ### ###   ### ###    ## ##    ###  ##    ## ##   \n                                                                               \n"}
{"sentence": "eC 'fKAxMzYCFV' qlKtOW ote jkAP uJqX wzI V hxIGdfPm?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\nZUMgJ2ZLQXhNellDRlYnIHFsS3RPVyBvdGUgamtBUCB1SnFYIHd6SSBWIGh4SUdkZlBtPw==\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\nrP 'sXNkZmLPSI' dyXgBJ bgr wxNC hWdK jmV I ukVTqsCz?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\neCyay AxMzYCFV'fKay' OWqlKtay oteyay APjkay uJqXyay Iwzay Vay IGdfPmhxay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\n3C 'fK4xMzYCFV' qlK70W 073 jk4P uJqX wz1 V hx1GdfPm?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\nrV 'gLSc,xUVGB' w;LyPE pyr klS[ iKwC exO B jcOHfg[,?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\n\u01dd\u0186 '\u025f\ua4d8\u2200xWz\u2144\u0186\u2132\u039b' bl\ua4d8\u0287OM o\u0287\u01dd \u027e\u029e\u2200\u0500 n\u017fbX \u028dzI \u039b \u0265xI\u2141p\u025f\u0500\u026f?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nCe 'VFCYzMxAKf' WOtKlq eto PAkj XqJu Izw V ?mPfdGIxh\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. quixotic - v\n2. serendipity - ujqx\n3. ephemeral - jkap\n4. labyrinthine - wzi\n5. mellifluous - ec\n\nSentence:\nmellifluous 'fKAxMzYCFV' qlKtOW ote ephemeral serendipity labyrinthine quixotic hxIGdfPm?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\ne1-c1 '-a2-a3-a1-d5-c3-z-e5-c1-a2-b5-' b4-b3-a3-e4-e3-c5 e3-e4-e1 e2-a3-a1-a4 a5-e2-b4-d5 c5-z-d2 b5 c2-d5-d2-b2-d1-a2-a4-c3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\n[MASK_2] 'fKAxMzYCFV' [MASK_1] ote jkAP uJqX [MASK_0] V hxIGdfPm?\n\nMask_0:\n##   ##   ### ##      ####   \n##   ##   ##  ##       ##    \n##   ##      ##        ##    \n## # ##     ##         ##    \n# ### #    ##          ##    \n ## ##    ##  ##       ##    \n##   ##   # ####      ####   \n                             \n\n\nMask_1:\n ## ##    ####      ##  ###   #### ##    ## ##    ##   ##  \n##   ##    ##       ##  ##    # ## ##   ##   ##   ##   ##  \n##   ##    ##       ## ##       ##      ##   ##   ##   ##  \n##   ##    ##       ## ##       ##      ##   ##   ## # ##  \n##   ##    ##       ## ###      ##      ##   ##   # ### #  \n##  ##     ##  ##   ##  ##      ##      ##   ##    ## ##   \n ##  ##   ### ###   ##  ###    ####      ## ##    ##   ##  \n                                                           \n\n\nMask_2:\n### ###    ## ##   \n ##  ##   ##   ##  \n ##       ##       \n ## ##    ##       \n ##       ##       \n ##  ##   ##   ##  \n### ###    ## ##   \n                   \n"}
{"sentence": "pDv EsGpQ JE rX mR Kuu NLVE IAWoOq nQl I HkgU lqWE BM IrpGq fMPZOhsK?", "long": true, "question": true, "random": true, "base_64": "The following sentence has been encrypted using Base64.\n\ncER2IEVzR3BRIEpFIHJYIG1SIEt1dSBOTFZFIElBV29PcSBuUWwgSSBIa2dVIGxxV0UgQk0gSXJwR3EgZk1QWk9oc0s/\n\nDecode the Base64 sentence.", "rot_13": "The following sentence has been encrypted using ROT13.\n\ncQi RfTcD WR eK zE Xhh AYIR VNJbBd aDy V UxtH ydJR OZ VecTd sZCMBufX?\n\nDecode the ROT13 sentence.", "pig_latin": "The following sentence has been encrypted using Pig Latin.\n\npDvay EsGpQyay EJay rXay mRay uuKay ENLVay IAWoOqyay nQlay Iyay UHkgay ElqWay BMay IrpGqyay OhsKfMPZay?\n\nDecode the Pig Latin sentence.", "leetspeak": "The following sentence has been encrypted using Leetspeak.\n\npDv 35GpQ J3 rX mR Kuu NLV3 14W00q nQl 1 HkgU lqW3 BM 1rpGq fMPZ0h5K?\n\nDecode the Leetspeak sentence.", "keyboard": "I shifted every character one key on a standard QWERTY keyboard. For example, the word \"Jr;;p\" is decoded as \"Hello\". The following sentence has been encrypted by using the same technique.\n\n[Fb RdH[W KR tC ,T Lii M;BR OSEpPw mW; O JlhI ;wER N, Ot[Hw g,[XPjdL?\n\nShift each character one key to the left to decode the above sentence.", "upside_down": "The following sentence has been encrypted by flipping it upside down.\n\nd\u15e1\u028c \u018es\u2141d\u10e2 \u017f\u018e \u0279X \u026f\u1d1a \ua4d8nn N\u2142\u039b\u018e I\u2200MoOb u\u10e2l I H\u029e\u0183\u2229 lbM\u018e \u15faW I\u0279d\u2141b \u025fW\u0500ZO\u0265s\ua4d8?\n\nRotate the characters to get the decoded sentence.", "word_reversal": "The following sentence has been encrypted by reversing the characters of each word.\n\nvDp QpGsE EJ Xr Rm uuK EVLN qOoWAI lQn I UgkH EWql MB qGprI ?KshOZPMf\n\nRotate the characters of each word to get the decoded sentence.", "word_substitution": "The following mapping represents the substitution of words that you need to make in order to fully understand the sentence.\n\nMappings:\n1. labyrinthine - hkgu\n2. ephemeral - iawooq\n3. serendipity - kuu\n4. quixotic - i\n5. mellifluous - nlve\n\nSentence:\npDv EsGpQ JE rX mR serendipity mellifluous ephemeral nQl quixotic labyrinthine lqWE BM IrpGq fMPZOhsK?", "grid_encoding": "I have a 5 by 5 square. Similar to chess, I have labeled the horizontal in alphabets, a, b, c, d, and e, and verticals in numbers, 1, 2, 3, 4, and 5. So the board goes from a1 to e5.\nEach square is labeled as a character in the alphabet in increasing order. For example\na1 -> a\nb1 -> b\nc1 -> c\nd1 -> d\ne1 -> e\na2 -> f\nb2 -> g\nc2 -> h\nand so on.\n\nThe following sentence has been encrypted using the above notation:\n\na4-d1-b5 e1-d4-b2-a4-b4 e2-e1 c4-d5 c3-c4 a3-a5-a5 d3-b3-b5-e1 d2-a1-c5-e3-e3-b4 d3-b4-b3 d2 c2-a3-b2-a5 b3-b4-c5-e1 b1-c3 d2-c4-a4-b2-b4 a2-c3-a4-z-e3-c2-d4-a3-?\n\nDecode the sentence.", "art_ascii": "Three words are masked from the sentence and the masked words are represented via ASCII art as follows\n\nSentence:\npDv [MASK_1] JE rX [MASK_2] Kuu NLVE IAWoOq nQl I HkgU lqWE [MASK_0] IrpGq fMPZOhsK?\n\nMask_0:\n### ##    ##   ##  \n ##  ##    ## ##   \n ##  ##   # ### #  \n ## ##    ## # ##  \n ##  ##   ##   ##  \n ##  ##   ##   ##  \n### ##    ##   ##  \n                   \n\n\nMask_1:\n### ###    ## ##     ## ##    ### ##     ## ##   \n ##  ##   ##   ##   ##   ##    ##  ##   ##   ##  \n ##       ####      ##         ##  ##   ##   ##  \n ## ##     #####    ##  ###    ##  ##   ##   ##  \n ##           ###   ##   ##    ## ##    ##   ##  \n ##  ##   ##   ##   ##   ##    ##       ##  ##   \n### ###    ## ##     ## ##    ####       ##  ##  \n                                                 \n\n\nMask_2:\n##   ##   ### ##   \n ## ##     ##  ##  \n# ### #    ##  ##  \n## # ##    ## ##   \n##   ##    ## ##   \n##   ##    ##  ##  \n##   ##   #### ##  \n                   \n"}
